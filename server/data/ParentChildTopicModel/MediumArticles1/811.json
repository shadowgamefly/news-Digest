{"name": "811", "parent": "", "title": "This Picture Will Change the Way You Learn to\u00a0Code", "sentences": [{"718f": "Source: https://github.com/kamranahmedse/developer-roadmap. Licensed under CC BY\u00a04.0"}, {"60bd": "This Picture Will Change the Way You Learn to\u00a0Code"}, {"1cb4": "Recently several amazing visualizations of the various technologies used by web developers in 2017 surfaced on the Interwebs. One of them (geared towards backend developers) is pictured above."}, {"c7f0": "These are great resources for both beginners and experts alike. They clearly lay out what technologies you should be aware of if you want to get a job as a frontend web developer, backend web developer, or system administrator."}, {"243d": "But I think they are especially useful to absolute beginners learning their first few lines of code."}, {"f467": "Here\u2019s why."}, {"0546": "I\u2019ve been programming for over 15 years (started with QBASIC games at age 8!). I consider myself to be a fullstack web developer, and as such, everything shown in those visualizations falls into my domain in one way or another."}, {"47f2": "Now take a good look at those pictures. They\u2019re pretty scary, right? But they\u2019re not a map of everything you need to know to be a developer. Not at all! Do you really think I \u2015 or any developer \u2015 actually knows how to use all this stuff?"}, {"64c4": "Not a chance."}, {"ac49": "When you\u2019re just getting started with computer programming, it is absolutely overwhelming. You hear about students who can write code in 10 programming languages, meet a fabled Linux guru, or try to keep up as your instructor speeds through dozens of computer science concepts. And like thousands of others, you probably make a very understandable mistake: you think you\u2019re supposed to know everything there is to know about programming."}, {"57df": "You\u2019re not. And no one will ever expect you to."}, {"87aa": "Even after years as a developer, I only know a small fraction of the technologies in those pictures at an \u201cexpert\u201d level. I don\u2019t even recognize a few of them! I\u2019ve used maybe half of them at some point or another, but 75% of that usage was probably under an hour total in my life."}, {"5498": "But if you sit me down for an hour with any of them, I can probably put it to use. And that\u2019s because I know how to learn like a developer."}, {"6ec7": "As a developer, you will always be fighting a losing battle if you try to stay on top of every new technology. There are just too many of them, and they\u2019re changing faster than ever. At best, you can pick a few to stay up-to-date on."}, {"f0b7": "So rather than spending your time trying to learn every programming language and technology, you should instead learn how to learn like a developer. Here\u2019s what that means:"}, {"4120": "Learn How to Read Documentation"}, {"901d": "Here\u2019s an example for Python file input and output. Here\u2019s an example of a similar library in Golang."}, {"365f": "See the similarities? Code examples, short summaries, and typed interfaces (if you\u2019re lucky) are your best friends when you\u2019re trying to answer the questions:"}, {"9113": "Learn How to Read Source\u00a0Code"}, {"c072": "Here\u2019s the implementation for a JSON encoder in Python. If part of this library isn\u2019t behaving how you expect, or if the documentation is lacking, reading the code will give you what you need, although (usually) in a less approachable format."}, {"cfa4": "Some tricks I\u2019ve found useful are:"}, {"7e0f": "Learn How to Debug\u00a0Code"}, {"fae3": "Debuggers. Break statements. Print statements! Learn how to use them to hone in on issues in your code, because that\u2019s what you\u2019re going to spend most of your time doing. Some useful things to keep in mind are:"}, {"46e8": "Learn How to Ask For\u00a0Help"}, {"de10": "This isn\u2019t as cheesy as it sounds. There are plenty of great places to get help when you are stuck. My order typically is:"}, {"926c": "When you\u2019re asking others for help, here are some good things to remember:"}, {"f383": "Conclusion"}, {"9941": "As a developer, there is too much out there to master everything. Don\u2019t even try. Learn how you work best as a developer, build a toolset that fits you, and don\u2019t try to have all the answers. Focus on learning how to find the answers quickly."}, {"0472": "Whether you\u2019re just getting started with coding or your fingers are already well worn by your favorite mechanical keyboard, I hope this post has been useful for you."}, {"8d00": "Remember: No one expects you to know everything. Have fun, and never stop learning."}, {"5f92": "If you want to talk coding, you can find me on Twitter or at Codevolve.com."}, {"15b0": "Happy coding!"}], "content": "Source: https://github.com/kamranahmedse/developer-roadmap. Licensed under CC BY\u00a04.0 This Picture Will Change the Way You Learn to\u00a0Code Recently several amazing visualizations of the various technologies used by web developers in 2017 surfaced on the Interwebs. One of them (geared towards backend developers) is pictured above. These are great resources for both beginners and experts alike. They clearly lay out what technologies you should be aware of if you want to get a job as a frontend web developer, backend web developer, or system administrator. But I think they are especially useful to absolute beginners learning their first few lines of code. Here\u2019s why. I\u2019ve been programming for over 15 years (started with QBASIC games at age 8!). I consider myself to be a fullstack web developer, and as such, everything shown in those visualizations falls into my domain in one way or another. Now take a good look at those pictures. They\u2019re pretty scary, right? But they\u2019re not a map of everything you need to know to be a developer. Not at all! Do you really think I \u2015 or any developer \u2015 actually knows how to use all this stuff? Not a chance. When you\u2019re just getting started with computer programming, it is absolutely overwhelming. You hear about students who can write code in 10 programming languages, meet a fabled Linux guru, or try to keep up as your instructor speeds through dozens of computer science concepts. And like thousands of others, you probably make a very understandable mistake: you think you\u2019re supposed to know everything there is to know about programming. You\u2019re not. And no one will ever expect you to. Even after years as a developer, I only know a small fraction of the technologies in those pictures at an \u201cexpert\u201d level. I don\u2019t even recognize a few of them! I\u2019ve used maybe half of them at some point or another, but 75% of that usage was probably under an hour total in my life. But if you sit me down for an hour with any of them, I can probably put it to use. And that\u2019s because I know how to learn like a developer. As a developer, you will always be fighting a losing battle if you try to stay on top of every new technology. There are just too many of them, and they\u2019re changing faster than ever. At best, you can pick a few to stay up-to-date on. So rather than spending your time trying to learn every programming language and technology, you should instead learn how to learn like a developer. Here\u2019s what that means: Learn How to Read Documentation Here\u2019s an example for Python file input and output. Here\u2019s an example of a similar library in Golang. See the similarities? Code examples, short summaries, and typed interfaces (if you\u2019re lucky) are your best friends when you\u2019re trying to answer the questions: Learn How to Read Source\u00a0Code Here\u2019s the implementation for a JSON encoder in Python. If part of this library isn\u2019t behaving how you expect, or if the documentation is lacking, reading the code will give you what you need, although (usually) in a less approachable format. Some tricks I\u2019ve found useful are: Learn How to Debug\u00a0Code Debuggers. Break statements. Print statements! Learn how to use them to hone in on issues in your code, because that\u2019s what you\u2019re going to spend most of your time doing. Some useful things to keep in mind are: Learn How to Ask For\u00a0Help This isn\u2019t as cheesy as it sounds. There are plenty of great places to get help when you are stuck. My order typically is: When you\u2019re asking others for help, here are some good things to remember: Conclusion As a developer, there is too much out there to master everything. Don\u2019t even try. Learn how you work best as a developer, build a toolset that fits you, and don\u2019t try to have all the answers. Focus on learning how to find the answers quickly. Whether you\u2019re just getting started with coding or your fingers are already well worn by your favorite mechanical keyboard, I hope this post has been useful for you. Remember: No one expects you to know everything. Have fun, and never stop learning. If you want to talk coding, you can find me on Twitter or at Codevolve.com. Happy coding! ", "child": "811_1\t811_2\t811_3\t811_4\t811_5\t811_6"}