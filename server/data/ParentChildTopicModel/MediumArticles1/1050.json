{"name": "1050", "parent": "", "title": "Modern JavaScript for Ancient Web Developers", "sentences": [{"467e": "Modern JavaScript for Ancient Web Developers"}, {"6cac": "Learn JavaScript using\u2026 JavaScript. Image via learnyounode."}, {"3959": "There\u2019s a certain kind of old-school, backend web developer who, a long time ago, mastered things like Perl or Python or PHP or Java Server Pages, maybe even Rails or Django. This person worked with giant relational databases and built APIs that serve up JSON and even (gasp!) XML."}, {"e487": "This person is a backend developer, so for a long time, JavaScript was just a fun little toy that added a bit of frontend trickery that could make things on a web page change color. If JavaScript was being really useful, it would add form validation that helped prevent the wrong information from getting into the database. Eight years ago jQuery blew this person\u2019s mind. JavaScript itself was a language one merely tolerated, but never embraced."}, {"701b": "Then JavaScript and its modern frameworks ate backend, frontend, and everything in between, and it was time to re-become a web developer in 2017\u200a\u2014\u200awho writes JavaScript."}, {"8efd": "Hi. I\u2019m an ancient web developer who is learning modern JavaScript. I\u2019ve just gotten started and I\u2019m having a ball, but I\u2019ve also got whiplash. There are a few things I wish I\u2019d understood and accepted about the world of modern JavaScript before I got started."}, {"cba0": "Here are some of the changes I had to make to my own mindset and expectations around learning a new ecosystem based on an old language which has taken over my craft."}, {"39d6": "Moving Target (dot\u00a0JS)"}, {"129d": "The modern JS world is nothing if not young and rapidly changing, so it\u2019s easy to choose the framework or templating engine or build tool or tutorial that\u2019s out of date or teaching a technique that\u2019s no longer best practice (when there even is a generally-accepted notion of what \u201cbest practice\u201d is)."}, {"ef77": "In those cases, it\u2019s time to reach out to your Local Friendly Modern JavaScript Engineer, and have a little chat about the path you\u2019re on. I\u2019ve been lucky to get fantastic guidance from my fellow engineers here at Postlight (especially Jeremy Mack), and I thank them for putting up with my endless questions."}, {"d5b6": "The point is, learning modern JavaScript requires human intervention. Things haven\u2019t settled down long enough for curriculums and guides to gel and mature, and for best practices to become authoritative for more than a few months. If you don\u2019t have a human expert at hand, at the very least, check the date on that Medium article or tutorial or the last commit in that GitHub repository. If it\u2019s more than a year old, it\u2019s almost certainly not the way to go."}, {"0065": "New Problems, Not-Yet-Established Solutions"}, {"8124": "Along these same lines: when you\u2019re learning modern JavaScript, there\u2019s a good chance that the solution to the problem you\u2019re having is still getting worked out. In fact, it\u2019s very possible it is only one code review away from getting merged into the package you\u2019re using."}, {"6a58": "When you\u2019re working with an ancient language like PHP, you Google a question or problem, and almost 100% of the time you will find a 5-year-old Stack Overflow answer that solves it, or a full discussion in the (thorough, heavily commented, and unparalleled) documentation."}, {"796b": "Not so much with modern JavaScript. I\u2019ve found myself trawling through comments on GitHub issues and source code only to find information that contradicts out-of-date documentation more than once. Parsing GitHub repos is part of learning and using various JavaScript packages, and for an Old Person like me, working that close to the edge can be bewildering."}, {"dad7": "Tooling Overload"}, {"d478": "The other difficult thing about learning JavaScript in 2017: getting set up will feel like it takes you as long as building the app will. The sheer number of tools and plugins and packages and dependencies and editor setup and build configurations required to do it \u201cthe right way\u201d is enough to stall you before you even get started."}, {"a6b6": "Do not let this stop you. I had to let go of doing it The Right Way from the get-go, and allow myself to fumble through using suboptimal or just plain amateur setups just to get comfortable with individual tools. (Let me tell you about that time I used nodemon to do my linting\u2026) Then I\u2019d find out better ways and incorporate what I could, when I could, on each new project."}, {"f842": "The JS world has a lot of work to do in this regard. Again, this area of modern JavaScript is a constantly moving target, but my Local Friendly Modern JS Engineers tell me that this tutorial from Jonathan Verrecchia is currently the definitive guide to building a modern JavaScript stack. For now."}, {"3741": "verekia/js-stack-from-scratchjs-stack-from-scratch - \ud83c\udf89 V2 release! \ud83c\udf89 - Step-by-step tutorial to build a modern JavaScript stack.github.com"}, {"b4f1": "Tutorial / Project / Throw It Away /\u00a0Repeat"}, {"08da": "When you\u2019re learning any new language, you write code and then you throw it away, and then you write some more. My modern JavaScript education has been a stepladder of tutorials, then a small tractable project during which I compiled a list of questions and problems, then a check-in with my coworkers to get answers and explanations, then more tutorials, then a slightly bigger project, more questions, a check-in\u200a\u2014\u200awash, rinse, repeat."}, {"9438": "Here\u2019s an incomplete list of some of the workshops and tutorials I\u2019ve run through in this process so far."}, {"6a5f": "npm i -g how-to-npm"}, {"a2b0": "burger.resolve()\u200a\u2014\u200aimage via The Promise of a Burger\u00a0Party."}, {"3048": "From here I knew enough to get myself into all sorts of trouble, like experiment with Jest for testing, Botkit for more Slack bot fun, and Serverless to really hammer home the value of functional programming. If you don\u2019t know what any of that means, that\u2019s okay. It\u2019s a big world, and we all take our own paths through it."}, {"0034": "\u201cFirst do it, then do it right, then do it\u00a0better.\u201d"}, {"bf98": "Ultimately the most important thing I\u2019ve had to remember is this: Doing is learning. Doing it badly? It\u2019s still learning."}, {"ea16": "Learning modern JavaScript these days can feel like a futile exercise in WTF. For those moments you\u2019re wondering if you missed your calling as a barista, Google\u2019s Addy Osmani has the right advice:"}, {"5a59": "I encourage folks to adopt this approach to keeping up with the JavaScript ecosystem: first do it, then do it right, then do it better. [\u2026]"}, {"c7f9": "It takes time, experimentation and skill to master the fundamentals of any new topic. Beginners shouldn\u2019t feel like they\u2019re failing if they\u2019re not using the library-du-jour or reactive-pattern of the week. It took me weeks to get Babel and React right. Longer to get Isomorphic JS, WebPack and all of the other libraries around it right. Start simple and build on that base."}, {"2012": "Thanks to NodeSchool and Free Code Camp, two fantastic resources for beginners learning JavaScript."}], "content": "Modern JavaScript for Ancient Web Developers Learn JavaScript using\u2026 JavaScript. Image via learnyounode. There\u2019s a certain kind of old-school, backend web developer who, a long time ago, mastered things like Perl or Python or PHP or Java Server Pages, maybe even Rails or Django. This person worked with giant relational databases and built APIs that serve up JSON and even (gasp!) XML. This person is a backend developer, so for a long time, JavaScript was just a fun little toy that added a bit of frontend trickery that could make things on a web page change color. If JavaScript was being really useful, it would add form validation that helped prevent the wrong information from getting into the database. Eight years ago jQuery blew this person\u2019s mind. JavaScript itself was a language one merely tolerated, but never embraced. Then JavaScript and its modern frameworks ate backend, frontend, and everything in between, and it was time to re-become a web developer in 2017\u200a\u2014\u200awho writes JavaScript. Hi. I\u2019m an ancient web developer who is learning modern JavaScript. I\u2019ve just gotten started and I\u2019m having a ball, but I\u2019ve also got whiplash. There are a few things I wish I\u2019d understood and accepted about the world of modern JavaScript before I got started. Here are some of the changes I had to make to my own mindset and expectations around learning a new ecosystem based on an old language which has taken over my craft. Moving Target (dot\u00a0JS) The modern JS world is nothing if not young and rapidly changing, so it\u2019s easy to choose the framework or templating engine or build tool or tutorial that\u2019s out of date or teaching a technique that\u2019s no longer best practice (when there even is a generally-accepted notion of what \u201cbest practice\u201d is). In those cases, it\u2019s time to reach out to your Local Friendly Modern JavaScript Engineer, and have a little chat about the path you\u2019re on. I\u2019ve been lucky to get fantastic guidance from my fellow engineers here at Postlight (especially Jeremy Mack), and I thank them for putting up with my endless questions. The point is, learning modern JavaScript requires human intervention. Things haven\u2019t settled down long enough for curriculums and guides to gel and mature, and for best practices to become authoritative for more than a few months. If you don\u2019t have a human expert at hand, at the very least, check the date on that Medium article or tutorial or the last commit in that GitHub repository. If it\u2019s more than a year old, it\u2019s almost certainly not the way to go. New Problems, Not-Yet-Established Solutions Along these same lines: when you\u2019re learning modern JavaScript, there\u2019s a good chance that the solution to the problem you\u2019re having is still getting worked out. In fact, it\u2019s very possible it is only one code review away from getting merged into the package you\u2019re using. When you\u2019re working with an ancient language like PHP, you Google a question or problem, and almost 100% of the time you will find a 5-year-old Stack Overflow answer that solves it, or a full discussion in the (thorough, heavily commented, and unparalleled) documentation. Not so much with modern JavaScript. I\u2019ve found myself trawling through comments on GitHub issues and source code only to find information that contradicts out-of-date documentation more than once. Parsing GitHub repos is part of learning and using various JavaScript packages, and for an Old Person like me, working that close to the edge can be bewildering. Tooling Overload The other difficult thing about learning JavaScript in 2017: getting set up will feel like it takes you as long as building the app will. The sheer number of tools and plugins and packages and dependencies and editor setup and build configurations required to do it \u201cthe right way\u201d is enough to stall you before you even get started. Do not let this stop you. I had to let go of doing it The Right Way from the get-go, and allow myself to fumble through using suboptimal or just plain amateur setups just to get comfortable with individual tools. (Let me tell you about that time I used nodemon to do my linting\u2026) Then I\u2019d find out better ways and incorporate what I could, when I could, on each new project. The JS world has a lot of work to do in this regard. Again, this area of modern JavaScript is a constantly moving target, but my Local Friendly Modern JS Engineers tell me that this tutorial from Jonathan Verrecchia is currently the definitive guide to building a modern JavaScript stack. For now. verekia/js-stack-from-scratchjs-stack-from-scratch - \ud83c\udf89 V2 release! \ud83c\udf89 - Step-by-step tutorial to build a modern JavaScript stack.github.com Tutorial / Project / Throw It Away /\u00a0Repeat When you\u2019re learning any new language, you write code and then you throw it away, and then you write some more. My modern JavaScript education has been a stepladder of tutorials, then a small tractable project during which I compiled a list of questions and problems, then a check-in with my coworkers to get answers and explanations, then more tutorials, then a slightly bigger project, more questions, a check-in\u200a\u2014\u200awash, rinse, repeat. Here\u2019s an incomplete list of some of the workshops and tutorials I\u2019ve run through in this process so far. npm i -g how-to-npm burger.resolve()\u200a\u2014\u200aimage via The Promise of a Burger\u00a0Party. From here I knew enough to get myself into all sorts of trouble, like experiment with Jest for testing, Botkit for more Slack bot fun, and Serverless to really hammer home the value of functional programming. If you don\u2019t know what any of that means, that\u2019s okay. It\u2019s a big world, and we all take our own paths through it. \u201cFirst do it, then do it right, then do it\u00a0better.\u201d Ultimately the most important thing I\u2019ve had to remember is this: Doing is learning. Doing it badly? It\u2019s still learning. Learning modern JavaScript these days can feel like a futile exercise in WTF. For those moments you\u2019re wondering if you missed your calling as a barista, Google\u2019s Addy Osmani has the right advice: I encourage folks to adopt this approach to keeping up with the JavaScript ecosystem: first do it, then do it right, then do it better. [\u2026] It takes time, experimentation and skill to master the fundamentals of any new topic. Beginners shouldn\u2019t feel like they\u2019re failing if they\u2019re not using the library-du-jour or reactive-pattern of the week. It took me weeks to get Babel and React right. Longer to get Isomorphic JS, WebPack and all of the other libraries around it right. Start simple and build on that base. Thanks to NodeSchool and Free Code Camp, two fantastic resources for beginners learning JavaScript. ", "child": "1050_1\t1050_2\t1050_3\t1050_4\t1050_5\t1050_6\t1050_7\t1050_8\t1050_9\t1050_10\t1050_11\t1050_12\t1050_13\t1050_14\t1050_15\t1050_16\t1050_17\t1050_18\t1050_19\t1050_20\t1050_21\t1050_22\t1050_23\t1050_24\t1050_25"}