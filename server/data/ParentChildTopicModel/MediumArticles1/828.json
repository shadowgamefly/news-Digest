{"name": "828", "parent": "", "title": "Wizard Design\u00a0Pattern", "sentences": [{"70f2": "Wizard Design\u00a0Pattern"}, {"e948": "by Nick\u00a0Babich"}, {"18f2": "Today I\u2019d like to talk about the topic of wizards, and I don\u2019t mean those guys with the hats and all the magical spells. I mean the step-by-step process that we use in apps or websites to guide someone through a process."}, {"8d97": "Should you use a wizard? Isn\u2019t a wizard just a patch for a bad interface? In this article, you\u2019ll find answers to these questions."}, {"ded1": "What is a\u00a0Wizard?"}, {"b67e": "A wizard presents a series of steps or conditions that the user needs to complete in order to accomplish a goal (e.g. use a product). This pattern was firstly introduced in the physical world (a famous paper quick start guide that you definitely have together with all your appliances) and not so long ago was introduced in digital forms (e.g. a software installation wizard)."}, {"9892": "Setup wizards have historically been used with traditional desktop software applications or new hardware installation. The pattern was popularized by Windows\u00a095."}, {"e633": "The pattern has following benefits:"}, {"6dee": "Simplifies task"}, {"b2e4": "By splitting up a complex task into a sequence of chunks, you can effectively simplify the task."}, {"bff5": "Divide and\u00a0conquer"}, {"472a": "As was previously mentioned, one common example of such task is a software installation. Before installation wizards were common, users had to copy files themselves, edit configuration files, set up control directories, and check to see if software was functioning. A setup wizard transformed this complex set of conditions into understandable steps. The payoff of using wizard was clear\u200a\u2014\u200areduced support and training costs."}, {"ae90": "Takes the burden of decision making off of the\u00a0user"}, {"385f": "The wizard is especially good when users lack the necessary domain knowledge. Completing a task gets easier: the user can just follow a preplanned, step-by-step path to accomplish his goal: \u201cDon\u2019t make me think, just tell me what to do next.\u201d"}, {"cad1": "When to Consider a\u00a0Wizard"}, {"e68b": "Wizards can help in following situations:"}, {"3a84": "Users want to accomplish a goal that has many\u00a0steps"}, {"c649": "You are designing an UI for a task that is long or complicated and it cannot be simplified. Using wizard it\u2019s possible to reduce the seeming complexity of a task and provide a sense of progress at the same time."}, {"7c01": "Users must complete steps in a specific\u00a0sequence"}, {"2291": "In this case, a wizard support users performing a task by lowering the learning curve. When users are forced to follow the order of tasks, users are less likely to miss important things and will hence make fewer errors."}, {"400b": "Facebook effectively uses a wizard to set up an application. Wizard makes sure all required steps are performed in the appropriate order."}, {"c1fc": "When a wizard may not\u00a0help"}, {"68e6": "Use this pattern very carefully. Breaking up a task into smaller steps does not always provide a better user experience:"}, {"e0f5": "When the task itself isn\u2019t\u00a0complex"}, {"294e": "The very need for a wizard indicates that a task may be too complicated. If you can simplify a task to the point where a short form or a few button clicks can do the trick instead, that\u2019s a better solution."}, {"1dcf": "When the audience is too\u00a0advanced"}, {"704e": "Even when dealing with complexity, wizards are not the slam-dunk answer for creating an optimal UI design solution. Power users often find wizards frustratingly rigid and limiting (since wizards don\u2019t show users what their actions really do, or what application state gets changed as choices are made). It\u2019s quite common when wizards try to \u201chelp\u201d with things users already know how to do. This is particularly true for software that supports creative processes such as art or coding."}, {"ce87": "Tip: Allows users to choose the way they want to complete the task."}, {"d934": "Dropbox installation interface allows some freedom for the\u00a0experts."}, {"8a7a": "When you want to\u00a0teach"}, {"a07d": "Don\u2019t use wizard to present a concept. The users don\u2019t read supplementary text when they are using a wizard. They are very focused on getting their work done."}, {"f57e": "Best Practices for\u00a0Wizards"}, {"c5c6": "When designing your next wizard, there are also several good things you can do to ensure its effectiveness:"}, {"5d7c": "Keep the number of steps at the\u00a0minimum"}, {"2bca": "The hard part of designing this kind of UI is striking a balance between the sizes of the chunks and the number of them. It\u2019s silly to have a 2-step wizard, and a 10-step wizard can seem overwhelming or tedious. Ideally, the process should have 3\u20135 steps. Putting your wizard through a usability test will help ensure the number of screens is acceptable."}, {"ba19": "Keep the wizard\u2019s purpose\u00a0clear"}, {"c6c6": "At each step, users need to understand clearly what the wizard is asking. A wizard should provide enough information for users to make decisions and act on them. If it isn\u2019t clear, users get stuck. There are two things that are essential to being clear about your wizard\u2019s purpose:"}, {"2686": "Don\u2019t: Homesite Home Insurance doesn\u2019t provide a purpose statement on the first screen. If users enter this page directly from a different site, they might have a difficult time understanding what this wizard will help them accomplish. Image credit:\u00a0ibm"}, {"2d1e": "Remove unnecessary interface elements"}, {"1ee0": "Additional links and content that user doesn\u2019t need when completing a task can distract the user. By removing them you help the user to focus on the task and improve the odds of completing it successfully."}, {"51ab": "Indicate clearly where the user is in the\u00a0process"}, {"8824": "You need to clearly mark the boundaries of the wizard, so users know when they have finished. To make wizard user-friendly you should embody several features:"}, {"b7d9": "Don\u2019t: Each step is an isolated UI space that shows no context\u200a\u2014\u200athe user can\u2019t see what went before or what comes\u00a0next."}, {"fe57": "Do: Clear number of steps is visible right next to the step title. Additionally, UI shows an overview of all the steps at the top of the pattern. Original image credit: Raj\u00a0Shrestha"}, {"d87d": "Choose good\u00a0defaults"}, {"8f7f": "Good defaults are useful no matter how you arrange the steps. But if the user is willing to turn over control of the process to you, odds are good they are also willing to let you pick reasonable defaults for choices they may not care much about, such as the location of a software installation."}, {"6145": "Provide \u2018Cancel\u2019\u00a0button"}, {"18f3": "Sometimes a user enters a wizard and, for various reasons, decides not to complete it. To avoid frustrating users who are looking for a way out, include a \u201cCancel\u201d button in the wizard interface."}, {"067a": "Allow Undo for each\u00a0step"}, {"6263": "Offer a way for the user to step backwards, or to otherwise change her mind about an earlier choice. Users benefit if they can re-run the step and modify their previously entered data. When they can\u2019t get back into the previous step to revise what they\u2019ve entered (even if it\u2019s a minor change), users often re-run the entire wizard."}, {"a363": "Don\u2019t disable or hide \u2018Back\u2019\u00a0button"}, {"6791": "Provide summary of\u00a0choices"}, {"11be": "It is good practice to present a summary of choices made throughout the wizard to the user near the end of the wizard. This will allow the user to review and double-check inputted data before the final \u201cFinish\u201d button is clicked."}, {"ebd7": "Conclusion"}, {"fee9": "While wizards should look easy to an outsider, designers and developers know the truth: it\u2019s really hard to design a good wizard. There\u2019s a lot of planning, trial and error design, and complicated development that goes into wizard creation. Hopefully, best practices listed above will help you begin to develop your wizard craft."}, {"30f6": "Thank you!"}, {"75da": "Follow UX Planet: Twitter | Facebook"}, {"b077": "Originally published at babich.biz"}], "content": "Wizard Design\u00a0Pattern by Nick\u00a0Babich Today I\u2019d like to talk about the topic of wizards, and I don\u2019t mean those guys with the hats and all the magical spells. I mean the step-by-step process that we use in apps or websites to guide someone through a process. Should you use a wizard? Isn\u2019t a wizard just a patch for a bad interface? In this article, you\u2019ll find answers to these questions. What is a\u00a0Wizard? A wizard presents a series of steps or conditions that the user needs to complete in order to accomplish a goal (e.g. use a product). This pattern was firstly introduced in the physical world (a famous paper quick start guide that you definitely have together with all your appliances) and not so long ago was introduced in digital forms (e.g. a software installation wizard). Setup wizards have historically been used with traditional desktop software applications or new hardware installation. The pattern was popularized by Windows\u00a095. The pattern has following benefits: Simplifies task By splitting up a complex task into a sequence of chunks, you can effectively simplify the task. Divide and\u00a0conquer As was previously mentioned, one common example of such task is a software installation. Before installation wizards were common, users had to copy files themselves, edit configuration files, set up control directories, and check to see if software was functioning. A setup wizard transformed this complex set of conditions into understandable steps. The payoff of using wizard was clear\u200a\u2014\u200areduced support and training costs. Takes the burden of decision making off of the\u00a0user The wizard is especially good when users lack the necessary domain knowledge. Completing a task gets easier: the user can just follow a preplanned, step-by-step path to accomplish his goal: \u201cDon\u2019t make me think, just tell me what to do next.\u201d When to Consider a\u00a0Wizard Wizards can help in following situations: Users want to accomplish a goal that has many\u00a0steps You are designing an UI for a task that is long or complicated and it cannot be simplified. Using wizard it\u2019s possible to reduce the seeming complexity of a task and provide a sense of progress at the same time. Users must complete steps in a specific\u00a0sequence In this case, a wizard support users performing a task by lowering the learning curve. When users are forced to follow the order of tasks, users are less likely to miss important things and will hence make fewer errors. Facebook effectively uses a wizard to set up an application. Wizard makes sure all required steps are performed in the appropriate order. When a wizard may not\u00a0help Use this pattern very carefully. Breaking up a task into smaller steps does not always provide a better user experience: When the task itself isn\u2019t\u00a0complex The very need for a wizard indicates that a task may be too complicated. If you can simplify a task to the point where a short form or a few button clicks can do the trick instead, that\u2019s a better solution. When the audience is too\u00a0advanced Even when dealing with complexity, wizards are not the slam-dunk answer for creating an optimal UI design solution. Power users often find wizards frustratingly rigid and limiting (since wizards don\u2019t show users what their actions really do, or what application state gets changed as choices are made). It\u2019s quite common when wizards try to \u201chelp\u201d with things users already know how to do. This is particularly true for software that supports creative processes such as art or coding. Tip: Allows users to choose the way they want to complete the task. Dropbox installation interface allows some freedom for the\u00a0experts. When you want to\u00a0teach Don\u2019t use wizard to present a concept. The users don\u2019t read supplementary text when they are using a wizard. They are very focused on getting their work done. Best Practices for\u00a0Wizards When designing your next wizard, there are also several good things you can do to ensure its effectiveness: Keep the number of steps at the\u00a0minimum The hard part of designing this kind of UI is striking a balance between the sizes of the chunks and the number of them. It\u2019s silly to have a 2-step wizard, and a 10-step wizard can seem overwhelming or tedious. Ideally, the process should have 3\u20135 steps. Putting your wizard through a usability test will help ensure the number of screens is acceptable. Keep the wizard\u2019s purpose\u00a0clear At each step, users need to understand clearly what the wizard is asking. A wizard should provide enough information for users to make decisions and act on them. If it isn\u2019t clear, users get stuck. There are two things that are essential to being clear about your wizard\u2019s purpose: Don\u2019t: Homesite Home Insurance doesn\u2019t provide a purpose statement on the first screen. If users enter this page directly from a different site, they might have a difficult time understanding what this wizard will help them accomplish. Image credit:\u00a0ibm Remove unnecessary interface elements Additional links and content that user doesn\u2019t need when completing a task can distract the user. By removing them you help the user to focus on the task and improve the odds of completing it successfully. Indicate clearly where the user is in the\u00a0process You need to clearly mark the boundaries of the wizard, so users know when they have finished. To make wizard user-friendly you should embody several features: Don\u2019t: Each step is an isolated UI space that shows no context\u200a\u2014\u200athe user can\u2019t see what went before or what comes\u00a0next. Do: Clear number of steps is visible right next to the step title. Additionally, UI shows an overview of all the steps at the top of the pattern. Original image credit: Raj\u00a0Shrestha Choose good\u00a0defaults Good defaults are useful no matter how you arrange the steps. But if the user is willing to turn over control of the process to you, odds are good they are also willing to let you pick reasonable defaults for choices they may not care much about, such as the location of a software installation. Provide \u2018Cancel\u2019\u00a0button Sometimes a user enters a wizard and, for various reasons, decides not to complete it. To avoid frustrating users who are looking for a way out, include a \u201cCancel\u201d button in the wizard interface. Allow Undo for each\u00a0step Offer a way for the user to step backwards, or to otherwise change her mind about an earlier choice. Users benefit if they can re-run the step and modify their previously entered data. When they can\u2019t get back into the previous step to revise what they\u2019ve entered (even if it\u2019s a minor change), users often re-run the entire wizard. Don\u2019t disable or hide \u2018Back\u2019\u00a0button Provide summary of\u00a0choices It is good practice to present a summary of choices made throughout the wizard to the user near the end of the wizard. This will allow the user to review and double-check inputted data before the final \u201cFinish\u201d button is clicked. Conclusion While wizards should look easy to an outsider, designers and developers know the truth: it\u2019s really hard to design a good wizard. There\u2019s a lot of planning, trial and error design, and complicated development that goes into wizard creation. Hopefully, best practices listed above will help you begin to develop your wizard craft. Thank you! Follow UX Planet: Twitter | Facebook Originally published at babich.biz ", "child": "828_1\t828_2\t828_3\t828_4\t828_5\t828_6\t828_7\t828_8828_1\t828_2\t828_3\t828_4\t828_5\t828_6\t828_7\t828_8"}