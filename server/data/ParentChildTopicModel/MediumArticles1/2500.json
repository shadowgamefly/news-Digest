{"name": "2500", "parent": "", "title": "Going from \u201cWhat is Blockchain?\u201d to building a blockchain, in less than an\u00a0hour", "sentences": [{"ae43": "Going from \u201cWhat is Blockchain?\u201d to building a blockchain, in less than an\u00a0hour"}, {"1c91": "A blockchain is a digital ledger of records that\u2019s arranged in chunks of data called blocks. These blocks then link with one another through a cryptographic validation known as a hashing function. Linked together, these blocks form an unbroken chain\u200a\u2014\u200aa blockchain."}, {"565f": "The reason that this type of data structure is useful for things like cryptocurrencies is decentralization, meaning the records inside this chain aren\u2019t stored in any single location, are accessible by everyone, and are immutable by any one party."}, {"3e7f": "Centralized Structure Vs. Decentralized Structure, Source: SoftwareAdvice"}, {"8ef6": "Applications"}, {"50d6": "Although blockchain is most commonly associated with Bitcoin, there are many uses for this technology. There are several broad categories of blockchain applications, a couple of which include:"}, {"9d46": "Currency and Digital\u00a0Assets"}, {"9fe2": "The Blockchain that makes up Bitcoin sends money globally to individuals and merchants. But Blockchains can also create digital assets like stocks and bonds."}, {"88dc": "Verifiable Data and Contracts"}, {"0d2e": "A Blockchain can create a verifiable record of any data, file, or contract. This can be useful in any industry that uses big data, like the medical industry or government."}, {"5ac2": "Understanding the\u00a0Code"}, {"a536": "Before you begin, I should note that this article assumes you have a basic understanding of programming and some understanding of computer science theory."}, {"f332": "This article isn\u2019t meant to be all-encompassing, but rather to serve as an introduction to blockchain programming for those looking to expand their technical knowledge."}, {"ec53": "I believe that the best way to truly understand a concept is to put it into practice. If you are interested in learning how to implement a blockchain contract, I\u2019ve put together an easy-to-follow, step-by-step tutorial below."}, {"6c62": "You will be using Ethereum to make a smart contract. Ethereum is a blockchain with a built in Turing-complete programming language, meaning that it can run applications modeling any computable problem (as long as runtime and memory allows). Be sure to familiarize yourself with the following Ethereum terms before you begin:"}, {"52f0": "Accounts are the basic unit or object in Ethereum. The blockchain tracks the state of every account. There are two types of accounts: Externally Owned Accounts (EOA), which are controlled by human users, and Contract Accounts, which are controlled by their internal contract code and can be activated by an Externally Owned Account."}, {"b0a2": "A \u201cSmart Contract\u201d or \u201cDecentralized Application (DApp)\u201d is determined by code in a Contract Account which will be activated when an EOA sends a transaction to the Contract Account. The Contract Accounts are triggered by an external EOA to produce an answer that can be agreed upon by all nodes that see it."}, {"1a66": "Each account contains at most four fields:"}, {"734e": "A transaction is a signed data packet which stores messages sent from account to account. It contains the following data fields:"}, {"9a9e": "Ether is Ethereum\u2019s cryptocurrency (ETH/USD = ~$50, as of today) which is exchanged as a fee whenever an action runs in Ethereum."}, {"4703": "Source: EtherScan"}, {"7dca": "In order to reduce risk of malicious transactions, like Distributed Denial of Service (DDoS) attacks, Ethereum charges a fee for every transaction done through it."}, {"dc55": "So who\u2019s collecting these fees? There are nodes called miners which collect the fees in order to verify and execute all transactions. The miners group the transactions into blocks which can then be added to the blockchain."}, {"ad38": "Now that you\u2019ve got a basic understanding of how Etherium works, it\u2019s time to get started."}, {"1330": "Note that I used Ubuntu Linux, but this will also work on other Linux distributions, as well as on MacOS (with Homebrew) and Windows 10 (using your terminal and the latest stable binary). A full list of command line tools and installation techniques can be found here."}, {"5659": "Making a Blockchain"}, {"eaa2": "Installing geth"}, {"2b60": "First you need to install Ethereum from PPA. In your terminal, run the following:"}, {"a488": "sudo apt-get install -y software-properties-commonsudo add-apt-repository -y ppa:ethereum/ethereumsudo apt-get updatesudo apt-get install -y ethereum"}, {"2acc": "Now you can make a genesis block by creating a new directory and writing to a json file:"}, {"9fd6": "cdmkdir eth-newcd eth-newnano genesis.json"}, {"ff4d": "Next, paste the following code into the json file to make the genesis block:"}, {"6c35": "{    \"nonce\": \"0x0000000000000042\",    \"mixhash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",    \"difficulty\": \"0x4000\",    \"alloc\": {},    \"coinbase\": \"0x0000000000000000000000000000000000000000\",    \"timestamp\": \"0x00\",    \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",    \"extraData\": \"Custem Ethereum Genesis Block\",    \"gasLimit\": \"0xffffffff\"}"}, {"f38a": "Save this new genesis block file by hitting Ctrl+X, Y, Enter."}, {"6436": "Creating a Blockchain"}, {"7acf": "Now, execute the following commands to create the blockchain:"}, {"36f1": "mkdir eth-datageth --genesis genesis.json --datadir eth-data --networkid 123 --nodiscover --maxpeers 0 console"}, {"9ba7": "In the geth console, type the following to make a new account and create a new password by typing in whatever you want. You will have to type your new password twice."}, {"833a": "personal.newAccount()"}, {"2a23": "The output after this should be a string of letters and numbers\u200a\u2014\u200aan address of your account."}, {"adcc": "Save this address somewhere and exit by typing \u201cexit\u201d and hitting Enter."}, {"aa60": "Sending Ether to Your\u00a0Account"}, {"a6d4": "You need to reopen the genesis block file. Type the following:"}, {"f75a": "nano genesis.json"}, {"c68b": "In the \u201calloc\u201d brackets, paste your account address you saved earlier. You should go ahead and give yourself an Ether balance as well. The amount shown next to \u201cbalance\u201d below is equal to 10 Ether."}, {"1df7": "{    \"nonce\": \"0x0000000000000042\",    \"mixhash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",    \"difficulty\": \"0x4000\",    \"alloc\": {    \"0x09c7b615a1c5b3016ff6b521723364aa9382ec6e\": {        \"balance\": \"10000000000000000000\"   \t\t}   \t},    \"coinbase\": \"0x0000000000000000000000000000000000000000\",    \"timestamp\": \"0x00\",    \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",    \"extraData\": \"Custem Ethereum Genesis Block\",    \"gasLimit\": \"0xffffffff\"}"}, {"c7f8": "Once you are done updating it, save the file with Ctrl+X, Y, Enter."}, {"45d5": "Deleting Your Old Blockchain and Creating a New\u00a0One"}, {"73f0": "Execute these commands to clear out the old blockchain data and restart geth:"}, {"f6be": "cd eth-datarm -rf chaindata dapp history nodekeycd ..geth --genesis genesis.json --datadir eth-data --networkid 123 --nodiscover --maxpeers 0 console"}, {"50a9": "In the geth console, type these commands:"}, {"9ea8": "> primary = eth.accounts[0]> web3.fromWei(eth.getBalance(primary), \"ether\")"}, {"9f72": "Your address will appear, as well as your balance of 10 Ether."}, {"743c": "Starting Mining"}, {"a7a3": "In order to have a working blockchain, you need to create miners. To do this, exit the geth console by typing \u201cexit\u201d and hitting Enter."}, {"6b25": "To start mining, execute this command:"}, {"5c32": "geth --mine --datadir eth-data --networkid 123 --nodiscover --> maxpeers 0 console 2>>geth.log"}, {"2e87": "Geth will now start. You\u2019ve created a miner which, as I mentioned earlier, collects ether fees. Type the below command to check your balance now:"}, {"5c3c": "> primary = eth.accounts[0]> balance = web3.fromWei(eth.getBalance(primary), \"ether\") "}, {"f87e": "You should now have more Ether than you had before."}, {"3e08": "Installing Solc"}, {"4024": "The Ethereum contract you are working with will be written in Solidity. You have to install the Solc compiler in order to use Solidity. To do this, open a new terminal and type the following:"}, {"0549": "bashsudo add-apt-repository ppa:ethereum/ethereum"}, {"e8dd": "A message appears saying \u201cPress ENTER to continue.\u201d Press Enter and then type the following:"}, {"5c08": "sudo apt-get updatesudo apt-get install solc -ywhich solc"}, {"ccd7": "This will output a path to Solc, which you will need to remember. Return to the Terminal window showing the geth console. Execute these commands, changing <path> to the path that was returned to you:"}, {"7a24": "admin.setSolc(\"<path>\")eth.getCompilers()"}, {"2a48": "The response to the second command is [\u201cSolidity\u201d] which tells us that you now have Solc and can use Solidity."}, {"73c7": "Understanding the Greeter\u00a0Contract"}, {"3242": "Below is the code for a simple contract with added comments, taken and modified from Sams Class. It contains two types of contracts. The first, a mortal contract, specifies a contract that can be killed by the person who wrote it and it needs to be declared as such, as contracts are immortal by default. The second is a greeter contract which will print out a little greeting."}, {"fbc2": "contract mortal {    /* Define var owner of the type address*/    address owner;"}, {"4af6": "    /* this function sets the owner of the contract */    function mortal() { owner = msg.sender; }"}, {"758a": "    /* Function to recover fees */    function kill() { if (msg.sender == owner) selfdestruct(owner); }}"}, {"4970": "contract greeter is mortal {    /* define variable greeting type*/    string greeting;"}, {"98df": "    /* this runs when the contract is executed */    function greeter(string _greeting) public {        greeting = _greeting;    }"}, {"5808": "    /* main*/    function greet() constant returns (string) {        return greeting;    }}"}, {"f02d": "Unlocking your\u00a0Account"}, {"ae9a": "Starting a contract takes Ether fees, so you will need to unlock your account. You can do this by typing the following:"}, {"e372": "primary = eth.accounts[0]personal.unlockAccount(primary)"}, {"d574": "and entering your password. Once you see an output of \u201ctrue\u201d you will know that you have successfully unlocked your account."}, {"cd2c": "Compiling your\u00a0Contract"}, {"f361": "In the geth console, copy and paste the whole source code of your contract from earlier in one line without the comments:"}, {"2f1a": "var greeterSource = 'contract mortal { address owner; function mortal() { owner = msg.sender; } function kill() { if (msg.sender == owner) suicide(owner); } } contract greeter is mortal { string greeting; function greeter(string _greeting) public { greeting = _greeting; } function greet() constant returns (string) { return greeting; } }'"}, {"a87c": "This will return \u201cundefined.\u201d"}, {"b451": "In the geth console, type the following:"}, {"c696": "> var greeterCompiled = web3.eth.compile.solidity(greeterSource)"}, {"563f": "The reply is \u201cundefined\u201d again, as shown below."}, {"b889": "Preparing your Contract for Deployment"}, {"e132": "Now that you have your mortal contract and your greeter contract, you will need to define the greeting and instantiate your account objects. This will require some more Ether."}, {"c95e": "In the geth console, paste in these commands:"}, {"0232": "var _greeting = \"Hello World!\"var greeterContract = web3.eth.contract(greeterCompiled.greeter.info.abiDefinition);"}, {"3d2b": "var greeter = greeterContract.new(_greeting, {from: eth.accounts[0], data: greeterCompiled.greeter.code, gas: 1000000}, function(e, contract){  if(!e) {"}, {"2ddf": "    if(!contract.address) {      console.log(\"Contract transaction send: TransactionHash: \" + contract.transactionHash + \" waiting to be mined...\");"}, {"970a": "    } else {      console.log(\"Contract mined! Address: \" + contract.address);      console.log(contract);    }"}, {"5e48": "  }})"}, {"fe54": "A \u201cContract transaction send\u201d message appears, and after a few seconds, you will see a message saying \u201cContract mined!\u201d"}, {"a759": "Testing the\u00a0Contract"}, {"ecb4": "The following commands will return first a long address and then your greeting."}, {"7879": "eth.getCode(greeter.address)greeter.greet()"}, {"d467": "So there you have it, you\u2019ve created your first baby Blockchain program. Good work!"}, {"d86c": "Other Resources"}, {"883d": "For more helpful information on this subject, try the below:"}, {"be60": "Sources"}], "content": "Going from \u201cWhat is Blockchain?\u201d to building a blockchain, in less than an\u00a0hour A blockchain is a digital ledger of records that\u2019s arranged in chunks of data called blocks. These blocks then link with one another through a cryptographic validation known as a hashing function. Linked together, these blocks form an unbroken chain\u200a\u2014\u200aa blockchain. The reason that this type of data structure is useful for things like cryptocurrencies is decentralization, meaning the records inside this chain aren\u2019t stored in any single location, are accessible by everyone, and are immutable by any one party. Centralized Structure Vs. Decentralized Structure, Source: SoftwareAdvice Applications Although blockchain is most commonly associated with Bitcoin, there are many uses for this technology. There are several broad categories of blockchain applications, a couple of which include: Currency and Digital\u00a0Assets The Blockchain that makes up Bitcoin sends money globally to individuals and merchants. But Blockchains can also create digital assets like stocks and bonds. Verifiable Data and Contracts A Blockchain can create a verifiable record of any data, file, or contract. This can be useful in any industry that uses big data, like the medical industry or government. Understanding the\u00a0Code Before you begin, I should note that this article assumes you have a basic understanding of programming and some understanding of computer science theory. This article isn\u2019t meant to be all-encompassing, but rather to serve as an introduction to blockchain programming for those looking to expand their technical knowledge. I believe that the best way to truly understand a concept is to put it into practice. If you are interested in learning how to implement a blockchain contract, I\u2019ve put together an easy-to-follow, step-by-step tutorial below. You will be using Ethereum to make a smart contract. Ethereum is a blockchain with a built in Turing-complete programming language, meaning that it can run applications modeling any computable problem (as long as runtime and memory allows). Be sure to familiarize yourself with the following Ethereum terms before you begin: Accounts are the basic unit or object in Ethereum. The blockchain tracks the state of every account. There are two types of accounts: Externally Owned Accounts (EOA), which are controlled by human users, and Contract Accounts, which are controlled by their internal contract code and can be activated by an Externally Owned Account. A \u201cSmart Contract\u201d or \u201cDecentralized Application (DApp)\u201d is determined by code in a Contract Account which will be activated when an EOA sends a transaction to the Contract Account. The Contract Accounts are triggered by an external EOA to produce an answer that can be agreed upon by all nodes that see it. Each account contains at most four fields: A transaction is a signed data packet which stores messages sent from account to account. It contains the following data fields: Ether is Ethereum\u2019s cryptocurrency (ETH/USD = ~$50, as of today) which is exchanged as a fee whenever an action runs in Ethereum. Source: EtherScan In order to reduce risk of malicious transactions, like Distributed Denial of Service (DDoS) attacks, Ethereum charges a fee for every transaction done through it. So who\u2019s collecting these fees? There are nodes called miners which collect the fees in order to verify and execute all transactions. The miners group the transactions into blocks which can then be added to the blockchain. Now that you\u2019ve got a basic understanding of how Etherium works, it\u2019s time to get started. Note that I used Ubuntu Linux, but this will also work on other Linux distributions, as well as on MacOS (with Homebrew) and Windows 10 (using your terminal and the latest stable binary). A full list of command line tools and installation techniques can be found here. Making a Blockchain Installing geth First you need to install Ethereum from PPA. In your terminal, run the following: sudo apt-get install -y software-properties-commonsudo add-apt-repository -y ppa:ethereum/ethereumsudo apt-get updatesudo apt-get install -y ethereum Now you can make a genesis block by creating a new directory and writing to a json file: cdmkdir eth-newcd eth-newnano genesis.json Next, paste the following code into the json file to make the genesis block: {    \"nonce\": \"0x0000000000000042\",    \"mixhash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",    \"difficulty\": \"0x4000\",    \"alloc\": {},    \"coinbase\": \"0x0000000000000000000000000000000000000000\",    \"timestamp\": \"0x00\",    \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",    \"extraData\": \"Custem Ethereum Genesis Block\",    \"gasLimit\": \"0xffffffff\"} Save this new genesis block file by hitting Ctrl+X, Y, Enter. Creating a Blockchain Now, execute the following commands to create the blockchain: mkdir eth-datageth --genesis genesis.json --datadir eth-data --networkid 123 --nodiscover --maxpeers 0 console In the geth console, type the following to make a new account and create a new password by typing in whatever you want. You will have to type your new password twice. personal.newAccount() The output after this should be a string of letters and numbers\u200a\u2014\u200aan address of your account. Save this address somewhere and exit by typing \u201cexit\u201d and hitting Enter. Sending Ether to Your\u00a0Account You need to reopen the genesis block file. Type the following: nano genesis.json In the \u201calloc\u201d brackets, paste your account address you saved earlier. You should go ahead and give yourself an Ether balance as well. The amount shown next to \u201cbalance\u201d below is equal to 10 Ether. {    \"nonce\": \"0x0000000000000042\",    \"mixhash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",    \"difficulty\": \"0x4000\",    \"alloc\": {    \"0x09c7b615a1c5b3016ff6b521723364aa9382ec6e\": {        \"balance\": \"10000000000000000000\"   \t\t}   \t},    \"coinbase\": \"0x0000000000000000000000000000000000000000\",    \"timestamp\": \"0x00\",    \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",    \"extraData\": \"Custem Ethereum Genesis Block\",    \"gasLimit\": \"0xffffffff\"} Once you are done updating it, save the file with Ctrl+X, Y, Enter. Deleting Your Old Blockchain and Creating a New\u00a0One Execute these commands to clear out the old blockchain data and restart geth: cd eth-datarm -rf chaindata dapp history nodekeycd ..geth --genesis genesis.json --datadir eth-data --networkid 123 --nodiscover --maxpeers 0 console In the geth console, type these commands: > primary = eth.accounts[0]> web3.fromWei(eth.getBalance(primary), \"ether\") Your address will appear, as well as your balance of 10 Ether. Starting Mining In order to have a working blockchain, you need to create miners. To do this, exit the geth console by typing \u201cexit\u201d and hitting Enter. To start mining, execute this command: geth --mine --datadir eth-data --networkid 123 --nodiscover --> maxpeers 0 console 2>>geth.log Geth will now start. You\u2019ve created a miner which, as I mentioned earlier, collects ether fees. Type the below command to check your balance now: > primary = eth.accounts[0]> balance = web3.fromWei(eth.getBalance(primary), \"ether\")  You should now have more Ether than you had before. Installing Solc The Ethereum contract you are working with will be written in Solidity. You have to install the Solc compiler in order to use Solidity. To do this, open a new terminal and type the following: bashsudo add-apt-repository ppa:ethereum/ethereum A message appears saying \u201cPress ENTER to continue.\u201d Press Enter and then type the following: sudo apt-get updatesudo apt-get install solc -ywhich solc This will output a path to Solc, which you will need to remember. Return to the Terminal window showing the geth console. Execute these commands, changing <path> to the path that was returned to you: admin.setSolc(\"<path>\")eth.getCompilers() The response to the second command is [\u201cSolidity\u201d] which tells us that you now have Solc and can use Solidity. Understanding the Greeter\u00a0Contract Below is the code for a simple contract with added comments, taken and modified from Sams Class. It contains two types of contracts. The first, a mortal contract, specifies a contract that can be killed by the person who wrote it and it needs to be declared as such, as contracts are immortal by default. The second is a greeter contract which will print out a little greeting. contract mortal {    /* Define var owner of the type address*/    address owner;     /* this function sets the owner of the contract */    function mortal() { owner = msg.sender; }     /* Function to recover fees */    function kill() { if (msg.sender == owner) selfdestruct(owner); }} contract greeter is mortal {    /* define variable greeting type*/    string greeting;     /* this runs when the contract is executed */    function greeter(string _greeting) public {        greeting = _greeting;    }     /* main*/    function greet() constant returns (string) {        return greeting;    }} Unlocking your\u00a0Account Starting a contract takes Ether fees, so you will need to unlock your account. You can do this by typing the following: primary = eth.accounts[0]personal.unlockAccount(primary) and entering your password. Once you see an output of \u201ctrue\u201d you will know that you have successfully unlocked your account. Compiling your\u00a0Contract In the geth console, copy and paste the whole source code of your contract from earlier in one line without the comments: var greeterSource = 'contract mortal { address owner; function mortal() { owner = msg.sender; } function kill() { if (msg.sender == owner) suicide(owner); } } contract greeter is mortal { string greeting; function greeter(string _greeting) public { greeting = _greeting; } function greet() constant returns (string) { return greeting; } }' This will return \u201cundefined.\u201d In the geth console, type the following: > var greeterCompiled = web3.eth.compile.solidity(greeterSource) The reply is \u201cundefined\u201d again, as shown below. Preparing your Contract for Deployment Now that you have your mortal contract and your greeter contract, you will need to define the greeting and instantiate your account objects. This will require some more Ether. In the geth console, paste in these commands: var _greeting = \"Hello World!\"var greeterContract = web3.eth.contract(greeterCompiled.greeter.info.abiDefinition); var greeter = greeterContract.new(_greeting, {from: eth.accounts[0], data: greeterCompiled.greeter.code, gas: 1000000}, function(e, contract){  if(!e) {     if(!contract.address) {      console.log(\"Contract transaction send: TransactionHash: \" + contract.transactionHash + \" waiting to be mined...\");     } else {      console.log(\"Contract mined! Address: \" + contract.address);      console.log(contract);    }   }}) A \u201cContract transaction send\u201d message appears, and after a few seconds, you will see a message saying \u201cContract mined!\u201d Testing the\u00a0Contract The following commands will return first a long address and then your greeting. eth.getCode(greeter.address)greeter.greet() So there you have it, you\u2019ve created your first baby Blockchain program. Good work! Other Resources For more helpful information on this subject, try the below: Sources ", "child": "2500_1\t2500_2\t2500_3\t2500_4"}