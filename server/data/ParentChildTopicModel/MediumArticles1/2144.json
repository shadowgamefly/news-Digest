{"name": "2144", "parent": "", "title": "Which Splash-screen approach is\u00a0better?", "sentences": [{"d743": "Which Splash-screen approach is\u00a0better?"}, {"6753": "If you are considering implementing splash-screen for your App, you would come across several approaches on the internet. The top two that I think look best are"}, {"618d": "Both are great because"}, {"2bdd": "But, which one is better? Before get into that, a quick overview of each one"}, {"5bea": "1. Without Splash\u00a0Activity"}, {"93fa": "This is the seemingly advocated by Ian Lake in https://plus.google.com/+AndroidDevelopers/posts/Z1Wwainpjhd."}, {"f4d5": "Just set the SplashTheme for your MainActivity, and during onCreate(), then change your MainActivity theme to the default theme using setTheme(\u2026)."}, {"5e43": "The reason of changing the Theme is because when we get back to this MainActivity, we don\u2019t want it to splash again."}, {"ccb2": "All set!"}, {"7dbd": "2. With Splash\u00a0Activity"}, {"ce99": "This, we would need an additional SplashActivity, that has the SplashTheme. While your MainActivity has the default theme."}, {"23de": "Upon launch, the SplashActivity would then start the MainActivity during onCreate() and then terminate itself using finish()."}, {"c578": "The reason it terminate itself is because from the MainActivity, when the user click back, the Splash shouldn\u2019t be shown again."}, {"e09a": "So which is\u00a0better?"}, {"3add": "A quick thought, approach 1 above are better than approach 2. It\u2019s simply because no one wanted an activity itself just for SplashScreen. What a waste of making one."}, {"51c8": "But\u00a0\u2026 I pick approach 2 as the better one. Let me explain below:-"}, {"429c": "In normal circumstances, when the Activity is stored in memory and not destroyed by the system, approach 1 is definitely superior."}, {"2c24": "However, in Android\u2019s world, under limited resources condition, the Activity might be terminated, and things need to get restart all over again. This is the frequent pit-fall that we should always watch out."}, {"9552": "To check out, we could turn on Don\u2019t Keep Activity in the Developer Setting. This ensures that every time we get to background, or transition to another activity, the current activity will be terminated by the system."}, {"45ec": "When this happens, approach 1 will always shows the splash screen upon reentering the MainActivity. Approach 2 will not have this problem."}, {"28f2": "Demonstration"}, {"00e8": "I have made a simple app that has a MainActivity that can transition to ActivityTwo for both the scenario."}, {"1482": "Under Don\u2019t-Keep-Activity ON setting, I launch the App (to show the Splash Screen\u200a\u2014\u200aa blue color patch). transition from MainActivity to ActivityTwo, then back to MainActivity, before exit the App."}, {"6315": "Below are the GIFs of the result."}, {"12c8": "Approach 1: Splash Screen without SplashActivity"}, {"c31e": "Approach 2: Splash Screen with SplashActivity"}, {"55e7": "From here you could see that, approach 1, the Splash Screen reappear when we get back from ActivityTwo to MainActivity, which is undesirable in most time. Splash Screen are meant to only got display once when the App starts, and not in between."}, {"50ae": "Approach 2 doesn\u2019t have the problem at all, as we have terminated the SplashActivity."}, {"c99d": "Can\u2019t we use SavedInstanceState to\u00a0help?"}, {"eb22": "Sorry, in this case SavedInstanceState can\u2019t help. The splash screen image is set to the MainActivity even before onCreate() is called. So you have no access to SavedInstanceState to help control what background image you would like to set to your activity when the Activity is restored from it\u2019s state."}, {"ba5a": "IN short: Approach 2 is indeed a better SplashScreen solution than Ian Lake\u2019s recommendation, highest voted StackOverflow solution."}, {"d361": "As usual, in most case there\u2019s exception."}, {"bbcb": "The exception here is, if you only have one activity, Approach 1 would be better. You don\u2019t have another activity to come back from. Although on background the App, the user might see the SplashScreen again, I think it is is not too bad, as to the user, they understand they did exit the App and re-entering it."}, {"2468": "Elye Project (@elye_project) | TwitterThe latest Tweets from Elye Project (@elye_project): \"I just published \"RecyclerView supported wrap_content? Not quite\u2026twitter.com"}], "content": "Which Splash-screen approach is\u00a0better? If you are considering implementing splash-screen for your App, you would come across several approaches on the internet. The top two that I think look best are Both are great because But, which one is better? Before get into that, a quick overview of each one 1. Without Splash\u00a0Activity This is the seemingly advocated by Ian Lake in https://plus.google.com/+AndroidDevelopers/posts/Z1Wwainpjhd. Just set the SplashTheme for your MainActivity, and during onCreate(), then change your MainActivity theme to the default theme using setTheme(\u2026). The reason of changing the Theme is because when we get back to this MainActivity, we don\u2019t want it to splash again. All set! 2. With Splash\u00a0Activity This, we would need an additional SplashActivity, that has the SplashTheme. While your MainActivity has the default theme. Upon launch, the SplashActivity would then start the MainActivity during onCreate() and then terminate itself using finish(). The reason it terminate itself is because from the MainActivity, when the user click back, the Splash shouldn\u2019t be shown again. So which is\u00a0better? A quick thought, approach 1 above are better than approach 2. It\u2019s simply because no one wanted an activity itself just for SplashScreen. What a waste of making one. But\u00a0\u2026 I pick approach 2 as the better one. Let me explain below:- In normal circumstances, when the Activity is stored in memory and not destroyed by the system, approach 1 is definitely superior. However, in Android\u2019s world, under limited resources condition, the Activity might be terminated, and things need to get restart all over again. This is the frequent pit-fall that we should always watch out. To check out, we could turn on Don\u2019t Keep Activity in the Developer Setting. This ensures that every time we get to background, or transition to another activity, the current activity will be terminated by the system. When this happens, approach 1 will always shows the splash screen upon reentering the MainActivity. Approach 2 will not have this problem. Demonstration I have made a simple app that has a MainActivity that can transition to ActivityTwo for both the scenario. Under Don\u2019t-Keep-Activity ON setting, I launch the App (to show the Splash Screen\u200a\u2014\u200aa blue color patch). transition from MainActivity to ActivityTwo, then back to MainActivity, before exit the App. Below are the GIFs of the result. Approach 1: Splash Screen without SplashActivity Approach 2: Splash Screen with SplashActivity From here you could see that, approach 1, the Splash Screen reappear when we get back from ActivityTwo to MainActivity, which is undesirable in most time. Splash Screen are meant to only got display once when the App starts, and not in between. Approach 2 doesn\u2019t have the problem at all, as we have terminated the SplashActivity. Can\u2019t we use SavedInstanceState to\u00a0help? Sorry, in this case SavedInstanceState can\u2019t help. The splash screen image is set to the MainActivity even before onCreate() is called. So you have no access to SavedInstanceState to help control what background image you would like to set to your activity when the Activity is restored from it\u2019s state. IN short: Approach 2 is indeed a better SplashScreen solution than Ian Lake\u2019s recommendation, highest voted StackOverflow solution. As usual, in most case there\u2019s exception. The exception here is, if you only have one activity, Approach 1 would be better. You don\u2019t have another activity to come back from. Although on background the App, the user might see the SplashScreen again, I think it is is not too bad, as to the user, they understand they did exit the App and re-entering it. Elye Project (@elye_project) | TwitterThe latest Tweets from Elye Project (@elye_project): \"I just published \"RecyclerView supported wrap_content? Not quite\u2026twitter.com ", "child": "2144_12144_1"}