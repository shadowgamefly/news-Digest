{"name": "2136", "parent": "", "title": "How to make a custom\u00a0view", "sentences": [{"134a": "How to make a custom\u00a0view"}, {"5dc6": "Android provides you with a bunch of common views and ways to modify them. Sometimes you need to set a few of the same properties on the same types of views throughout your app. In that case you could make a layout and use the include tag to include it in every layout you need it in. So you can re-use it wherever you need it."}, {"4f7c": "That may be fine, but what if you want to change a property on that view in one place it\u2019s included? For example, you want to change the text colour of a TextView inside that layout. Since it\u2019s in the included layout, you can either change it for every place it\u2019s used or you have to do it programmatically. You can\u2019t set it through the include tag."}, {"b984": "To solve this problem, you can create a custom view by extending one of the existing views."}, {"d368": "Example"}, {"0edf": "To demonstrate this, I created an example custom view. It extends from LinearLayout and has two TextViews inside of it."}, {"37ad": "I could have added the TextViews programmatically, but I prefer to have a layout inflated instead. You can see the layout below:"}, {"5ac9": "I use the merge tag so the layout can be inflated directly into my view, which is a LinearLayout."}, {"9ba2": "In my CustomView layout I have TextViews for a title and subtitle. I want to be able to set these in any layout where they are included, so I have to add custom attributes in my attrs.xml file."}, {"6648": "Now to actually use this view, I created an example activity which adds my view to its layout."}, {"2386": "The result looks looks like this:"}, {"bb06": "I had included checks to make sure the title and subtitle were included, throwing an exception otherwise. If they aren\u2019t included, the renderer will not display the views and shows the appropriate exception. For example, if I forgot to set the subtitle I will see this exception:"}, {"ebfb": "The standard views provided by Android are usually enough to solve most problems. But, if they are lacking or you find you\u2019re often duplicating layouts, consider making a custom view. It may save you some time."}, {"60b7": "If You Enjoyed Reading, Please Click That Little Heart. If You Want To Read More Like This, Follow Me On Medium.\u00a0Thanks!"}, {"7b98": "Originally published at piercezaifman.com on April 15, 2017."}], "content": "How to make a custom\u00a0view Android provides you with a bunch of common views and ways to modify them. Sometimes you need to set a few of the same properties on the same types of views throughout your app. In that case you could make a layout and use the include tag to include it in every layout you need it in. So you can re-use it wherever you need it. That may be fine, but what if you want to change a property on that view in one place it\u2019s included? For example, you want to change the text colour of a TextView inside that layout. Since it\u2019s in the included layout, you can either change it for every place it\u2019s used or you have to do it programmatically. You can\u2019t set it through the include tag. To solve this problem, you can create a custom view by extending one of the existing views. Example To demonstrate this, I created an example custom view. It extends from LinearLayout and has two TextViews inside of it. I could have added the TextViews programmatically, but I prefer to have a layout inflated instead. You can see the layout below: I use the merge tag so the layout can be inflated directly into my view, which is a LinearLayout. In my CustomView layout I have TextViews for a title and subtitle. I want to be able to set these in any layout where they are included, so I have to add custom attributes in my attrs.xml file. Now to actually use this view, I created an example activity which adds my view to its layout. The result looks looks like this: I had included checks to make sure the title and subtitle were included, throwing an exception otherwise. If they aren\u2019t included, the renderer will not display the views and shows the appropriate exception. For example, if I forgot to set the subtitle I will see this exception: The standard views provided by Android are usually enough to solve most problems. But, if they are lacking or you find you\u2019re often duplicating layouts, consider making a custom view. It may save you some time. If You Enjoyed Reading, Please Click That Little Heart. If You Want To Read More Like This, Follow Me On Medium.\u00a0Thanks! Originally published at piercezaifman.com on April 15, 2017. ", "child": "2136_12136_1"}