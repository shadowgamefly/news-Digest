{"name": "1491", "parent": "", "title": "Migrate from ExNavigation to React Navigation", "sentences": [{"6e96": "Migrate from ExNavigation to React Navigation"}, {"b142": "I\u2019ve been using ExNavigation for quite a while. It\u2019s simple to setup and has consistently worked for me. If you\u2019ve checked out the the README in the last few months you may have noticed that it\u2019s in maintenance mode\u200a\u2014\u200ameaning it\u2019s not being updated (unless necessary) because all future resources are going to React Navigation. Also, in the last React Native release you may have noticed a warning popping up that NavigationExperimental is being deprecated (which ExNavigation is built on) so now is a good time to start the migration."}, {"3b65": "So what is React Navigation? It\u2019s a routing solution that builds on the knowledge and experience gained from a host of other navigation solutions for React Native. I won\u2019t go into detail on it here but if you\u2019re interested I\u2019ve got a getting started guide for React Navigation."}, {"b1db": "Today I want to walk you through the process of migrating from ExNavigation to React Navigation. So far I\u2019ve found it to be a simple process and has simplified my code a fair amount."}, {"5631": "Full source code is available on Github. In the readme I\u2019ve got links to diffs for each step. If you want a step-by-step walkthrough on how to migrate watch the videos, otherwise I\u2019ll link to the source code and give a brief description of what I\u2019m doing."}, {"3e47": "Alerts"}, {"7300": "Though the usage of this.props.navigator.showLocalAlert might not be used often/by many it\u2019s something that I used often and found will quickly break when doing this migration so it\u2019s the first thing I\u2019m replacing."}, {"8888": "To do this I\u2019m using the react-native-dropdownalert package and then making a higher order component to make the dropdown methods available anywhere I need to in my app (original issue with code)."}, {"b37f": "I won\u2019t go into the details of creating the HOC\u200a\u2014\u200athat can just be copied and pasted into your app if you want to go that route, just pay attention to the Alert component, install hoist-non-react-static, and react-native-dropdownalert into your project if you do copy it."}, {"c8c0": "With that done I then wrap my app with the AlertProvider and connect any components where I would want to invoke and alert from."}, {"d71b": "Diff of Changes"}, {"23b6": "StackNavigation to StackNavigator"}, {"4e94": "In ExNavigation the StackNavigation component was at the core of much of your application. In React Navigation you\u2019ll be using the StackNavigator for this purpose."}, {"802f": "Updating is pretty straightforward. First you need to create the appropriate StackNavigators for your app and then use those new StackNavigators wherever you were using the StackNavigation component before. If you stopped at only swapping out the StackNavigation for StackNavigator you\u2019ll lose some functionality that\u2019s built into ExNavigation but if you do it all at once, which I imagine you will, you won\u2019t have issues."}, {"7b8e": "On all of your screens you\u2019ll need to replace the"}, {"a5c2": "static route = {  navigationBar: {    title: '...'  }}"}, {"c42f": "with"}, {"da55": "static navigationOptions = {  title: '...'}"}, {"a4aa": "as well as any other navigation options your app needs. You\u2019ll want to check out the stack navigation docs for the new names."}, {"11a0": "Finally, you\u2019ll want to replace any this.props.navigator.push('screenName'); with this.props.navigation.navigate('screenName');. For me it was as simple as a find and replace. navigate will default to the push type animations (from right to left on iOS, fade from bottom on Android)."}, {"8bc0": "If you want to pass props to the new screen the syntax is this.props.navigation.navigate('screenName', { name: 'Spencer' });"}, {"a231": "Diff of Changes"}, {"1c86": "TabNavigation to TabNavigator"}, {"6af8": "I love the way TabNavigator works in React Navigation\u200a\u2014\u200ait has allowed me to write much less code and matches the platform the app is running on even better."}, {"acd9": "All I\u2019ve had to do is create a new TabNavigator with the same tabs as my current TabNavigation and use the StackNavigator\u2019s we set up before as the screens. I then replace the Tabs component in my app entry point with the new TabNavigator and I\u2019m all set."}, {"9e13": "Last thing to do is delete all the code you wrote to get the TabNavigation working. There\u2019s something so satisfying about deleting code while keeping the same functionality."}, {"3b3c": "Diff of Changes"}, {"baeb": "DrawerNavigation to DrawerNavigator"}, {"b580": "Replacing the DrawerNavigation with a DrawerNavigator is much like replacing Tabs."}, {"6d68": "First thing I have to do is create a new DrawerNavigator. In this case it\u2019s got the same screens as the TabNavigator we setup before."}, {"6beb": "We can then go ahead and import the new Drawer in our app entry point and everything should render fine. Since we\u2019re no longer using ex-navigation you can get rid of the NavigationProvider component and the dummy Router we have."}, {"e9e1": "You may have noticed that there is no longer a default icon in the navbar to open the drawer (though you can swipe to open it) so you\u2019ll want to add that."}, {"f9c3": "Finally, you get to delete any previous Drawer related logic\u00a0:)"}, {"c15e": "Diff of Changes"}, {"50d6": "Conclusion"}, {"ba0c": "This isn\u2019t definitive but in converting a few apps these were the things I found myself doing. Converting an app from ExNavigation to React Navigation isn\u2019t super complex since the APIs are pretty similar."}, {"da15": "Interested in more tips and tricks for React Native? Sign up for my email list and I\u2019ll share them with\u00a0you!"}], "content": "Migrate from ExNavigation to React Navigation I\u2019ve been using ExNavigation for quite a while. It\u2019s simple to setup and has consistently worked for me. If you\u2019ve checked out the the README in the last few months you may have noticed that it\u2019s in maintenance mode\u200a\u2014\u200ameaning it\u2019s not being updated (unless necessary) because all future resources are going to React Navigation. Also, in the last React Native release you may have noticed a warning popping up that NavigationExperimental is being deprecated (which ExNavigation is built on) so now is a good time to start the migration. So what is React Navigation? It\u2019s a routing solution that builds on the knowledge and experience gained from a host of other navigation solutions for React Native. I won\u2019t go into detail on it here but if you\u2019re interested I\u2019ve got a getting started guide for React Navigation. Today I want to walk you through the process of migrating from ExNavigation to React Navigation. So far I\u2019ve found it to be a simple process and has simplified my code a fair amount. Full source code is available on Github. In the readme I\u2019ve got links to diffs for each step. If you want a step-by-step walkthrough on how to migrate watch the videos, otherwise I\u2019ll link to the source code and give a brief description of what I\u2019m doing. Alerts Though the usage of this.props.navigator.showLocalAlert might not be used often/by many it\u2019s something that I used often and found will quickly break when doing this migration so it\u2019s the first thing I\u2019m replacing. To do this I\u2019m using the react-native-dropdownalert package and then making a higher order component to make the dropdown methods available anywhere I need to in my app (original issue with code). I won\u2019t go into the details of creating the HOC\u200a\u2014\u200athat can just be copied and pasted into your app if you want to go that route, just pay attention to the Alert component, install hoist-non-react-static, and react-native-dropdownalert into your project if you do copy it. With that done I then wrap my app with the AlertProvider and connect any components where I would want to invoke and alert from. Diff of Changes StackNavigation to StackNavigator In ExNavigation the StackNavigation component was at the core of much of your application. In React Navigation you\u2019ll be using the StackNavigator for this purpose. Updating is pretty straightforward. First you need to create the appropriate StackNavigators for your app and then use those new StackNavigators wherever you were using the StackNavigation component before. If you stopped at only swapping out the StackNavigation for StackNavigator you\u2019ll lose some functionality that\u2019s built into ExNavigation but if you do it all at once, which I imagine you will, you won\u2019t have issues. On all of your screens you\u2019ll need to replace the static route = {  navigationBar: {    title: '...'  }} with static navigationOptions = {  title: '...'} as well as any other navigation options your app needs. You\u2019ll want to check out the stack navigation docs for the new names. Finally, you\u2019ll want to replace any this.props.navigator.push('screenName'); with this.props.navigation.navigate('screenName');. For me it was as simple as a find and replace. navigate will default to the push type animations (from right to left on iOS, fade from bottom on Android). If you want to pass props to the new screen the syntax is this.props.navigation.navigate('screenName', { name: 'Spencer' }); Diff of Changes TabNavigation to TabNavigator I love the way TabNavigator works in React Navigation\u200a\u2014\u200ait has allowed me to write much less code and matches the platform the app is running on even better. All I\u2019ve had to do is create a new TabNavigator with the same tabs as my current TabNavigation and use the StackNavigator\u2019s we set up before as the screens. I then replace the Tabs component in my app entry point with the new TabNavigator and I\u2019m all set. Last thing to do is delete all the code you wrote to get the TabNavigation working. There\u2019s something so satisfying about deleting code while keeping the same functionality. Diff of Changes DrawerNavigation to DrawerNavigator Replacing the DrawerNavigation with a DrawerNavigator is much like replacing Tabs. First thing I have to do is create a new DrawerNavigator. In this case it\u2019s got the same screens as the TabNavigator we setup before. We can then go ahead and import the new Drawer in our app entry point and everything should render fine. Since we\u2019re no longer using ex-navigation you can get rid of the NavigationProvider component and the dummy Router we have. You may have noticed that there is no longer a default icon in the navbar to open the drawer (though you can swipe to open it) so you\u2019ll want to add that. Finally, you get to delete any previous Drawer related logic\u00a0:) Diff of Changes Conclusion This isn\u2019t definitive but in converting a few apps these were the things I found myself doing. Converting an app from ExNavigation to React Navigation isn\u2019t super complex since the APIs are pretty similar. Interested in more tips and tricks for React Native? Sign up for my email list and I\u2019ll share them with\u00a0you! ", "child": "1491_1"}