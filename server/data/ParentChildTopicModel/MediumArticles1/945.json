{"name": "945", "parent": "", "title": "Building a calculator.", "sentences": [{"b30c": "Building a calculator."}, {"18d6": "This is aimed at explaining and understanding Recursion, Algorithm, Tests and getting more familiar with programming using Javascript."}, {"b44c": "So let\u2019s get started."}, {"f5fd": "These are the steps I will take to complete this project:"}, {"9cc8": "Now if you are new to programming you might find the above things a bit strange, but fear not, I will explain them."}, {"9c1d": "Create a github repo"}, {"a43d": "Github is an application that provides a Version Control System as a service to you."}, {"5fdc": "A Version Control System (VCS) monitors changes on computer files and helps keep harmony between these computer files as they change. It keeps detailed records of when, how and why a file has undergone some change."}, {"dc8c": "Using Github is great and you can learn more about git and Github here."}, {"8a34": "Here is a link to the git repo on github. Feel free to make any changes you want. You can also see the live code here."}, {"3f4b": "Basic Calculator Algorithm"}, {"fd4e": "An algorithm seems like a very big word, at least to me when I first started out."}, {"2854": "Algorithms are important if you want to build good software and you want to do that as fast and as cheap as possible."}, {"c3ce": "Algorithms are simply step by step instructions or rules to be followed to solve a given problem. For example, I am hungry and I need to eat, assuming I am as dumb as a computer, I will need an algorithm that hopefully will get me food:"}, {"ec66": "1. Get up2. Walk to the fridge3. Open the fridge4. Find the chocolate5. Get take the chocolate back to where you were sitting6. Sit down7. Unwrap the chocolate8. Eat the chocolate9. If you are still hungry, repeat the process"}, {"9356": "This algorithm is pretty straightforward and easy to follow. It shows a somewhat detailed process for getting food from the fridge and eating the food."}, {"c95d": "Computers are really dumb and need very detailed instructions to perform the simplest of tasks like adding two numbers and providing us the sum."}, {"fd8a": "Now that you have a basic idea of how algorithms look like and what they are for, we will now start building a simple algorithm for our calculator. We will first make our calculator do basic stuff like add, subtract, multiply and divide and of course provide the answer."}, {"b122": "1. Get the equation2. Break it down using \"bodmas\"3. Calculate it4. Return the solution"}, {"a400": "Looks simple enough for a basic calculator. Time to make it come alive."}, {"7b22": "Recursion in practice"}, {"e364": "Our solution is made alive through recursion so it won\u2019t hurt to talk a bit about it."}, {"abcb": "Recursion in programming is repeatedly creating a smaller version of a given problem until the problem is solved. In programming, a function is said to be recursive if it calls itself from within itself."}, {"5de1": "We use recursion to solve a problem in a step in our algorithm which is removing brackets from an equation. We need to do this to solve using \u201cbodmas\u201d."}, {"9fc5": "First, I went off and created the very core of the calculator, the stuff that does the actual calculation."}, {"e887": "function solve (equation) {"}, {"33da": "    try {"}, {"4338": "        patch = equation.split(\"(\")[0]; "}, {"943a": "        if (eval(\"'\"+equation+\"'\") == patch) { "}, {"d0f1": "            return eval(patch); "}, {"ec53": "        }"}, {"9902": "        patch += \"*\" + eval(equation.split(\"(\")[1].split(\")\")[0]);"}, {"0cb3": "        other = equation.substring( equation.indexOf(')') + 1 ); "}, {"ab0a": "        patch += other; "}, {"6cdf": "        return solve (patch); "}, {"5c7f": "    }catch (e) {"}, {"d8ee": "        console.log (\"An error has occured: [\" + e + \" ]\");"}, {"f74c": "    }"}, {"6e6d": "}"}, {"4c67": "What you see above might be a bit confusing, but really it\u2019s very simple."}, {"247e": "Javascript has a inbuilt function called \u201ceval\u201d and Javascript has a lot of inbuilt functions. This function takes a parameter of type string as an expression and returns the evaluated expression."}, {"09f2": "My solution works simply by getting an expression and continues to replace brackets into multiplication signs and when that is done, calculates everything and returns the answer. If there isn\u2019t any brackets, we will return the solved expression"}, {"b8e9": "You can look in the repo on Github to get the full code."}, {"c7d7": "Writing Tests"}, {"4668": "Tests are a very important part of programming, they help you assert that your code will work as expected given any circumstance. Tests help you uncover bugs and improve code quality. A code with Tests is easier to debug and can help others know what a given code does and doesn\u2019t do."}, {"be1f": "Let\u2019s write our first Test."}, {"5ad0": "We will be using Jasmine, a Framework to write our Tests. You will see that Tests are really just regular codes with a slightly new syntax. The Test files will be included in the repo on Github."}, {"3a56": "describe( \"Solve\", function () {"}, {"aab5": "    it(\"can do addition\", function () {            expect(solve(\"5+5\")).toEqual(10);"}, {"b4fc": "    });"}, {"77d3": "    it(\"can do subtraction\", function () {"}, {"8a1b": "        expect(solve(\"5-5\")).toEqual(0);"}, {"6851": "    });"}, {"2a91": "    it(\"can do multiplication\", function () {"}, {"e6a0": "        expect(solve(\"5*5\")).toEqual(25);"}, {"996a": "    });"}, {"7c8c": "    it(\"can do division\", function () "}, {"da03": "        expect(solve(\"10/2\")).toEqual(5);"}, {"43cf": "    });"}, {"e62f": "    it(\"can do exponentiation\", function () {"}, {"cd13": "        expect(solve(\"5**2\")).toEqual(25);"}, {"41ae": "    });"}, {"bd3d": "    it(\"can do brackets first\", function () {"}, {"26bb": "        expect(solve(\"(5+5)2\")).toEqual(20);"}, {"7932": "    });"}, {"0579": "});"}, {"af5d": "Above you will notice that these Tests look like English Language very much and that they are just Javascript."}, {"7b30": "We are testing for basic calculator functions like addition, multiplication and division, making sure our calculator actually works as expected."}, {"389c": "Basically, Tests are just saying if I do this, that should happen. You can learn more about Javascript Tests."}, {"40a0": "The Tests I have written are focused on the core of our calculator, the solve function, I shared some part of it earlier."}, {"e3d0": "None of our Tests above failed, that doesn\u2019t happen always so I will show you what a failed Test looks like"}, {"0a55": "To produce this failed test, I changed some code in the Test to expect something that I was sure the solve function will not return. Something like:"}, {"1c99": "it(\"can do division\", function () {"}, {"6364": "expect(solve(\"10/2\")).toEqual(55); //this should be => .toEqual(5)"}, {"fdbf": "});"}, {"3746": "I hope I have been able to really give a basic hands on intro to Javascript Tests."}, {"77ea": "Remember that you need to write your code so that it\u2019s testable by avoiding things like inline Javascript and by being sure that you write codes that separate the functionality of your program into independent, interchangeable parts, such that each part has everything it needs to function independently, regardless of other parts."}, {"7c5c": "You can see modularity to some degree here with my solve function which can \u201csolve\u201d an expression without the need of any other part of the whole application, like displaying values or accepting inputs. At any point in time, I can alter my solve function without changing the way I collect or display data."}, {"91fc": "In summary"}, {"da96": "We have created a full application that is somewhat useable (not perfect) and does perform the purpose for which it was built. We wrote Algorithms, Code, Tests and we finished a project. We learnt about the need of all these things and how they come together to help us build reliable programs. We also see how writing our code in a certain way lets us test them."}, {"82dd": "Please comment what you think about this write and tell me if I missed anything or if something wasn\u2019t clear, I will do my best to do something about it."}, {"ba97": "Consider following me on twitter @THEozmic."}], "content": "Building a calculator. This is aimed at explaining and understanding Recursion, Algorithm, Tests and getting more familiar with programming using Javascript. So let\u2019s get started. These are the steps I will take to complete this project: Now if you are new to programming you might find the above things a bit strange, but fear not, I will explain them. Create a github repo Github is an application that provides a Version Control System as a service to you. A Version Control System (VCS) monitors changes on computer files and helps keep harmony between these computer files as they change. It keeps detailed records of when, how and why a file has undergone some change. Using Github is great and you can learn more about git and Github here. Here is a link to the git repo on github. Feel free to make any changes you want. You can also see the live code here. Basic Calculator Algorithm An algorithm seems like a very big word, at least to me when I first started out. Algorithms are important if you want to build good software and you want to do that as fast and as cheap as possible. Algorithms are simply step by step instructions or rules to be followed to solve a given problem. For example, I am hungry and I need to eat, assuming I am as dumb as a computer, I will need an algorithm that hopefully will get me food: 1. Get up2. Walk to the fridge3. Open the fridge4. Find the chocolate5. Get take the chocolate back to where you were sitting6. Sit down7. Unwrap the chocolate8. Eat the chocolate9. If you are still hungry, repeat the process This algorithm is pretty straightforward and easy to follow. It shows a somewhat detailed process for getting food from the fridge and eating the food. Computers are really dumb and need very detailed instructions to perform the simplest of tasks like adding two numbers and providing us the sum. Now that you have a basic idea of how algorithms look like and what they are for, we will now start building a simple algorithm for our calculator. We will first make our calculator do basic stuff like add, subtract, multiply and divide and of course provide the answer. 1. Get the equation2. Break it down using \"bodmas\"3. Calculate it4. Return the solution Looks simple enough for a basic calculator. Time to make it come alive. Recursion in practice Our solution is made alive through recursion so it won\u2019t hurt to talk a bit about it. Recursion in programming is repeatedly creating a smaller version of a given problem until the problem is solved. In programming, a function is said to be recursive if it calls itself from within itself. We use recursion to solve a problem in a step in our algorithm which is removing brackets from an equation. We need to do this to solve using \u201cbodmas\u201d. First, I went off and created the very core of the calculator, the stuff that does the actual calculation. function solve (equation) {     try {         patch = equation.split(\"(\")[0];          if (eval(\"'\"+equation+\"'\") == patch) {              return eval(patch);          }         patch += \"*\" + eval(equation.split(\"(\")[1].split(\")\")[0]);         other = equation.substring( equation.indexOf(')') + 1 );          patch += other;          return solve (patch);      }catch (e) {         console.log (\"An error has occured: [\" + e + \" ]\");     } } What you see above might be a bit confusing, but really it\u2019s very simple. Javascript has a inbuilt function called \u201ceval\u201d and Javascript has a lot of inbuilt functions. This function takes a parameter of type string as an expression and returns the evaluated expression. My solution works simply by getting an expression and continues to replace brackets into multiplication signs and when that is done, calculates everything and returns the answer. If there isn\u2019t any brackets, we will return the solved expression You can look in the repo on Github to get the full code. Writing Tests Tests are a very important part of programming, they help you assert that your code will work as expected given any circumstance. Tests help you uncover bugs and improve code quality. A code with Tests is easier to debug and can help others know what a given code does and doesn\u2019t do. Let\u2019s write our first Test. We will be using Jasmine, a Framework to write our Tests. You will see that Tests are really just regular codes with a slightly new syntax. The Test files will be included in the repo on Github. describe( \"Solve\", function () {     it(\"can do addition\", function () {            expect(solve(\"5+5\")).toEqual(10);     });     it(\"can do subtraction\", function () {         expect(solve(\"5-5\")).toEqual(0);     });     it(\"can do multiplication\", function () {         expect(solve(\"5*5\")).toEqual(25);     });     it(\"can do division\", function ()          expect(solve(\"10/2\")).toEqual(5);     });     it(\"can do exponentiation\", function () {         expect(solve(\"5**2\")).toEqual(25);     });     it(\"can do brackets first\", function () {         expect(solve(\"(5+5)2\")).toEqual(20);     }); }); Above you will notice that these Tests look like English Language very much and that they are just Javascript. We are testing for basic calculator functions like addition, multiplication and division, making sure our calculator actually works as expected. Basically, Tests are just saying if I do this, that should happen. You can learn more about Javascript Tests. The Tests I have written are focused on the core of our calculator, the solve function, I shared some part of it earlier. None of our Tests above failed, that doesn\u2019t happen always so I will show you what a failed Test looks like To produce this failed test, I changed some code in the Test to expect something that I was sure the solve function will not return. Something like: it(\"can do division\", function () { expect(solve(\"10/2\")).toEqual(55); //this should be => .toEqual(5) }); I hope I have been able to really give a basic hands on intro to Javascript Tests. Remember that you need to write your code so that it\u2019s testable by avoiding things like inline Javascript and by being sure that you write codes that separate the functionality of your program into independent, interchangeable parts, such that each part has everything it needs to function independently, regardless of other parts. You can see modularity to some degree here with my solve function which can \u201csolve\u201d an expression without the need of any other part of the whole application, like displaying values or accepting inputs. At any point in time, I can alter my solve function without changing the way I collect or display data. In summary We have created a full application that is somewhat useable (not perfect) and does perform the purpose for which it was built. We wrote Algorithms, Code, Tests and we finished a project. We learnt about the need of all these things and how they come together to help us build reliable programs. We also see how writing our code in a certain way lets us test them. Please comment what you think about this write and tell me if I missed anything or if something wasn\u2019t clear, I will do my best to do something about it. Consider following me on twitter @THEozmic. ", "child": "945_1\t945_2945_1\t945_2"}