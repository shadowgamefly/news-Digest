{"name": "651", "parent": "", "title": "The Ultimate Android Development Framework", "sentences": [{"e98f": "The Ultimate Android Development Framework"}, {"9bac": "Disclaimer: The title is the slogan of the framework I\u2019m presenting on this article. I have no intention to shade or diminish any other great framework that may exist. I just want to share my experiences as a mobile developer with you."}, {"3675": "It\u2019s been a year now since I decided to widen my programming skills to reach Android Development and as I learned I realized that there is a lot of repetitive job needed in order to accomplish simple things like load data from databases, show it on views, get the input, save it or pass it through different Fragments/Activities."}, {"5a1d": "When you are a newbie it\u2019s nice to do those things by yourself and have full control of what\u2019s done and how it is made. But\u00a0\u2026 as your skill in the platform increases, as well as your challenges on it (you have to make larger and more complex apps) this starts to feel a bit redundant and annoying."}, {"715c": "Eventually there comes the time when you get to ask yourself\u2026"}, {"9ec9": "Could there be a way to reduce the amount of code written to make this kind of stuff? Let\u2019s say \u201cloading data from a table and injecting its content into a layout\u201d with few lines of code, like:"}, {"7aec": "@Model(query = \u201cId = 1\u201d) // Get the data from the database@Populate // Show it on the view (layout)User_ user; // Yep\u2026 I meant some user info"}, {"26d2": "Well\u00a0\u2026 actually, there is\u00a0:)."}, {"f999": "Declex"}, {"59d8": "Declex is a framework that combines the use of great libraries such as AndroidAnnotations, ActiveAndroid, EventBus and modern programming techniques like Dependency Injection and Selectors, precisely to fulfill this need."}, {"e4c8": "The previous code is an example of it and works (of course) with the existence of a \u201cUser model\u201d and a layout that should have its TextViews Ids starting with a \u201cuser_\u201d prefix (e.g. \u201cuser_FirstName\u201d, \u201cuser_Age\u201d or \u201cuser_Role\u201d)."}, {"43de": "And yes\u2026 this is the simplest of things that can be achieved with it. In fact, using the Framework not only makes smoother the interaction with the views, but also handles the requests made to the Server APIs through the use of OkHttp3(for network requests) and GSon(for JSON handling)."}, {"a236": "Very short video demonstration of Declex code reduction capabilities."}, {"2791": "But before going deeper into the amazing capabilities of the Framework let\u2019s take a quick look at how it works."}, {"9cd7": "Deus Ex\u00a0Machina"}, {"e384": "One of the main principles of Declex is the generation of a class extension of your current Fragment/Activity. In this way the extended version will have all the code you\u2019ll simply get bored writing (like findViewById, Inflate, setText, etc. ) allowing the original F/A to look much more clean, compact and organized."}, {"bb2d": "This is great for the develop and maintenance of the code but at the same time it doesn\u2019t hides any of what\u2019s done, because you can always access the extended version of the F/A and look at what the Framework is doing for you."}, {"3b3e": "So yes, for those \u201ccontrol freaks\u201d (like me), that need to know everything that\u2019s going on in the app to be calm and comfy\u2026 you won\u2019t have anything black boxed in here."}, {"df02": "What\u2019s explained before is mostly used in 3 of the 4 core features of the Framework which are:"}, {"2edf": "But what about the fourth one? Well Declex also generates something that could be described as utility functions or as the author baptized them: Actions."}, {"f499": "Actions are portions of code generated to speed up the writing of recurrent tasks like: calling another Fragment/Activity and passing them arguments, building an AlertDialog and then reacting to the user\u2019s answer (if needed), and forcing the population and recollection of data towards/from the views, among other things."}, {"2174": "It\u2019s important to highlight that when you develop with Declex you are not forced to use all the Framework features in order to have everything going ok. You can merge the raw code with the generated one as you like and it will still be working like a charm."}, {"a72b": "This gives you a lot of room not only during the learning process but also when you face specific tasks that you feel more comfortable in doing by yourself."}, {"1d61": "That\u2019s enough explanation for now\u2026 let\u2019s start with the cooler stuff."}, {"0fa6": "The power of population"}, {"59d1": "Suppose that you need to Populate a ListView with all the users in a database and show their full name, birthday and an icon according to the user sex."}, {"2792": "For the clarity of the example let\u2019s write the user model first:"}, {"3dc8": "public class User extends Model{  @Column  String Name;"}, {"7a9a": "  @Column  Date Birthday;"}, {"8b7c": "  @Column  boolean Gender;"}, {"0ee5": "  public string getDateString(){    return new SimpleDateFormat(\u201cdd/MM/yyyy\u201d).format(Birthday);  } "}, {"2ec6": "  public int getUserIcon(){     if (gender)       return R.drawable.user_female; // Ladies first! ^^    else      return R.drawable.user_male;  }}"}, {"c7a5": "Next you\u2019ll need a layout with a ListView that has its id set to \u201cusersList\u201d and a item_users layout with two TextViews and one ImageView identified as \u201cusersList_Name\u201d, \u201cusersList_getDateString\u201d and \u201cusersList_getUserIcon\u201d."}, {"f85f": "Ok\u2026 let\u2019s see how much effort takes to Populate all the existing users into this ListView using Declex:"}, {"2105": "1 : @Model 2 : @Populate3 ;) List<User_> usersList;"}, {"0b24": "That\u2019s it\u00a0:)."}, {"5431": "The Framework deduces that what you need to populate is a ListView called \u201cusersList\u201d because of the field datatype (List) and then injects the content of the model into each of its items."}, {"5d29": "There is a lot you can do here without even needing an adapter class, like not loading the data at first using @Model(lazy = \u201ctrue\u201d) or pulling only users who\u2019s names start with M using @Model(query = \u201cName like \u2018M%\u2019\u201d)."}, {"2bb3": "But if you really needed it (the adapter) you can always use the @AdapterClass(NameOfAdapter.class) annotation, and it will, still, inject the data for you\u2026 I bet you think that\u2019s cool."}, {"344d": "As you can see there isn\u2019t a direct reference to the User model but to a User_ class extension (generated by Declex). This extension allows not only to inject text and images into the views but also make layout juggles like changing the visibility of a view, it\u2019s size or anything you can imagine."}, {"abf1": "To accomplish this you need additional methods in the model that look like this:"}, {"0d75": "public void Name(Textview view){  if (gender)    view.setTextColor(context.getColor(R.color.pink));  else    view.setTextColor(context.getColor(R.color.blue));}"}, {"68a3": "And just like that you have separate colors for the names of males and females on your list."}, {"aa6d": "Well folks that would be all for this article. I\u2019m thinking of making a series of this, in order to present all the Framework features. There is still a lot of stuff to show that I think are great and would be nice to share with you."}, {"87c2": "If you are interested in the Framework you can get all the info you need on its Wiki here or read a more in depth article made by the author here."}, {"7593": "Hope you liked the article. In the next one I\u2019ll be talking about Actions and Events and how they mix-up with the Population/Recollection mechanism."}, {"38c5": "Leave your comments below."}], "content": "The Ultimate Android Development Framework Disclaimer: The title is the slogan of the framework I\u2019m presenting on this article. I have no intention to shade or diminish any other great framework that may exist. I just want to share my experiences as a mobile developer with you. It\u2019s been a year now since I decided to widen my programming skills to reach Android Development and as I learned I realized that there is a lot of repetitive job needed in order to accomplish simple things like load data from databases, show it on views, get the input, save it or pass it through different Fragments/Activities. When you are a newbie it\u2019s nice to do those things by yourself and have full control of what\u2019s done and how it is made. But\u00a0\u2026 as your skill in the platform increases, as well as your challenges on it (you have to make larger and more complex apps) this starts to feel a bit redundant and annoying. Eventually there comes the time when you get to ask yourself\u2026 Could there be a way to reduce the amount of code written to make this kind of stuff? Let\u2019s say \u201cloading data from a table and injecting its content into a layout\u201d with few lines of code, like: @Model(query = \u201cId = 1\u201d) // Get the data from the database@Populate // Show it on the view (layout)User_ user; // Yep\u2026 I meant some user info Well\u00a0\u2026 actually, there is\u00a0:). Declex Declex is a framework that combines the use of great libraries such as AndroidAnnotations, ActiveAndroid, EventBus and modern programming techniques like Dependency Injection and Selectors, precisely to fulfill this need. The previous code is an example of it and works (of course) with the existence of a \u201cUser model\u201d and a layout that should have its TextViews Ids starting with a \u201cuser_\u201d prefix (e.g. \u201cuser_FirstName\u201d, \u201cuser_Age\u201d or \u201cuser_Role\u201d). And yes\u2026 this is the simplest of things that can be achieved with it. In fact, using the Framework not only makes smoother the interaction with the views, but also handles the requests made to the Server APIs through the use of OkHttp3(for network requests) and GSon(for JSON handling). Very short video demonstration of Declex code reduction capabilities. But before going deeper into the amazing capabilities of the Framework let\u2019s take a quick look at how it works. Deus Ex\u00a0Machina One of the main principles of Declex is the generation of a class extension of your current Fragment/Activity. In this way the extended version will have all the code you\u2019ll simply get bored writing (like findViewById, Inflate, setText, etc. ) allowing the original F/A to look much more clean, compact and organized. This is great for the develop and maintenance of the code but at the same time it doesn\u2019t hides any of what\u2019s done, because you can always access the extended version of the F/A and look at what the Framework is doing for you. So yes, for those \u201ccontrol freaks\u201d (like me), that need to know everything that\u2019s going on in the app to be calm and comfy\u2026 you won\u2019t have anything black boxed in here. What\u2019s explained before is mostly used in 3 of the 4 core features of the Framework which are: But what about the fourth one? Well Declex also generates something that could be described as utility functions or as the author baptized them: Actions. Actions are portions of code generated to speed up the writing of recurrent tasks like: calling another Fragment/Activity and passing them arguments, building an AlertDialog and then reacting to the user\u2019s answer (if needed), and forcing the population and recollection of data towards/from the views, among other things. It\u2019s important to highlight that when you develop with Declex you are not forced to use all the Framework features in order to have everything going ok. You can merge the raw code with the generated one as you like and it will still be working like a charm. This gives you a lot of room not only during the learning process but also when you face specific tasks that you feel more comfortable in doing by yourself. That\u2019s enough explanation for now\u2026 let\u2019s start with the cooler stuff. The power of population Suppose that you need to Populate a ListView with all the users in a database and show their full name, birthday and an icon according to the user sex. For the clarity of the example let\u2019s write the user model first: public class User extends Model{  @Column  String Name;   @Column  Date Birthday;   @Column  boolean Gender;   public string getDateString(){    return new SimpleDateFormat(\u201cdd/MM/yyyy\u201d).format(Birthday);  }    public int getUserIcon(){     if (gender)       return R.drawable.user_female; // Ladies first! ^^    else      return R.drawable.user_male;  }} Next you\u2019ll need a layout with a ListView that has its id set to \u201cusersList\u201d and a item_users layout with two TextViews and one ImageView identified as \u201cusersList_Name\u201d, \u201cusersList_getDateString\u201d and \u201cusersList_getUserIcon\u201d. Ok\u2026 let\u2019s see how much effort takes to Populate all the existing users into this ListView using Declex: 1 : @Model 2 : @Populate3 ;) List<User_> usersList; That\u2019s it\u00a0:). The Framework deduces that what you need to populate is a ListView called \u201cusersList\u201d because of the field datatype (List) and then injects the content of the model into each of its items. There is a lot you can do here without even needing an adapter class, like not loading the data at first using @Model(lazy = \u201ctrue\u201d) or pulling only users who\u2019s names start with M using @Model(query = \u201cName like \u2018M%\u2019\u201d). But if you really needed it (the adapter) you can always use the @AdapterClass(NameOfAdapter.class) annotation, and it will, still, inject the data for you\u2026 I bet you think that\u2019s cool. As you can see there isn\u2019t a direct reference to the User model but to a User_ class extension (generated by Declex). This extension allows not only to inject text and images into the views but also make layout juggles like changing the visibility of a view, it\u2019s size or anything you can imagine. To accomplish this you need additional methods in the model that look like this: public void Name(Textview view){  if (gender)    view.setTextColor(context.getColor(R.color.pink));  else    view.setTextColor(context.getColor(R.color.blue));} And just like that you have separate colors for the names of males and females on your list. Well folks that would be all for this article. I\u2019m thinking of making a series of this, in order to present all the Framework features. There is still a lot of stuff to show that I think are great and would be nice to share with you. If you are interested in the Framework you can get all the info you need on its Wiki here or read a more in depth article made by the author here. Hope you liked the article. In the next one I\u2019ll be talking about Actions and Events and how they mix-up with the Population/Recollection mechanism. Leave your comments below. ", "child": "651_1\t651_2\t651_3\t651_4\t651_5\t651_6\t651_7\t651_8\t651_9\t651_10"}