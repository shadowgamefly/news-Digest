{"name": "958", "parent": "", "title": "How to do TDD in Android\u00a0? Part 1\u200a\u2014\u200aOverview", "sentences": [{"231d": "How to do TDD in Android\u00a0? Part 1\u200a\u2014\u200aOverview"}, {"57a9": "Tutorial series for android automation testing\u00a0. Using JUnit & Espresso\u00a0."}, {"11d8": "Automation tests are important as it ensures quality while developing application.TDD enforces writing tests before writing implementation."}, {"191a": "Refer this previous tutorial for more information about TDD."}, {"29ae": "Testing pyramid\u00a0:"}, {"ff27": "As we can see Pyramid below,"}, {"670b": "Unit tests cover large section of pyramid making solid base. Unit tests are easy to write."}, {"b28a": "Integration Testing ensures integration of modules is correct and cover second large piece of Pyramid."}, {"4392": "Functional testing usually describes what the system does and occupies smallest amongst the three part."}, {"5275": "There are many testing tools and frameworks that can be used while developing application. Some of them are provided & supported by Google and some of them are third party\u00a0."}, {"77e3": "Types of testing in Android\u00a0:"}, {"5bf2": "Unit Test"}, {"4910": "Unit tests mainly target smallest functionality (like method, class\u00a0, component or small module) with isolation from other component."}, {"4439": "Tools used for Unit Test"}, {"bfea": "Instrumentation Test"}, {"40d7": "Instrumentation Test (UI) are tests that mock User Interaction like clicking button\u00a0, Typing text in EditText. Android Instrumentation is a set of \u201chooks\u201d into the Android system that allows you to control the lifecycle of Android components (i.e. drive the activity lifecycle yourself instead of having these driven by the system). These tests require an actual device or emulator to run\u00a0."}, {"8c4f": "Tools used for Instrumentation Test"}, {"aedc": "Package Structure for Testing\u00a0:-"}, {"1857": "In our project, two folders host our tests which are test and androidTest."}, {"e8f0": "Test\u00a0:Unit tests are hosted in this folder. These tests run on JVM and do not requires Android device or emulator. This type of test have no access to any android framework specific component like Context."}, {"bc72": "androidTest:- All Instrumentation (Espresso) tests are hosted in this folder.These tests need physical Android device or emulator in order to run."}, {"89a0": "In next post, we will dive deep into what architecture to follow & implementation for unit testing\u00a0."}, {"da83": "Meanwhile\u00a0, would like to hear suggestions & inputs on this."}, {"a4f4": "Cheers \ud83c\udf7b\u00a0!!!."}, {"5fae": "Hit that little \u2665\ufe0f below\u00a0."}, {"17a4": "Checkout Next post\u00a0:"}, {"8ab1": "How to do TDD in Android\u00a0? Part 2\u200a\u2014\u200aProject architecture\u00a0, Setup & Unit TestingThis tutorial will go through project architecture, setup from scratch and finally we will write some Unit tests.medium.com"}], "content": "How to do TDD in Android\u00a0? Part 1\u200a\u2014\u200aOverview Tutorial series for android automation testing\u00a0. Using JUnit & Espresso\u00a0. Automation tests are important as it ensures quality while developing application.TDD enforces writing tests before writing implementation. Refer this previous tutorial for more information about TDD. Testing pyramid\u00a0: As we can see Pyramid below, Unit tests cover large section of pyramid making solid base. Unit tests are easy to write. Integration Testing ensures integration of modules is correct and cover second large piece of Pyramid. Functional testing usually describes what the system does and occupies smallest amongst the three part. There are many testing tools and frameworks that can be used while developing application. Some of them are provided & supported by Google and some of them are third party\u00a0. Types of testing in Android\u00a0: Unit Test Unit tests mainly target smallest functionality (like method, class\u00a0, component or small module) with isolation from other component. Tools used for Unit Test Instrumentation Test Instrumentation Test (UI) are tests that mock User Interaction like clicking button\u00a0, Typing text in EditText. Android Instrumentation is a set of \u201chooks\u201d into the Android system that allows you to control the lifecycle of Android components (i.e. drive the activity lifecycle yourself instead of having these driven by the system). These tests require an actual device or emulator to run\u00a0. Tools used for Instrumentation Test Package Structure for Testing\u00a0:- In our project, two folders host our tests which are test and androidTest. Test\u00a0:Unit tests are hosted in this folder. These tests run on JVM and do not requires Android device or emulator. This type of test have no access to any android framework specific component like Context. androidTest:- All Instrumentation (Espresso) tests are hosted in this folder.These tests need physical Android device or emulator in order to run. In next post, we will dive deep into what architecture to follow & implementation for unit testing\u00a0. Meanwhile\u00a0, would like to hear suggestions & inputs on this. Cheers \ud83c\udf7b\u00a0!!!. Hit that little \u2665\ufe0f below\u00a0. Checkout Next post\u00a0: How to do TDD in Android\u00a0? Part 2\u200a\u2014\u200aProject architecture\u00a0, Setup & Unit TestingThis tutorial will go through project architecture, setup from scratch and finally we will write some Unit tests.medium.com ", "child": "958_1\t958_2\t958_3\t958_4\t958_5"}