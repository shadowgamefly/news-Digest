{"name": "2151", "parent": "", "title": "Notifications\u200a\u2014\u200aPart1\u00a0:\u00a0Styling", "sentences": [{"a661": "Notifications\u200a\u2014\u200aPart1\u00a0:\u00a0Styling"}, {"9cde": "Notifications are a very important and powerful tool. Use them correctly\u200a\u2014\u200ayou can significantly increase user engagement. Use them poorly- you might even risk it with users uninstalling your app\u2026"}, {"6e95": "As the Android N release has some new notification features in store, and a new elegant facelift, it is a perfect opportunity to review all that Android allows us to do with notifications, and improve the user experience and engagement."}, {"74d5": "This first post will overview some designs and styles we can assign to our precious notifications."}, {"cc66": "***** Apologies in advance for so many pictures of me.. I\u2019m not that creative, I guess\u00a0:)\u00a0*****"}, {"486e": "So first,"}, {"9415": "What do they look\u00a0like?"}, {"751c": "Basic, most minimal notification looks like this:"}, {"30ff": "Each notification must at least have:"}, {"c01d": "** I guess it wouldn\u2019t take too long until you\u2019d want to add some color."}, {"3a6a": "Since Lollipop we can use setColor(), with an accent color. The system tints some elements of the notification UI, to give it a much prettier look, and emphasise some important parts."}, {"24bf": "** Another thing we\u2019ll usually want to add is a Large Icon\u00a0, usually more specifically related to the notification."}, {"bc0b": "So our basic notification will look like:"}, {"6420": "Building a notification"}, {"806c": "In order to create one, we use a builder object and add attributes to it, until we\u2019re ready to publish the notification."}, {"8a08": "Use Notification.Builder, or NotificationCompat.Builder for backward compatibility."}, {"e14b": "Building our basic notification from above would look something like:"}, {"7eba": "new NotificationCompat.Builder(context)"}, {"38c2": "        .setSmallIcon(smallIconDrawable)        .setLargeIcon(largeIconBitmap)        .setContentTitle(\"Awesome Title!\")        .setColor(ContextCompat.getColor(context, colorRes))        .setContentText(\"Cool content!\")"}, {"320f": "        .build();"}, {"28db": "Rich Notification"}, {"e113": "Jelly Bean has allowed us to add Rich Styles to our notification, to easily make them both more appealing, and hint on the content we\u2019re notifying about."}, {"b838": "Notifications have a \u201cNormal\u201d or collapsed state, which looks exactly as described above (for most cases). They can be expanded, to reveal the Rich Content which is set."}, {"c3e9": "Expanding used to be only by dragging the notification down. On N there\u2019s a small arrow on the top to do it more conveniently."}, {"8ddc": "In general, to add the Rich Content, use setStyle(). We pass as a parameter Notification.Style builder, which in turn, will rebuild the needed properties which were built by the primary Notification Builder\u00a0."}, {"b615": "Let\u2019s overview some of the different Styles:"}, {"40bb": "BigTextStyle"}, {"40da": "builder.setStyle(new Notification.BigTextStyle().bigText(longString))"}, {"ef91": "BigPictureStyle"}, {"fe83": "builder.setStyle(new Notification.BigPictureStyle().bigPicture(bigBitmap))"}, {"e90a": "InboxStyle"}, {"f06d": "A list of up to 5 strings."}, {"88a3": "builder.setStyle(new Notification.InboxStyle().addLine(str1).addLine(str2).addLine(str3).setContentTitle(\"5 New mails from Britt\").setSummaryText(\"+2 more\"))"}, {"f47f": "Messaging Style"}, {"b9b7": "A style new to N!"}, {"21cb": "For previous versions you\u2019ll have to find a substitute, often InboxStyle would fit, or create it with BigTextStyle."}, {"45e2": "A significant benefit with using this style, though, is that on Android Wear 2.0, inline responses will be automatically added."}, {"c33f": "MessagingStyle on\u00a0N"}, {"39d8": "builder.setStyle(new Notification.MessagingStyle(\"Me\")        .setConversationTitle(\"Share Food\")        .addMessage(messageString1, timestamp1, \"Phoebe\")        .addMessage(messageString2, timestamp2, \"Rachel\")                ...        .addMessage(messageString5, timestamp5, null)                                    // Pass in null for user."}, {"eb83": "On its constructor we pass the name of the current user (here \u201cMe\u201d)."}, {"5f8b": "For each message added, pass a message string, a timestamp and a sender name, or \u201cnull\u201d for the current user. For the latter case, the name is taken from the constructor, and is tinted on the UI."}, {"ef94": "MediaStyle"}, {"5f17": "Introduced on L."}, {"bd8e": "Shows up to 5 icons for actions when expanded, and up to 3 icons (on the right hand side) when collapsed."}, {"4e7f": "setShowActionsInCompactView() takes indices of the actions added to the notification builder."}, {"67d8": "builder.addAction(action1).addAction(action2).addAction(action3).setStyle(new Notification.MediaStyle()              .setShowActionsInCompactView(0, 1))"}, {"a256": "We\u2019ll further discuss actions in a future post."}, {"1f40": "Use setMediaSession(MediaSessionCompat.Token)\u00a0, to have the System UI identify this notification as representing an active media session. As a result, for example, the album picture will show in the lock screen. See more details on the documentation."}, {"d927": "Well,"}, {"3398": "We learnt about some basic ways to design notifications. We used some styles to make them more related to the content they notify about, to attract our users."}, {"0098": "But there\u2019s a whole lot more we can do with them!!"}, {"f87c": "Next post will show another way to use notifications, notify users on a process the app is doing. Stay tuned\u00a0:)"}, {"5917": "In the meantime join our awesome Android Academy TLV community on our Facebook group and Meetup."}, {"37bb": "Resources:"}, {"6f9e": "NotificationNotification.CarExtender Helper class to add Android Auto extensions to notifications. Notification\u2026developer.android.com"}, {"cb7b": "Notifications | Android DevelopersA notification is a message you can display to the user outside of your application&#39;s normal UI. When you tell the\u2026developer.android.com"}], "content": "Notifications\u200a\u2014\u200aPart1\u00a0:\u00a0Styling Notifications are a very important and powerful tool. Use them correctly\u200a\u2014\u200ayou can significantly increase user engagement. Use them poorly- you might even risk it with users uninstalling your app\u2026 As the Android N release has some new notification features in store, and a new elegant facelift, it is a perfect opportunity to review all that Android allows us to do with notifications, and improve the user experience and engagement. This first post will overview some designs and styles we can assign to our precious notifications. ***** Apologies in advance for so many pictures of me.. I\u2019m not that creative, I guess\u00a0:)\u00a0***** So first, What do they look\u00a0like? Basic, most minimal notification looks like this: Each notification must at least have: ** I guess it wouldn\u2019t take too long until you\u2019d want to add some color. Since Lollipop we can use setColor(), with an accent color. The system tints some elements of the notification UI, to give it a much prettier look, and emphasise some important parts. ** Another thing we\u2019ll usually want to add is a Large Icon\u00a0, usually more specifically related to the notification. So our basic notification will look like: Building a notification In order to create one, we use a builder object and add attributes to it, until we\u2019re ready to publish the notification. Use Notification.Builder, or NotificationCompat.Builder for backward compatibility. Building our basic notification from above would look something like: new NotificationCompat.Builder(context)         .setSmallIcon(smallIconDrawable)        .setLargeIcon(largeIconBitmap)        .setContentTitle(\"Awesome Title!\")        .setColor(ContextCompat.getColor(context, colorRes))        .setContentText(\"Cool content!\")         .build(); Rich Notification Jelly Bean has allowed us to add Rich Styles to our notification, to easily make them both more appealing, and hint on the content we\u2019re notifying about. Notifications have a \u201cNormal\u201d or collapsed state, which looks exactly as described above (for most cases). They can be expanded, to reveal the Rich Content which is set. Expanding used to be only by dragging the notification down. On N there\u2019s a small arrow on the top to do it more conveniently. In general, to add the Rich Content, use setStyle(). We pass as a parameter Notification.Style builder, which in turn, will rebuild the needed properties which were built by the primary Notification Builder\u00a0. Let\u2019s overview some of the different Styles: BigTextStyle builder.setStyle(new Notification.BigTextStyle().bigText(longString)) BigPictureStyle builder.setStyle(new Notification.BigPictureStyle().bigPicture(bigBitmap)) InboxStyle A list of up to 5 strings. builder.setStyle(new Notification.InboxStyle().addLine(str1).addLine(str2).addLine(str3).setContentTitle(\"5 New mails from Britt\").setSummaryText(\"+2 more\")) Messaging Style A style new to N! For previous versions you\u2019ll have to find a substitute, often InboxStyle would fit, or create it with BigTextStyle. A significant benefit with using this style, though, is that on Android Wear 2.0, inline responses will be automatically added. MessagingStyle on\u00a0N builder.setStyle(new Notification.MessagingStyle(\"Me\")        .setConversationTitle(\"Share Food\")        .addMessage(messageString1, timestamp1, \"Phoebe\")        .addMessage(messageString2, timestamp2, \"Rachel\")                ...        .addMessage(messageString5, timestamp5, null)                                    // Pass in null for user. On its constructor we pass the name of the current user (here \u201cMe\u201d). For each message added, pass a message string, a timestamp and a sender name, or \u201cnull\u201d for the current user. For the latter case, the name is taken from the constructor, and is tinted on the UI. MediaStyle Introduced on L. Shows up to 5 icons for actions when expanded, and up to 3 icons (on the right hand side) when collapsed. setShowActionsInCompactView() takes indices of the actions added to the notification builder. builder.addAction(action1).addAction(action2).addAction(action3).setStyle(new Notification.MediaStyle()              .setShowActionsInCompactView(0, 1)) We\u2019ll further discuss actions in a future post. Use setMediaSession(MediaSessionCompat.Token)\u00a0, to have the System UI identify this notification as representing an active media session. As a result, for example, the album picture will show in the lock screen. See more details on the documentation. Well, We learnt about some basic ways to design notifications. We used some styles to make them more related to the content they notify about, to attract our users. But there\u2019s a whole lot more we can do with them!! Next post will show another way to use notifications, notify users on a process the app is doing. Stay tuned\u00a0:) In the meantime join our awesome Android Academy TLV community on our Facebook group and Meetup. Resources: NotificationNotification.CarExtender Helper class to add Android Auto extensions to notifications. Notification\u2026developer.android.com Notifications | Android DevelopersA notification is a message you can display to the user outside of your application&#39;s normal UI. When you tell the\u2026developer.android.com ", "child": "2151_1\t2151_2\t2151_32151_1\t2151_2\t2151_32151_1\t2151_2\t2151_32151_1\t2151_2\t2151_32151_1\t2151_2\t2151_32151_1\t2151_2\t2151_32151_1\t2151_2\t2151_32151_1\t2151_2\t2151_32151_1\t2151_2\t2151_32151_1\t2151_2\t2151_32151_1\t2151_2\t2151_32151_1\t2151_2\t2151_3"}