{"name": "1029", "parent": "", "title": "Sketch\u2019s Brilliant New Way to Export Borders as\u00a0SVG", "sentences": [{"de83": "Sketch\u2019s Brilliant New Way to Export Borders as\u00a0SVG"}, {"89c1": "Sketch just released version 43, and there\u2019s one improvement that is so noteworthy I need shout from the rooftops with joy."}, {"23b7": "It has to do with exporting SVGs."}, {"bb8e": "SVG is a brilliant and capable graphics format, but it has yet to support inside or outside borders."}, {"4b11": "As a result, every design software that exports SVG has to solve this problem:"}, {"1912": "If your design uses inside or outside borders, how can those layers be recreated in an identical yet SVG-friendly way?"}, {"ade6": "There have been 3 main approaches:"}, {"b895": "Option 1 produces a reliably identical SVG, but has a few drawbacks, such as a larger file size. More about these drawbacks in the \u201cSide Note\u201d below."}, {"b79e": "Option 2 increases both the complexity and file size of an SVG, and is prone to breaking (not reliably looking identical to your design)."}, {"dd46": "Option 3 produces clean SVGs, small file sizes, and reliably identical results. Although this is clearly the best option, it can be time consuming to manually recreate non-basic shapes before exporting (as shown below)."}, {"dac5": "Option 3: Recreating an inside/outside border identically\u2014but with a centered border\u2014often requires moving each vector point, which is laborious for complex\u00a0shapes."}, {"b170": "Before we go any further, it\u2019s important to note that SVG uses the term stroke instead of border. They\u2019re effectively the same thing, but I try to use border when talking about Sketch (i.e. a layer before it has been exported) and stroke when talking about SVG (the exported result)."}, {"1fc5": "Which options do different design tools\u00a0use?"}, {"48cc": "Adobe Illustrator outlines inside/outside borders during SVG export, Figma uses a perplexing combination of outlining and masking, Affinity Designer uses outlining, and\u200a\u2014\u200abefore version 43\u200a\u2014\u200aSketch used masking."}, {"ac1e": "Here\u2019s the big\u00a0news:"}, {"87b8": "Sketch now does Option 3 for you automatically during SVG export."}, {"07e8": "Starting with version 43, Sketch reconstructs the layer and its border to be perfectly identical while using centered SVG\u00a0strokes."}, {"a1a0": "No other design software does this, and it has made Sketch\u2019s SVGs far more reliable and smaller in file size."}, {"0a74": "I\u2019ve been beta-testing Sketch 43 for the past few weeks, exporting tons of SVGs, and this new feature has been working well. In one design I noticed a rare bug, where a recreated SVG path from an outside border had an extra vector point\u200a\u2014\u200abut that was easy to work around and the Sketch team is aware of the bug."}, {"0bfa": "\ud83d\udca1 Side Note: I\u2019m always surprised by how many people promote the idea that SVGs shouldn\u2019t have strokes\u200a\u2014\u200athat they should always be outlined, as described above in Option 1. As an all-encompassing statement, that\u2019s simply not true. Certain programs that accept SVGs may require this, but outlining borders has drawbacks: most notably, it increases file size and prevents you from changing stroke-width later on. Furthermore, outlined borders (<path> elements) have the exact same browser support as SVG strokes, and outlining is not required to use CSS to change the color of an icon. I\u2019ll be discussing this more in my upcoming Sketch & SVG course and in future articles."}, {"da96": "\ud83e\udd13 For SVG Nerds\u00a0Only\u2026"}, {"8141": "If you\u2019ve ever opened up an SVG to see or edit its code (or, \u201cmarkup\u201d), there\u2019s one more thing you should know about Sketch\u2019s new borders feature."}, {"14dc": "When a layer in Sketch has a border and a fill, the SVG markup changes a bit. Imagine that layer is a light green circle with a green border. If that border is centered, the resulting SVG will place a fill and a stroke attribute on the same <circle> element, as you\u2019d expect. But if the border is inside or outside, the SVG markup changes significantly: Sketch separates the fill and the stroke into separate <circle> elements. Furthermore, the circle responsible for the fill is moved into the <defs> element, and later referenced by a <use> element. Here\u2019s a simplified example:"}, {"12f9": "Fill + Centered Border:(This is what you\u2019d expect.)"}, {"2e4a": "<svg ...>  <circle fill=\"lightgreen\" stroke=\"green\" .../>     <!-- stroke and fill are on the same shape --></svg>"}, {"a0cb": "Fill + Inside/Outside Border:(Doesn\u2019t this seem a little excessive?)"}, {"f199": "<svg ...>  <defs>    <circle id=\"fill-area\" .../> <!-- this is the fill's shape -->  </defs>  <g id=\"layer-name\">    <use fill=\"lightgreen\" xlink:href=\"#fill-area\"/>    <circle stroke=\"green\" .../> <!-- this is the stroke's shape -->  </g></svg>"}, {"1971": "There may be very rare cases when you want separate SVG elements for your fill and border, but those can easily be prepared as 2 layers before export. Most of the time you just want your SVG graphic to look identical to your Sketch design and have the smallest file size possible."}, {"7b47": "As you can see in the code snippets above, layers with a fill + inside/outside border will always be larger in file size than those with centered borders. But there\u2019s another drawback too: antialiasing artifacts around the shared edge of the border and fill layers."}, {"698c": "In other words, the visual appearance of your design actually changes when you separate a stroke/border and a fill into discrete elements. That\u2019s because they have the same edges, and although it would seem air-tight, the background colors seep through when a computer renders the design into pixels to show up on your screen. Quite simply, that makes your icons or graphics look bad."}, {"ab3b": "How to fix\u00a0this:"}, {"f2c3": "If you\u2019re familiar with editing SVG code, the solution is pretty simple: add the fill attribute to the element with a stroke, then delete the fill <use> element and what it referenced in <defs>. The result is identical, but doesn\u2019t have the antialiasing issue, and it uses considerably less code:"}, {"68be": "<svg ...>  <circle id=\"layer-name\" fill=\"lightgreen\" stroke=\"green\" .../>    <!-- stroke and fill both on the stroke's shape --></svg"}, {"a35f": "To be clear, this is a very minor issue and fixing it is completely optional. Your SVG will show up reliably either way. And it\u2019s not technically a bug\u200a\u2014\u200aI\u2019ve discussed all of this with the Sketch team, and they\u2019ve decided to stick with their approach for now. My suggestions are \u201can optimization\u201d for people who want perfect visuals and smaller file sizes."}, {"a956": "Coming soon: an optimizer to do this for\u00a0you!"}, {"6c75": "I\u2019ve created a simple web-app that does this fill+border optimization (along with a few other Sketch-related SVG optimizations) automatically for you. Using it is as simple as pasting in your SVG markup, then copying the optimized version!"}, {"2666": "It\u2019s not intended to replace other SVG optimizers, like Sketch\u2019s SVGO plugin or SVGOMG, but rather to provide you with additional optimizations that you won\u2019t find in those others. I\u2019m putting the finishing touches on the tool, and will be releasing it later this month. Oh, and yes\u2014it\u2019s free.\u00a0:)"}, {"78fc": "Sketch 43\u2019s improvements extend beyond this fantastic SVG borders feature, so be sure to check out their article about what\u2019s new."}, {"e30d": "Improved Shape Editing and More in Sketch 43After introducing a couple big features in Sketch 42, we\u2019ve used this release to focus on the smaller improvements and\u2026medium.com"}, {"16ea": "And if you\u2019re interested in the upcoming SVG Workflows in Sketch course that I\u2019m working on\u200a\u2014\u200awhich inspired this article in the first place\u200a\u2014\u200ayou can sign up to be notified when it\u2019s released."}, {"743d": "Thanks for reading!"}, {"e522": "Sign up for my newsletter to be the first to know when I publish new design articles and resources."}, {"19bc": "If you enjoyed this article, you\u2019ll love Sketch Master\u200a\u2014\u200amy online training courses for professionals learning Sketch. You\u2019ll learn tons of tricks and practical workflows, by designing real-world UI/UX and app icon projects."}, {"8b90": "Sketch MasterFast-paced and in-depth video training courses, to make you a master designer in Sketch. sketchmaster.com"}], "content": "Sketch\u2019s Brilliant New Way to Export Borders as\u00a0SVG Sketch just released version 43, and there\u2019s one improvement that is so noteworthy I need shout from the rooftops with joy. It has to do with exporting SVGs. SVG is a brilliant and capable graphics format, but it has yet to support inside or outside borders. As a result, every design software that exports SVG has to solve this problem: If your design uses inside or outside borders, how can those layers be recreated in an identical yet SVG-friendly way? There have been 3 main approaches: Option 1 produces a reliably identical SVG, but has a few drawbacks, such as a larger file size. More about these drawbacks in the \u201cSide Note\u201d below. Option 2 increases both the complexity and file size of an SVG, and is prone to breaking (not reliably looking identical to your design). Option 3 produces clean SVGs, small file sizes, and reliably identical results. Although this is clearly the best option, it can be time consuming to manually recreate non-basic shapes before exporting (as shown below). Option 3: Recreating an inside/outside border identically\u2014but with a centered border\u2014often requires moving each vector point, which is laborious for complex\u00a0shapes. Before we go any further, it\u2019s important to note that SVG uses the term stroke instead of border. They\u2019re effectively the same thing, but I try to use border when talking about Sketch (i.e. a layer before it has been exported) and stroke when talking about SVG (the exported result). Which options do different design tools\u00a0use? Adobe Illustrator outlines inside/outside borders during SVG export, Figma uses a perplexing combination of outlining and masking, Affinity Designer uses outlining, and\u200a\u2014\u200abefore version 43\u200a\u2014\u200aSketch used masking. Here\u2019s the big\u00a0news: Sketch now does Option 3 for you automatically during SVG export. Starting with version 43, Sketch reconstructs the layer and its border to be perfectly identical while using centered SVG\u00a0strokes. No other design software does this, and it has made Sketch\u2019s SVGs far more reliable and smaller in file size. I\u2019ve been beta-testing Sketch 43 for the past few weeks, exporting tons of SVGs, and this new feature has been working well. In one design I noticed a rare bug, where a recreated SVG path from an outside border had an extra vector point\u200a\u2014\u200abut that was easy to work around and the Sketch team is aware of the bug. \ud83d\udca1 Side Note: I\u2019m always surprised by how many people promote the idea that SVGs shouldn\u2019t have strokes\u200a\u2014\u200athat they should always be outlined, as described above in Option 1. As an all-encompassing statement, that\u2019s simply not true. Certain programs that accept SVGs may require this, but outlining borders has drawbacks: most notably, it increases file size and prevents you from changing stroke-width later on. Furthermore, outlined borders (<path> elements) have the exact same browser support as SVG strokes, and outlining is not required to use CSS to change the color of an icon. I\u2019ll be discussing this more in my upcoming Sketch & SVG course and in future articles. \ud83e\udd13 For SVG Nerds\u00a0Only\u2026 If you\u2019ve ever opened up an SVG to see or edit its code (or, \u201cmarkup\u201d), there\u2019s one more thing you should know about Sketch\u2019s new borders feature. When a layer in Sketch has a border and a fill, the SVG markup changes a bit. Imagine that layer is a light green circle with a green border. If that border is centered, the resulting SVG will place a fill and a stroke attribute on the same <circle> element, as you\u2019d expect. But if the border is inside or outside, the SVG markup changes significantly: Sketch separates the fill and the stroke into separate <circle> elements. Furthermore, the circle responsible for the fill is moved into the <defs> element, and later referenced by a <use> element. Here\u2019s a simplified example: Fill + Centered Border:(This is what you\u2019d expect.) <svg ...>  <circle fill=\"lightgreen\" stroke=\"green\" .../>     <!-- stroke and fill are on the same shape --></svg> Fill + Inside/Outside Border:(Doesn\u2019t this seem a little excessive?) <svg ...>  <defs>    <circle id=\"fill-area\" .../> <!-- this is the fill's shape -->  </defs>  <g id=\"layer-name\">    <use fill=\"lightgreen\" xlink:href=\"#fill-area\"/>    <circle stroke=\"green\" .../> <!-- this is the stroke's shape -->  </g></svg> There may be very rare cases when you want separate SVG elements for your fill and border, but those can easily be prepared as 2 layers before export. Most of the time you just want your SVG graphic to look identical to your Sketch design and have the smallest file size possible. As you can see in the code snippets above, layers with a fill + inside/outside border will always be larger in file size than those with centered borders. But there\u2019s another drawback too: antialiasing artifacts around the shared edge of the border and fill layers. In other words, the visual appearance of your design actually changes when you separate a stroke/border and a fill into discrete elements. That\u2019s because they have the same edges, and although it would seem air-tight, the background colors seep through when a computer renders the design into pixels to show up on your screen. Quite simply, that makes your icons or graphics look bad. How to fix\u00a0this: If you\u2019re familiar with editing SVG code, the solution is pretty simple: add the fill attribute to the element with a stroke, then delete the fill <use> element and what it referenced in <defs>. The result is identical, but doesn\u2019t have the antialiasing issue, and it uses considerably less code: <svg ...>  <circle id=\"layer-name\" fill=\"lightgreen\" stroke=\"green\" .../>    <!-- stroke and fill both on the stroke's shape --></svg To be clear, this is a very minor issue and fixing it is completely optional. Your SVG will show up reliably either way. And it\u2019s not technically a bug\u200a\u2014\u200aI\u2019ve discussed all of this with the Sketch team, and they\u2019ve decided to stick with their approach for now. My suggestions are \u201can optimization\u201d for people who want perfect visuals and smaller file sizes. Coming soon: an optimizer to do this for\u00a0you! I\u2019ve created a simple web-app that does this fill+border optimization (along with a few other Sketch-related SVG optimizations) automatically for you. Using it is as simple as pasting in your SVG markup, then copying the optimized version! It\u2019s not intended to replace other SVG optimizers, like Sketch\u2019s SVGO plugin or SVGOMG, but rather to provide you with additional optimizations that you won\u2019t find in those others. I\u2019m putting the finishing touches on the tool, and will be releasing it later this month. Oh, and yes\u2014it\u2019s free.\u00a0:) Sketch 43\u2019s improvements extend beyond this fantastic SVG borders feature, so be sure to check out their article about what\u2019s new. Improved Shape Editing and More in Sketch 43After introducing a couple big features in Sketch 42, we\u2019ve used this release to focus on the smaller improvements and\u2026medium.com And if you\u2019re interested in the upcoming SVG Workflows in Sketch course that I\u2019m working on\u200a\u2014\u200awhich inspired this article in the first place\u200a\u2014\u200ayou can sign up to be notified when it\u2019s released. Thanks for reading! Sign up for my newsletter to be the first to know when I publish new design articles and resources. If you enjoyed this article, you\u2019ll love Sketch Master\u200a\u2014\u200amy online training courses for professionals learning Sketch. You\u2019ll learn tons of tricks and practical workflows, by designing real-world UI/UX and app icon projects. Sketch MasterFast-paced and in-depth video training courses, to make you a master designer in Sketch. sketchmaster.com ", "child": "1029_1\t1029_2\t1029_3\t1029_4\t1029_5\t1029_6\t1029_7\t1029_8\t1029_9\t1029_10\t1029_11\t1029_12\t1029_131029_1\t1029_2\t1029_3\t1029_4\t1029_5\t1029_6\t1029_7\t1029_8\t1029_9\t1029_10\t1029_11\t1029_12\t1029_13"}