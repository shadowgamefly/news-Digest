{"name": "665", "parent": "", "title": "How to build animated microinteractions in\u00a0React", "sentences": [{"b4bf": "How to build animated microinteractions in\u00a0React"}, {"cb19": "Microinteractions guide a user through your application. They reinforce your user experience and provide delight."}, {"2d30": "You may have seen some of the slick examples of microinteractions on Dribble or CodePen. But do you know how to build your own library of similar UI widgets?"}, {"1d54": "In this article, I\u2019ll focus on animated microinteractions using React, Facebook\u2019s popular, component-oriented UI framework. I\u2019ll build three interactions for a searchbox:"}, {"adef": "I\u2019ll use a few different implementations:"}, {"3902": "Here\u2019s a live demo and the code that powers it."}, {"94dd": "This is one of several posts about Higher Order (HOC) and Stateless Functional Components. The first post is about code reuse in React and React Native, via these techniques."}, {"2ea1": "What is a Microinteraction?"}, {"2d1f": "Dan Saffer (who wrote the book) gives us this definition: \u201cMicrointeractions are contained product moments that revolve around a single use case\u200a\u2014\u200athey have one main task.\u201d"}, {"e7a2": "Examples might be clearer. Some microinteractions are everywhere, such as a cursor change when hovering over a link or the vibration of your phone when you switch to silent mode. Others, such as an item being added to a shopping cart, aren\u2019t so common (yet)."}, {"b47c": "Why should I care about Microinteractions?"}, {"e885": "Microinteractions can provide feedback and make your application memorable. When users have so many app choices, better microinteractions might be the clich\u00e9d better mousetrap you should build."}, {"2309": "But I am not a UX designer. So I suggest reading Nick Babich\u2019s post about microinteractions."}, {"f488": "Getting Started"}, {"d9ca": "I\u2019ll use create-react-app to bootstrap a React application, but any React setup method will work. Also, I like Material-UI, so I\u2019ll import that too. (This choice is arbitrary\u200a\u2014\u200ayou could use another widget library or manually style your elements.)"}, {"a94d": "create-react-app search-box-animationcd search-box-animationnpm install --save material-ui react-tap-event-plugin"}, {"5d52": "The Component: a Simple Search\u00a0Box"}, {"6192": "I\u2019ll create a simple search box. It will comprise two elements: a search icon button and a text box. I\u2019ll create a stateless functional component for the search box. (Stateless functional components are functions that render React components and do not maintain state, i.e. use setState. You can learn more in this tutorial or my previous post.)"}, {"a762": "SearchBox.js"}, {"dbd2": "(I\u2019ll use the onClick callback later.)"}, {"6705": "The isOpen prop sets the SearchBox open or closed rendering."}, {"9f82": "isOpen=true / isOpen=false"}, {"52af": "Using Higher Order Components to Separate\u00a0Concerns"}, {"ee07": "I could change SearchBox to a regular component and add code that would open and close the text box when clicked, for example."}, {"babc": "But I prefer to separate the animation from the core purpose of the search box. The search box shows/captures a query value and submits this query to some other controller. This is a subjective design decision, but it has practical benefits: I can reuse the microinteraction logic with another user input component."}, {"14fc": "Higher Order Components (HOC) are functions that return a new component. This component wraps a component(s) and adds functionality. I will create an HOC to add the open/close behavior to the SearchBox."}, {"72c9": "Create expanding-animation.js"}, {"5e1a": "Update App.js as follows:"}, {"872e": "If you run npm start, you\u2019ll have a search icon that you can click to open and close the text box."}, {"1a78": "It works, but the opening and closing is jarring. An animation can smooth the effect."}, {"8263": "Animations"}, {"bca1": "There are three general approaches to animations."}, {"9719": "CSS transitions change a property value (like width) over some time duration. The change doesn\u2019t have to be linear; you can specify functions for changing the values."}, {"dac4": "CSS animations change the style for an element (like size, color, and position). Each incremental style is a keyframe. You create a keyframe series to achieve a desired effect."}, {"6402": "Both CSS tactics repeatedly render elements to simulate motion. You can do the calculations yourself, i.e. option (3). Several Javascript animation frameworks use this approach, managing the calculations. (I\u2019ll use react-motion in a later example.)"}, {"5d61": "I will use all these techniques in the examples below, but I\u2019ll start with CSS transitions."}, {"224b": "Expanding the Search\u00a0Box"}, {"09e7": "The expanding text box animation needs one CSS property: transition"}, {"2eb4": "Change expanding-animation.js as follows,"}, {"f97d": "Looking at the change in line 21, additionalStyles, SearchBox will merge this style with it\u2019s existing styles in line 29 and 31 below. (I\u2019ll return to the transition CSS property in line 2 in a moment.)"}, {"517e": "Update SearchBox.js"}, {"7efa": "With the styles merged, the animation will take effect."}, {"3f45": "CSS transition: width"}, {"6daf": "The result is a smooth expansion of the text box width, giving the appearance it opens. The CSS transition property controls this (from line 2 in expanding-animation.js)."}, {"cdc7": "transition: 'width 0.75s cubic-bezier(0.000, 0.795, 0.000, 1.000)'"}, {"ecc1": "I encourage you to read the documentation for the CSS transition property, as there are a variety of options. In the example, there are three parameters:"}, {"56bf": "While I chose cubic-bezier as the function, linear or ease are among other options. There are interactive tools that help you select these values, such as this cubic-bezier builder."}, {"85a9": "Moving the Search\u00a0Box"}, {"df4b": "Check out the following concept animation I found on Dribble:"}, {"71bc": "https://dribbble.com/shots/2751256-Google-Search"}, {"f4be": "There are multiple elements in the interaction; but I\u2019d like to focus on the movement of the search box to the top of the screen."}, {"da33": "I can move my humble search box with a CSS transition. Create a new HOC, move-up-animation.js"}, {"89ef": "This is like the makeExpanding HOC function, except does a translation (move up). Also, the animation style applies only to the outer frame (div)."}, {"8d0c": "Update App.js,"}, {"5565": "and you should see"}, {"151a": "CSS transition. transform: translateY"}, {"faef": "Perhaps you want a bouncy effect. You could use react-motion. It is a popular React library which uses spring dynamics to control animations. (A good introduction, by Nash Vail, is here.)"}, {"7c12": "npm install --save react-motion"}, {"a2bb": "Create spring-up-animation.js"}, {"1341": "As this isn\u2019t a react-motion tutorial, I will briefly summarize how this works. React-motion wraps the animated component, Target, with its own component, Motion. (There are other react-motion components, such as TransitionMotion and Staggered Motion.)"}, {"197d": "React-motion interpolates, using spring dynamics, a series of interim values. It provides the values to the animated component as a style. This style determines the visual transition in the animation."}, {"1b94": "The image below shows the result (with a wobbly spring to highlight the effect)."}, {"533d": "react-motion spring\u00a0dynamics"}, {"993c": "You could use react-motion for a range of effects. For example, you could change the text box to expand like a spring."}, {"00ab": "(spring-up-animation.js and move-up-animation.js have the same onClick state logic, so I refactored the common parts. Details are here.)"}, {"1879": "Shaking the Search\u00a0Box"}, {"2c5d": "I want to provide feedback to the user about erroneous queries. You could use error messages, but I\u2019d like to do something more whimsical: shake the search box."}, {"ffe7": "I could use react-motion, but I\u2019d like to look at another technique: keyframe animation."}, {"86e7": "React-animations is a React library for keyframe animations. It injects CSS keyframes into a DOM style sheet. (The other examples have only used inline styles.)"}, {"6a47": "npm install --save react-animations"}, {"ec89": "I also need a library, like Radium or Aphrodite, to handle the CSS style sheet injection. I\u2019ve chosen Aphrodite, as I\u2019ve used it before."}, {"1b60": "npm install --save aphrodite"}, {"4f9f": "Create another HOC, shake-animation.js"}, {"f9ba": "There are a few key sections. Line 4 uses Aphrodite to create the style sheet for the react-animations effect, head-shake. Line 29 sets the CSS class for the animation on Target. (This requires a tweak to SearchBox to use the CSS class. Look at the use of frameClass in the source of SearchBox.js.) The onClick handler on line 17 is more complicated."}, {"6154": "Restarting an Animation"}, {"f9fb": "I\u2019d like to do the \u2018head shake\u2019 on each validation error (or whatever trigger is used). But since the animation is a CSS class, I can\u2019t simply set the same class again; it would have no effect. This CSS Tricks post outlines a few options. The simplest is a timeout that removes the CSS animation class. When you add it again (for a new event), you\u2019ll see the \u2018head shake\u2019."}, {"6d23": "react-animations (uses keyframes, CSS animation)"}, {"2b9a": "Putting It Together: Composing a Complex Component"}, {"6592": "I\u2019ve created several HOCs for different animations. But you can also chain the HOCs to create a compound component. It will open the text box when clicked and shake on erroneous input."}, {"33df": "First, you\u2019ll need to make a few changes toSearchBox"}, {"a093": "SearchBox is now a controlled component (fancy term for using React to manage the text box\u2019s input value). It also provides a callback, onSubmit, for submitting the search query (when a user presses the Enter key)."}, {"cd8b": "You also need to change shake-animation.js. Clicking the search icon should not cause the shake. Instead, I want another component to determine when to \u2018shake\u2019. This separates the validation logic from code that controls the animation."}, {"d893": "startShake is a flag to reset the animation. But this is an implementation detail. It should be encapsulated, as internal state, in the makeShakeAnimation HOC."}, {"a99f": "startShake is dependent on shouldShake. I can use componentWillReceiveProps to respond to prop changes. (It\u2019s parent, the validation component, provides these props.) So I moved the previous onClick logic to componentWillReceiveProps."}, {"05e8": "The change in line 27, {...this.props}, passes all props to the wrapped component, Target. (I need to similarly change the render method in expanding-animation.js. The details are here.)"}, {"2180": "I can now add a component that will control when to shake."}, {"8fa0": "Create search-box-controller.js"}, {"0c3a": "This is another HOC. It does not have visual elements, but it controls the logical behavior of the wrapped component. (Dan Abramov has a good post explaining such separation.) In this case, all queries as erroneous, but in a real application, I\u2019d validate queries and connect to APIs."}, {"ddb6": "Lastly, I want to highlight that makeAnimatedValidationSearchBox is an HOC that chains two other HOCs."}, {"d5f9": "const WrappedComponent =makeShakingAnimation(makeExpanding(Target));"}, {"1183": "Another small update toApp.js"}, {"5f3f": "(Line 12 uses the new HOC)"}, {"6e29": "and execute run npm start"}, {"10bb": "a compound component, made from chaining three\u00a0HOCs"}, {"c23a": "I\u2019ve created a compound component that uses multiple microinteractions. They are reusable and discrete."}, {"79d6": "Wrapping Up"}, {"c30d": "I\u2019ve sampled each of the approaches: CSS transitions, react-motion and react-animations. I wish you could pick one approach, but it\u2019s hard to contort a single approach for all use cases. Thankfully, you can mix-and-match libraries and techniques. And you can encapsulate the details in reusable HOCs."}, {"0a6f": "You might want to check out libraries such recompose, that make HOC creation easier."}, {"b0d9": "The GitHub repo for this project is here."}, {"d694": "Please \u2661 this post and follow me for future stories. Thanks for reading."}], "content": "How to build animated microinteractions in\u00a0React Microinteractions guide a user through your application. They reinforce your user experience and provide delight. You may have seen some of the slick examples of microinteractions on Dribble or CodePen. But do you know how to build your own library of similar UI widgets? In this article, I\u2019ll focus on animated microinteractions using React, Facebook\u2019s popular, component-oriented UI framework. I\u2019ll build three interactions for a searchbox: I\u2019ll use a few different implementations: Here\u2019s a live demo and the code that powers it. This is one of several posts about Higher Order (HOC) and Stateless Functional Components. The first post is about code reuse in React and React Native, via these techniques. What is a Microinteraction? Dan Saffer (who wrote the book) gives us this definition: \u201cMicrointeractions are contained product moments that revolve around a single use case\u200a\u2014\u200athey have one main task.\u201d Examples might be clearer. Some microinteractions are everywhere, such as a cursor change when hovering over a link or the vibration of your phone when you switch to silent mode. Others, such as an item being added to a shopping cart, aren\u2019t so common (yet). Why should I care about Microinteractions? Microinteractions can provide feedback and make your application memorable. When users have so many app choices, better microinteractions might be the clich\u00e9d better mousetrap you should build. But I am not a UX designer. So I suggest reading Nick Babich\u2019s post about microinteractions. Getting Started I\u2019ll use create-react-app to bootstrap a React application, but any React setup method will work. Also, I like Material-UI, so I\u2019ll import that too. (This choice is arbitrary\u200a\u2014\u200ayou could use another widget library or manually style your elements.) create-react-app search-box-animationcd search-box-animationnpm install --save material-ui react-tap-event-plugin The Component: a Simple Search\u00a0Box I\u2019ll create a simple search box. It will comprise two elements: a search icon button and a text box. I\u2019ll create a stateless functional component for the search box. (Stateless functional components are functions that render React components and do not maintain state, i.e. use setState. You can learn more in this tutorial or my previous post.) SearchBox.js (I\u2019ll use the onClick callback later.) The isOpen prop sets the SearchBox open or closed rendering. isOpen=true / isOpen=false Using Higher Order Components to Separate\u00a0Concerns I could change SearchBox to a regular component and add code that would open and close the text box when clicked, for example. But I prefer to separate the animation from the core purpose of the search box. The search box shows/captures a query value and submits this query to some other controller. This is a subjective design decision, but it has practical benefits: I can reuse the microinteraction logic with another user input component. Higher Order Components (HOC) are functions that return a new component. This component wraps a component(s) and adds functionality. I will create an HOC to add the open/close behavior to the SearchBox. Create expanding-animation.js Update App.js as follows: If you run npm start, you\u2019ll have a search icon that you can click to open and close the text box. It works, but the opening and closing is jarring. An animation can smooth the effect. Animations There are three general approaches to animations. CSS transitions change a property value (like width) over some time duration. The change doesn\u2019t have to be linear; you can specify functions for changing the values. CSS animations change the style for an element (like size, color, and position). Each incremental style is a keyframe. You create a keyframe series to achieve a desired effect. Both CSS tactics repeatedly render elements to simulate motion. You can do the calculations yourself, i.e. option (3). Several Javascript animation frameworks use this approach, managing the calculations. (I\u2019ll use react-motion in a later example.) I will use all these techniques in the examples below, but I\u2019ll start with CSS transitions. Expanding the Search\u00a0Box The expanding text box animation needs one CSS property: transition Change expanding-animation.js as follows, Looking at the change in line 21, additionalStyles, SearchBox will merge this style with it\u2019s existing styles in line 29 and 31 below. (I\u2019ll return to the transition CSS property in line 2 in a moment.) Update SearchBox.js With the styles merged, the animation will take effect. CSS transition: width The result is a smooth expansion of the text box width, giving the appearance it opens. The CSS transition property controls this (from line 2 in expanding-animation.js). transition: 'width 0.75s cubic-bezier(0.000, 0.795, 0.000, 1.000)' I encourage you to read the documentation for the CSS transition property, as there are a variety of options. In the example, there are three parameters: While I chose cubic-bezier as the function, linear or ease are among other options. There are interactive tools that help you select these values, such as this cubic-bezier builder. Moving the Search\u00a0Box Check out the following concept animation I found on Dribble: https://dribbble.com/shots/2751256-Google-Search There are multiple elements in the interaction; but I\u2019d like to focus on the movement of the search box to the top of the screen. I can move my humble search box with a CSS transition. Create a new HOC, move-up-animation.js This is like the makeExpanding HOC function, except does a translation (move up). Also, the animation style applies only to the outer frame (div). Update App.js, and you should see CSS transition. transform: translateY Perhaps you want a bouncy effect. You could use react-motion. It is a popular React library which uses spring dynamics to control animations. (A good introduction, by Nash Vail, is here.) npm install --save react-motion Create spring-up-animation.js As this isn\u2019t a react-motion tutorial, I will briefly summarize how this works. React-motion wraps the animated component, Target, with its own component, Motion. (There are other react-motion components, such as TransitionMotion and Staggered Motion.) React-motion interpolates, using spring dynamics, a series of interim values. It provides the values to the animated component as a style. This style determines the visual transition in the animation. The image below shows the result (with a wobbly spring to highlight the effect). react-motion spring\u00a0dynamics You could use react-motion for a range of effects. For example, you could change the text box to expand like a spring. (spring-up-animation.js and move-up-animation.js have the same onClick state logic, so I refactored the common parts. Details are here.) Shaking the Search\u00a0Box I want to provide feedback to the user about erroneous queries. You could use error messages, but I\u2019d like to do something more whimsical: shake the search box. I could use react-motion, but I\u2019d like to look at another technique: keyframe animation. React-animations is a React library for keyframe animations. It injects CSS keyframes into a DOM style sheet. (The other examples have only used inline styles.) npm install --save react-animations I also need a library, like Radium or Aphrodite, to handle the CSS style sheet injection. I\u2019ve chosen Aphrodite, as I\u2019ve used it before. npm install --save aphrodite Create another HOC, shake-animation.js There are a few key sections. Line 4 uses Aphrodite to create the style sheet for the react-animations effect, head-shake. Line 29 sets the CSS class for the animation on Target. (This requires a tweak to SearchBox to use the CSS class. Look at the use of frameClass in the source of SearchBox.js.) The onClick handler on line 17 is more complicated. Restarting an Animation I\u2019d like to do the \u2018head shake\u2019 on each validation error (or whatever trigger is used). But since the animation is a CSS class, I can\u2019t simply set the same class again; it would have no effect. This CSS Tricks post outlines a few options. The simplest is a timeout that removes the CSS animation class. When you add it again (for a new event), you\u2019ll see the \u2018head shake\u2019. react-animations (uses keyframes, CSS animation) Putting It Together: Composing a Complex Component I\u2019ve created several HOCs for different animations. But you can also chain the HOCs to create a compound component. It will open the text box when clicked and shake on erroneous input. First, you\u2019ll need to make a few changes toSearchBox SearchBox is now a controlled component (fancy term for using React to manage the text box\u2019s input value). It also provides a callback, onSubmit, for submitting the search query (when a user presses the Enter key). You also need to change shake-animation.js. Clicking the search icon should not cause the shake. Instead, I want another component to determine when to \u2018shake\u2019. This separates the validation logic from code that controls the animation. startShake is a flag to reset the animation. But this is an implementation detail. It should be encapsulated, as internal state, in the makeShakeAnimation HOC. startShake is dependent on shouldShake. I can use componentWillReceiveProps to respond to prop changes. (It\u2019s parent, the validation component, provides these props.) So I moved the previous onClick logic to componentWillReceiveProps. The change in line 27, {...this.props}, passes all props to the wrapped component, Target. (I need to similarly change the render method in expanding-animation.js. The details are here.) I can now add a component that will control when to shake. Create search-box-controller.js This is another HOC. It does not have visual elements, but it controls the logical behavior of the wrapped component. (Dan Abramov has a good post explaining such separation.) In this case, all queries as erroneous, but in a real application, I\u2019d validate queries and connect to APIs. Lastly, I want to highlight that makeAnimatedValidationSearchBox is an HOC that chains two other HOCs. const WrappedComponent =makeShakingAnimation(makeExpanding(Target)); Another small update toApp.js (Line 12 uses the new HOC) and execute run npm start a compound component, made from chaining three\u00a0HOCs I\u2019ve created a compound component that uses multiple microinteractions. They are reusable and discrete. Wrapping Up I\u2019ve sampled each of the approaches: CSS transitions, react-motion and react-animations. I wish you could pick one approach, but it\u2019s hard to contort a single approach for all use cases. Thankfully, you can mix-and-match libraries and techniques. And you can encapsulate the details in reusable HOCs. You might want to check out libraries such recompose, that make HOC creation easier. The GitHub repo for this project is here. Please \u2661 this post and follow me for future stories. Thanks for reading. ", "child": "665_1\t665_2\t665_3\t665_4\t665_5\t665_6\t665_7\t665_8\t665_9\t665_10\t665_11\t665_12\t665_13\t665_14\t665_15\t665_16\t665_17\t665_18\t665_19"}