{"name": "1497", "parent": "", "title": "Consumindo API com Redux de forma\u00a0elegante", "sentences": [{"51be": "Consumindo API com Redux de forma\u00a0elegante"}, {"a740": "Como voc\u00ea faz para consumir API's com Redux? Na documenta\u00e7\u00e3o oficial s\u00e3o referenciados Middlewares como redux-thunk e redux-promise, assim como na maioria dos exemplos de tutoriais sobre Redux que a gente encontra espalhados pela internet."}, {"98f9": "Quando falamos em consumir API's, falamos de side-effects. Partindo do princ\u00edpio que actions e reducers devem ser fun\u00e7\u00f5es puras, chegamos a conclus\u00e3o de que o melhor lugar para executar as fun\u00e7\u00f5es n\u00e3o puras (com side-effects / as que fazem fetch) \u00e9 dentro de Middlewares."}, {"736d": "Seguindo aquelas sugest\u00f5es, teremos coisas como:"}, {"f08e": "dispatch({ type: 'FETCHING' })"}, {"d141": "axios.get('https://api.github.com/users/arojunior')  .then(response => dispatch({type:'SUCCESS', payload: res.data })),  .catch(error => dispatch({type:'FAILURE', error: error}))"}, {"0819": "ou\u2026"}, {"4f71": "const apiServer = 'https://api.github.com/users'const fetchData = axios.get(`${apiServer}/arojunior`)"}, {"6fe2": "dispatch({ type: 'FETCHING' })"}, {"323b": "dispatch(fetchData)  .then(response => ({ type: 'SUCCESS', payload: res.data })),  .catch(error => ({ type: 'FAILURE', error: error}))"}, {"338a": "Mas isso n\u00e3o \u00e9 nada elegante, n\u00e9? Um tanto quanto confuso. Sem contar que esse c\u00f3digo acima teria que ficar em algum local com acesso ao dispatch, no caso, dentro de um componente."}, {"43b3": "Voc\u00ea poderia chamar direto o m\u00e9todo que faz fetch na api e apenas retornar quando conclu\u00edsse, mas dessa forma voc\u00ea estaria ignorando o estado 'fetching' e poss\u00edveis erros. Isso tamb\u00e9m n\u00e3o \u00e9 nada legal."}, {"c7bc": "O padr\u00e3o \u00e9 termos 3 actions para controle de estado: quando a requisi\u00e7\u00e3o inicia, quando ela conclui com sucesso e outra em caso de erro."}, {"653c": "Diante deste problema, resolvi escrever um Middleware pra deixar as coisas mais organizadas de modo que eu pudesse colocar todo o meu c\u00f3digo dentro de um action creator e apenas chamasse este m\u00e9todo dentro do componente."}, {"2758": "Apresento-lhes o https://github.com/arojunior/fetch-middleware"}, {"6fc5": "Conforme exemplo da documenta\u00e7\u00e3o no Github, este seria o formato da action:"}, {"9220": "type \u00e9 um array com 3 actions creators que devem seguir sempre esta ordem."}, {"3080": "data pertence ao payload e deve ser uma fun\u00e7\u00e3o que retorna uma promise."}, {"7464": "Utilizando o redux-actions, voc\u00ea pode criar essas actions de forma simples e r\u00e1pida:"}, {"f3c7": "const githubFetching = createAction('GITHUB_FETCHING')const githubError    = createAction('GITHUB_ERROR')const githubSuccess  = createAction('GITHUB_SUCCESS')"}, {"80bc": "Em seu componente, voc\u00ea faria apenas uma chamada:"}, {"d559": "dispatch(getUserFromGithub('arojunior'))"}, {"6a49": "O Middleware chamar\u00e1 a fetching antes de iniciar o processo, success quando concluir ou error caso ocorra algum problema."}, {"66ef": "Com a ajuda do redux-actions, n\u00e3o \u00e9 preciso especificar o tratamento do payload\u2026 Ele passar\u00e1 automaticamente para o reducer quando chamar o m\u00e9todo success. Segue exemplo:"}, {"2871": "export default (state = initialState, action) => {  switch (action.type) {    case 'GITHUB_FETCHING':      return {...state,              fetching     : true              }    case 'GITHUB_SUCCESS':      return {...state,              fetching     : false,              user         : action.payload.data              }    case 'GITHUB_ERROR':      return {...state,              fetching       : false            }    default:      return state  }}"}, {"ce02": "Caso voc\u00ea n\u00e3o queira ficar preso a este padr\u00e3o, voc\u00ea pode utilizar outro Middleware que eu escrevi: https://github.com/arojunior/redux-middleware-injector (este lhe dar\u00e1 liberdade para escrever as actions da forma que voc\u00ea preferir)"}, {"00c0": "Fiquem a vontade para comentar cr\u00edticas/elogios/sugest\u00f5es. Lembrando que recomenda\u00e7\u00f5es aqui e estrelas no Github sempre ajudam a incentivar a comunidade a colaborar.\u00a0:)"}], "content": "Consumindo API com Redux de forma\u00a0elegante Como voc\u00ea faz para consumir API's com Redux? Na documenta\u00e7\u00e3o oficial s\u00e3o referenciados Middlewares como redux-thunk e redux-promise, assim como na maioria dos exemplos de tutoriais sobre Redux que a gente encontra espalhados pela internet. Quando falamos em consumir API's, falamos de side-effects. Partindo do princ\u00edpio que actions e reducers devem ser fun\u00e7\u00f5es puras, chegamos a conclus\u00e3o de que o melhor lugar para executar as fun\u00e7\u00f5es n\u00e3o puras (com side-effects / as que fazem fetch) \u00e9 dentro de Middlewares. Seguindo aquelas sugest\u00f5es, teremos coisas como: dispatch({ type: 'FETCHING' }) axios.get('https://api.github.com/users/arojunior')  .then(response => dispatch({type:'SUCCESS', payload: res.data })),  .catch(error => dispatch({type:'FAILURE', error: error})) ou\u2026 const apiServer = 'https://api.github.com/users'const fetchData = axios.get(`${apiServer}/arojunior`) dispatch({ type: 'FETCHING' }) dispatch(fetchData)  .then(response => ({ type: 'SUCCESS', payload: res.data })),  .catch(error => ({ type: 'FAILURE', error: error})) Mas isso n\u00e3o \u00e9 nada elegante, n\u00e9? Um tanto quanto confuso. Sem contar que esse c\u00f3digo acima teria que ficar em algum local com acesso ao dispatch, no caso, dentro de um componente. Voc\u00ea poderia chamar direto o m\u00e9todo que faz fetch na api e apenas retornar quando conclu\u00edsse, mas dessa forma voc\u00ea estaria ignorando o estado 'fetching' e poss\u00edveis erros. Isso tamb\u00e9m n\u00e3o \u00e9 nada legal. O padr\u00e3o \u00e9 termos 3 actions para controle de estado: quando a requisi\u00e7\u00e3o inicia, quando ela conclui com sucesso e outra em caso de erro. Diante deste problema, resolvi escrever um Middleware pra deixar as coisas mais organizadas de modo que eu pudesse colocar todo o meu c\u00f3digo dentro de um action creator e apenas chamasse este m\u00e9todo dentro do componente. Apresento-lhes o https://github.com/arojunior/fetch-middleware Conforme exemplo da documenta\u00e7\u00e3o no Github, este seria o formato da action: type \u00e9 um array com 3 actions creators que devem seguir sempre esta ordem. data pertence ao payload e deve ser uma fun\u00e7\u00e3o que retorna uma promise. Utilizando o redux-actions, voc\u00ea pode criar essas actions de forma simples e r\u00e1pida: const githubFetching = createAction('GITHUB_FETCHING')const githubError    = createAction('GITHUB_ERROR')const githubSuccess  = createAction('GITHUB_SUCCESS') Em seu componente, voc\u00ea faria apenas uma chamada: dispatch(getUserFromGithub('arojunior')) O Middleware chamar\u00e1 a fetching antes de iniciar o processo, success quando concluir ou error caso ocorra algum problema. Com a ajuda do redux-actions, n\u00e3o \u00e9 preciso especificar o tratamento do payload\u2026 Ele passar\u00e1 automaticamente para o reducer quando chamar o m\u00e9todo success. Segue exemplo: export default (state = initialState, action) => {  switch (action.type) {    case 'GITHUB_FETCHING':      return {...state,              fetching     : true              }    case 'GITHUB_SUCCESS':      return {...state,              fetching     : false,              user         : action.payload.data              }    case 'GITHUB_ERROR':      return {...state,              fetching       : false            }    default:      return state  }} Caso voc\u00ea n\u00e3o queira ficar preso a este padr\u00e3o, voc\u00ea pode utilizar outro Middleware que eu escrevi: https://github.com/arojunior/redux-middleware-injector (este lhe dar\u00e1 liberdade para escrever as actions da forma que voc\u00ea preferir) Fiquem a vontade para comentar cr\u00edticas/elogios/sugest\u00f5es. Lembrando que recomenda\u00e7\u00f5es aqui e estrelas no Github sempre ajudam a incentivar a comunidade a colaborar.\u00a0:) ", "child": "1497_1"}