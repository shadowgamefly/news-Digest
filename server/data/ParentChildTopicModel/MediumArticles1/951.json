{"name": "951", "parent": "", "title": "WHY WON\u2019T THIS WORK?! Coding Angry for Fun and\u00a0Profit", "sentences": [{"750e": "WHY WON\u2019T THIS WORK?! Coding Angry for Fun and\u00a0Profit"}, {"8633": "Why Building Apps the Wrong Way can be the Right\u00a0Way"}, {"8531": "Writing good code is hard, but if building something the simplest, easiest way can still be frustrating, what effect does the extra cognitive load of trying to build it the right way have, when you\u2019re just trying to experiment?"}, {"a79e": "I know people who find peace in their code; engineers who find Zen when working on a complex problem. Each new method implemented, bug resolved, and puzzle unravelled is a step on a path that brings order to a chaotic universe, and with it, a sense of harmony, contentment, and happiness."}, {"afb9": "I am not one of those people."}, {"ef73": "I\u2019m not saying I don\u2019t find enjoyment in coding. I\u00a0do."}, {"c716": "The high when you\u2019ve deciphered new APIs and manipulated them into making your device do something it couldn\u2019t before is intoxicating."}, {"5042": "You feel as a God amongst mortals, able to bend the universe to your will. All things are possible."}, {"76d4": "It\u2019s just that until that moment, my emotional state hovers somewhere in the spectrum between white-hot rage and tear-inducing frustration."}, {"9533": "Frustration is one our most common shared experiences"}, {"6760": "Though we engineers don\u2019t often often talk about it with non-engineers. The animation below shows my face after 20 minutes of debugging a problem."}, {"636b": "Twenty minutes of debugging later, it turns out I\u2019d forgotten to call\u00a0.show() after creating a\u00a0Toast."}, {"322a": "I spoke with a colleague recently\u200a\u2014\u200aan experienced engineer new to Android\u200a\u2014\u200awho wanted to write an app to automatically turn on his Internet-connected lights when he got close to his house. He\u2019d done a course on Android, so he was familiar with Android fundamentals."}, {"8655": "He talked a lot about his frustrations."}, {"35e0": "I figured it should take me about an hour to go from nothing to the app he described. Rather than sit down next to him and pair program, I figured I\u2019d record myself writing the code (and cut out the (really) boring bits.)"}, {"3f99": "This screencast shows the easiest, fastest, and wrongest way to build this app. It\u2019s 16 minutes represents about two hours of real-time coding and debugging, and implements everything within a single Activity. There\u2019s a thousand ways in which this implementation is wrong\u200a\u2014\u200aand I spend some time at the end of the video explaining why everything should be done differently."}, {"6c8d": "Developing real apps for mobile is complicated"}, {"dedf": "A lot of people\u200a\u2014\u200amyself included\u200a\u2014\u200aspend a lot of time crafting the perfect code samples, walkthroughs, tutorials, and training, so when new developers are ready to write their first app, they\u2019ve got all the tools they need to architect it correctly, and implement it efficiently."}, {"83f0": "But if you\u2019re trying to get a feel for Android and figure out if an idea is possible, is it worth figuring out and implementing Fragments, Services, and Intent Receivers? Understanding the subtleties of the Activity and app lifecycles?"}, {"8319": "If you want to write a high quality app that users will love and VCs will want to shower money on\u200a\u2014\u200aeventually, the answer will be a resounding yes. BUT, that doesn\u2019t mean you have to learn all that stuff up front."}, {"2fc7": "If you go into it knowing you\u2019re going to start again, it can be fun to write something hacky and kludgy just to have some fun and prove your idea can be done. I think of it as an incentive to learn the hard stuff."}, {"cce2": "As a result of this throw-away work, learn something very valuable\u200a\u2014\u200ait\u2019s possible to do what we want: automatically turn on our Internet-connected lights when we get close to home."}, {"1ef5": "Which. Let\u2019s face it. Is pretty damn\u00a0cool."}, {"f14f": "When I want to learn how to code using a new platform, API, or framework, I\u2019ll start by experimenting, trying, and failing, until I make headway or get bored."}, {"a6f5": "On Day One, I just want to download the SDK, fire-up an IDE, and experiment."}, {"5f11": "I\u2019ll invest a few hours getting a feel for how things work without worrying much about the right way to do it. That\u2019ll produce something ugly, buggy, poorly architected, and totally unscalable\u200a\u2014\u200abut workable as a prototype."}, {"f306": "Note that the getting started experience is critical here. If I spend those first few hours installing and configuring my development environment I may stop before I even start."}, {"1c07": "I\u2019ll start by seeing what\u2019s possible using my intuition\u200a\u2014\u200athe same way I learn how to use new electronics. And I\u2019ll use Stack Overflow, because, I mean, seriously, let\u2019s be real."}, {"709a": "Of course, much like with my new electronics, eventually I may read a manual or a book, do a course, watch a video, or review a sample\u200a\u2014\u200abut that\u2019s never where I start (which is more than a little ironic given how much time I spend creating those things for other developers.)"}, {"3e4e": "There\u2019s an art to building apps that delight\u00a0users"}, {"02b6": "But when it comes to just making something work, it feels like coding should be predictable. A mobile app, at its root, is just manipulating transistors that let you create AND, OR, and NOT gates, that in turn can be used to create more complex logic\u200a\u2014\u200awe\u2019re really just dealing with logic circuits, which when you boil it down, is just a series of trues and falses."}, {"2d5f": "These basic building blocks are used to construct increasingly complex APIs, frameworks, and platforms\u200a\u2014\u200awhich are in turn used to create increasingly feature-rich apps for users. Each step along this path effectively encapsulates best-practice implementation details, so we we don\u2019t have to start every project defining an object, creating a linked list, and writing a quicksort algorithm."}, {"17f4": "We can conceptually translate incredibly complex systems into simple state machines"}, {"71d3": "I can take a video on my phone with a few swipes and touches, and start watching it on my TV with a few more. When you stop to think about the number of interacting systems it requires (electricity, power distribution, digital-analog conversion, video recording, video broadcasting, LCD display, Chromecast,\u00a0\u2026)\u200a\u2014\u200alet alone how each of those systems works down to the physical layer (not to mention the complex decision process by which I decided on which video to watch, and the intricate and protracted negotiations with my wife to determine a mutually agreed-upon selection), it quickly becomes a fractal of complexity and intimidation."}, {"229b": "As engineers, the difficulty, frustration, and ultimately the thrill of victory comes from unraveling the complications caused by multiple layers of abstraction within our code, the interaction between those components, and the way those systems are experienced by the end\u00a0user."}, {"418d": "To effectively write and (especially) debug code, you need to keep significant parts\u200a\u2014\u200aif not all\u200a\u2014\u200aof the system in your head. That means everything from the high-level architecture of how the pieces fit together, to how each of those pieces works\u200a\u2014\u200aat times, all the way down to the physical layer."}, {"b6f6": "The frustration comes from being pulled down the\u00a0stack"}, {"9c96": "We\u2019re constantly switching contexts between \u201cbig picture\u201d conceptualizations of how the system as a whole should work, and the excruciating detail of how each of its parts are implemented."}, {"c206": "Typical flowchart of debugging code that really should already\u00a0work"}, {"98ff": "Say you\u2019re incorporating Wi-Fi and Bluetooth signals into a self-learning system to trigger a geofence more efficiently. When it doesn\u2019t work, the problem could be anything from a misunderstanding of how the Bluetooth APIs work, to mis-reading your Bluetooth signals, or forgetting to call\u00a0.show() on the toast you\u2019re using to test if it\u2019s working."}, {"67aa": "Minimize the depth and complexity of your problem\u00a0stack"}, {"4604": "To lower my frustration\u200a\u2014\u200aand maximize my enjoyment\u200a\u2014\u200aI try to keep the scope of what I\u2019m working on at any given time as small as possible. Once that\u2019s working, I\u2019ll take a step back and add more complexity, iterating quickly so that there\u2019s a tight loop between solving a difficult problem and having a better version of my working app"}, {"54de": "In practice, that looks a little like this."}, {"f4dc": "Each peak represents potential energy I can store, then expend while grinding through the coding and debugging tasks. The same general principle underpins most agile methodologies: Iterate quickly and stay flexible."}, {"3b69": "Take advantage of those highs as motivation for when you will throw your prototype away and build your app again, this time in a way that\u2019s more robust, well-designed, and scalable."}, {"c847": "Writing good apps is\u00a0hard"}, {"29d6": "Sadly, there\u2019s no easy way to write apps. Whether you choose to build it the right way from scratch, or start with something crude and gradually refine it with each new iteration, you\u2019ll eventually need to solve the same problems, and undergo many of the same frustrations."}, {"ae0b": "Those frustrations are the price you pay for the moments of triumph\u200a\u2014\u200athat incomparable feeling when you\u2019ve manipulated a bunch of zeroes and ones into something that\u2019s at once both inevitable and magical."}, {"19dd": "The secret to a long and happy career, is finding an approach that works for you\u200a\u2014\u200aa technique that will let you bask in the sunlight of those highs more often than you spend in the dark depths of the lows."}, {"65ce": "For me, that means the right way to build an App is by starting the wrong way."}, {"3dbf": "Are you a happy coder? What\u2019s your approach to starting a new project?"}, {"c6d3": "The video within this post is a prototype of a new series where I\u2019ll screencast myself going through the process of updating an old (circa 2011) location-based app to take advantage of all the new Android features. You\u2019ll see me make mistakes, debug them, and make more mistakes. More on this later."}], "content": "WHY WON\u2019T THIS WORK?! Coding Angry for Fun and\u00a0Profit Why Building Apps the Wrong Way can be the Right\u00a0Way Writing good code is hard, but if building something the simplest, easiest way can still be frustrating, what effect does the extra cognitive load of trying to build it the right way have, when you\u2019re just trying to experiment? I know people who find peace in their code; engineers who find Zen when working on a complex problem. Each new method implemented, bug resolved, and puzzle unravelled is a step on a path that brings order to a chaotic universe, and with it, a sense of harmony, contentment, and happiness. I am not one of those people. I\u2019m not saying I don\u2019t find enjoyment in coding. I\u00a0do. The high when you\u2019ve deciphered new APIs and manipulated them into making your device do something it couldn\u2019t before is intoxicating. You feel as a God amongst mortals, able to bend the universe to your will. All things are possible. It\u2019s just that until that moment, my emotional state hovers somewhere in the spectrum between white-hot rage and tear-inducing frustration. Frustration is one our most common shared experiences Though we engineers don\u2019t often often talk about it with non-engineers. The animation below shows my face after 20 minutes of debugging a problem. Twenty minutes of debugging later, it turns out I\u2019d forgotten to call\u00a0.show() after creating a\u00a0Toast. I spoke with a colleague recently\u200a\u2014\u200aan experienced engineer new to Android\u200a\u2014\u200awho wanted to write an app to automatically turn on his Internet-connected lights when he got close to his house. He\u2019d done a course on Android, so he was familiar with Android fundamentals. He talked a lot about his frustrations. I figured it should take me about an hour to go from nothing to the app he described. Rather than sit down next to him and pair program, I figured I\u2019d record myself writing the code (and cut out the (really) boring bits.) This screencast shows the easiest, fastest, and wrongest way to build this app. It\u2019s 16 minutes represents about two hours of real-time coding and debugging, and implements everything within a single Activity. There\u2019s a thousand ways in which this implementation is wrong\u200a\u2014\u200aand I spend some time at the end of the video explaining why everything should be done differently. Developing real apps for mobile is complicated A lot of people\u200a\u2014\u200amyself included\u200a\u2014\u200aspend a lot of time crafting the perfect code samples, walkthroughs, tutorials, and training, so when new developers are ready to write their first app, they\u2019ve got all the tools they need to architect it correctly, and implement it efficiently. But if you\u2019re trying to get a feel for Android and figure out if an idea is possible, is it worth figuring out and implementing Fragments, Services, and Intent Receivers? Understanding the subtleties of the Activity and app lifecycles? If you want to write a high quality app that users will love and VCs will want to shower money on\u200a\u2014\u200aeventually, the answer will be a resounding yes. BUT, that doesn\u2019t mean you have to learn all that stuff up front. If you go into it knowing you\u2019re going to start again, it can be fun to write something hacky and kludgy just to have some fun and prove your idea can be done. I think of it as an incentive to learn the hard stuff. As a result of this throw-away work, learn something very valuable\u200a\u2014\u200ait\u2019s possible to do what we want: automatically turn on our Internet-connected lights when we get close to home. Which. Let\u2019s face it. Is pretty damn\u00a0cool. When I want to learn how to code using a new platform, API, or framework, I\u2019ll start by experimenting, trying, and failing, until I make headway or get bored. On Day One, I just want to download the SDK, fire-up an IDE, and experiment. I\u2019ll invest a few hours getting a feel for how things work without worrying much about the right way to do it. That\u2019ll produce something ugly, buggy, poorly architected, and totally unscalable\u200a\u2014\u200abut workable as a prototype. Note that the getting started experience is critical here. If I spend those first few hours installing and configuring my development environment I may stop before I even start. I\u2019ll start by seeing what\u2019s possible using my intuition\u200a\u2014\u200athe same way I learn how to use new electronics. And I\u2019ll use Stack Overflow, because, I mean, seriously, let\u2019s be real. Of course, much like with my new electronics, eventually I may read a manual or a book, do a course, watch a video, or review a sample\u200a\u2014\u200abut that\u2019s never where I start (which is more than a little ironic given how much time I spend creating those things for other developers.) There\u2019s an art to building apps that delight\u00a0users But when it comes to just making something work, it feels like coding should be predictable. A mobile app, at its root, is just manipulating transistors that let you create AND, OR, and NOT gates, that in turn can be used to create more complex logic\u200a\u2014\u200awe\u2019re really just dealing with logic circuits, which when you boil it down, is just a series of trues and falses. These basic building blocks are used to construct increasingly complex APIs, frameworks, and platforms\u200a\u2014\u200awhich are in turn used to create increasingly feature-rich apps for users. Each step along this path effectively encapsulates best-practice implementation details, so we we don\u2019t have to start every project defining an object, creating a linked list, and writing a quicksort algorithm. We can conceptually translate incredibly complex systems into simple state machines I can take a video on my phone with a few swipes and touches, and start watching it on my TV with a few more. When you stop to think about the number of interacting systems it requires (electricity, power distribution, digital-analog conversion, video recording, video broadcasting, LCD display, Chromecast,\u00a0\u2026)\u200a\u2014\u200alet alone how each of those systems works down to the physical layer (not to mention the complex decision process by which I decided on which video to watch, and the intricate and protracted negotiations with my wife to determine a mutually agreed-upon selection), it quickly becomes a fractal of complexity and intimidation. As engineers, the difficulty, frustration, and ultimately the thrill of victory comes from unraveling the complications caused by multiple layers of abstraction within our code, the interaction between those components, and the way those systems are experienced by the end\u00a0user. To effectively write and (especially) debug code, you need to keep significant parts\u200a\u2014\u200aif not all\u200a\u2014\u200aof the system in your head. That means everything from the high-level architecture of how the pieces fit together, to how each of those pieces works\u200a\u2014\u200aat times, all the way down to the physical layer. The frustration comes from being pulled down the\u00a0stack We\u2019re constantly switching contexts between \u201cbig picture\u201d conceptualizations of how the system as a whole should work, and the excruciating detail of how each of its parts are implemented. Typical flowchart of debugging code that really should already\u00a0work Say you\u2019re incorporating Wi-Fi and Bluetooth signals into a self-learning system to trigger a geofence more efficiently. When it doesn\u2019t work, the problem could be anything from a misunderstanding of how the Bluetooth APIs work, to mis-reading your Bluetooth signals, or forgetting to call\u00a0.show() on the toast you\u2019re using to test if it\u2019s working. Minimize the depth and complexity of your problem\u00a0stack To lower my frustration\u200a\u2014\u200aand maximize my enjoyment\u200a\u2014\u200aI try to keep the scope of what I\u2019m working on at any given time as small as possible. Once that\u2019s working, I\u2019ll take a step back and add more complexity, iterating quickly so that there\u2019s a tight loop between solving a difficult problem and having a better version of my working app In practice, that looks a little like this. Each peak represents potential energy I can store, then expend while grinding through the coding and debugging tasks. The same general principle underpins most agile methodologies: Iterate quickly and stay flexible. Take advantage of those highs as motivation for when you will throw your prototype away and build your app again, this time in a way that\u2019s more robust, well-designed, and scalable. Writing good apps is\u00a0hard Sadly, there\u2019s no easy way to write apps. Whether you choose to build it the right way from scratch, or start with something crude and gradually refine it with each new iteration, you\u2019ll eventually need to solve the same problems, and undergo many of the same frustrations. Those frustrations are the price you pay for the moments of triumph\u200a\u2014\u200athat incomparable feeling when you\u2019ve manipulated a bunch of zeroes and ones into something that\u2019s at once both inevitable and magical. The secret to a long and happy career, is finding an approach that works for you\u200a\u2014\u200aa technique that will let you bask in the sunlight of those highs more often than you spend in the dark depths of the lows. For me, that means the right way to build an App is by starting the wrong way. Are you a happy coder? What\u2019s your approach to starting a new project? The video within this post is a prototype of a new series where I\u2019ll screencast myself going through the process of updating an old (circa 2011) location-based app to take advantage of all the new Android features. You\u2019ll see me make mistakes, debug them, and make more mistakes. More on this later. ", "child": "951_1\t951_2\t951_3\t951_4\t951_5\t951_6\t951_7\t951_8\t951_9\t951_10\t951_11\t951_12\t951_13\t951_14\t951_15\t951_16\t951_17\t951_18\t951_19\t951_20\t951_21"}