{"child": "", "title": "", "id": "58bb6d000a64", "content": "First off, love the response! Definitely a cool trick, but I prefer to use props whenever a child component needs something from a parent component, unless it is DOM content, in that case I\u2019d use slots. Here\u2019s a few reasons why: Prop validation\u200a\u2014\u200avalidate the expression used is a function and provide useful errors if it is not.Default values\u200a\u2014\u200ausing props allows you to easily set default prop values for when nothing is sent in.Simpler reasoning, especially the more complex your components get. This is how I have to mentally reason with using emitters: Parent component listens for event from child componentChild component is clickedChild component emits click event to parentParent component calls function This is how I mentally reason with using props: Parent component passes function to child componentChild component is clickedChild component calls function This doesn\u2019t seem like a huge deal when using a single component, but starts to get a bit complicated when using higher-order components (components that consume other components). For example: We have a Dialog component that contains 2 of our Button components. We want to pass in a custom \u201ccancel\u201d and \u201cconfirm\u201d function into our dialog for our Buttons to use. We can easily pass those into our Dialog component as props: <v-dialog\u00a0:onCancel=\"cancelFn\" onConfirm=\"confirmFn\"></v-dialog> The dialog component will then pass these functions into their own Button component. Prop validation and defaults could be useful for a dialog component. Trying to pass functions down from a component to it\u2019s grand-child or its great-grand child is a bit convoluted using event emitters. Hope this makes sense and gives you some insight on why I choose to use props to pass functions from parent to child components! ", "creatorid": "c194ff39a976", "name": "1998_12", "parent": "1998"}