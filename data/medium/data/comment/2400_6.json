{"id": "bd31840db278", "child": "", "parent": "2400", "title": "", "creatorid": "c359511de780", "content": "That depends on what you mean by \u201cframework\u201d. By some definitions, a framework is a library that defines a structure, and you fill in the details. That\u2019s pretty much exactly what React does, but only for the view layer of the app. Another hallmark of a framework is Inversion of Control (IoC). Don\u2019t call us. We\u2019ll call you. Again, React seems to satisfy that definition of Framework, because we don\u2019t call React methods to do stuff\u200a\u2014\u200aReact calls the methods we create to do stuff. They define lifecycle methods, we fill in the details, and React calls our methods\u200a\u2014\u200anot the other way around. We don\u2019t even instantiate the views that are the building blocks of our app: React does. So what\u2019s the final hallmark of the word \u201cframework\u201d, and the only one React doesn\u2019t completely satisfy? Some frameworks (Ember, Ruby on Rails, Angular) try to solve most of the big problems encountered by an application. So there might be a model layer, a controller layer, a dependency injection container, maybe a networking layer. In this sense, and only this sense, React behaves more like a library, because it only concentrates on the view piece, and doesn\u2019t try to prescribe everything. ", "name": "2400_6"}