{"child": "", "title": "", "id": "b3f87cea5622", "content": "Composants de pr\u00e9sentation et conteneurs Lien vers l\u2019article original\u00a0: https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.flsaax995 Bismuth Il existe un mod\u00e8le de conception simple que je trouve tr\u00e8s utile quand il s\u2019agit d\u2019\u00e9crire des applications React. Si vous utilisez React depuis un moment, vous l\u2019avez d\u00e9j\u00e0 probablement d\u00e9couvert. Cet article l\u2019explique bien mais je veux ajouter quelques points suppl\u00e9mentaires. Vous trouverez vos composants plus facile \u00e0 r\u00e9utiliser et \u00e0 conceptualiser si vous les classez en deux cat\u00e9gories. Je les appelle composants de Pr\u00e9sentation et Conteneur* mais j\u2019ai aussi entendu Gros et Maigre, Intelligent et Idiot, Stateful et Pur, \u00c9crans et Composants, etc\u2026 Ce n\u2019est pas exactement la m\u00eame chose mais l\u2019id\u00e9e de base est la m\u00eame. Mes composants de pr\u00e9sentation\u00a0: s\u2019int\u00e9ressent \u00e0 quoi les choses ressemblent,peuvent contenir \u00e0 la fois des composants de pr\u00e9sentation et des conteneurs** et, g\u00e9n\u00e9ralement, poss\u00e8dent des balises DOM et des styles qui leur sont propres,offrent souvent de l\u2019int\u00e9gration via this.props.children,sont ind\u00e9pendants du reste de l\u2019application comme les actions Flux ou le stockage,ne sp\u00e9cifient pas comment les donn\u00e9es sont charg\u00e9es ou modifi\u00e9es,re\u00e7oivent des donn\u00e9es et des fonction de rappel exclusivement par props,ont rarement leur propre \u00e9tat (quand c\u2019est le cas, il s\u2019agit d\u2019un \u00e9tat d\u2019interface plut\u00f4t que de donn\u00e9es),sont \u00e9crits en tant que composants fonctionnels \u00e0 moins qu\u2019ils ne n\u00e9cessitent un \u00e9tat, des actions lors d\u2019un cycle de vie ou des optimisations de performances.Exemples\u00a0: Page, Sidebar, Story, UserInfo, List Mes composants conteneurs\u00a0: se pr\u00e9occupent de comment les choses fonctionnent,peuvent contenir \u00e0 la fois des composants de pr\u00e9sentations et conteneurs** mais ne poss\u00e8dent g\u00e9n\u00e9ralement pas de balises DOM propres \u00e0 l\u2019exception des balises div qui les entourent, et ils n\u2019ont jamais de styles,fournissent les donn\u00e9es et le comportement aux composants de pr\u00e9sentation ou aux autres composants de contenu,appellent des actions Flux et les fournissent aux composants idiots en tant que callbacks,sont souvent d\u2019\u00e9tat car ils tendent \u00e0 servir de source de donn\u00e9es,sont habituellement g\u00e9n\u00e9r\u00e9s en utilisant des composants de plus haut niveau comme connect() de React Redux, createContainer() de Relay ou Container.create() de Flux Utils plut\u00f4t qu\u2019\u00e9crits \u00e0 la main.Exemples\u00a0: UserPage, FollowersSidebar, StoryContainer, FollowedUserList Je les mets dans des r\u00e9pertoires diff\u00e9rents pour en faire une distinction claire. B\u00e9n\u00e9fices de cette\u00a0approche Une meilleure s\u00e9paration des probl\u00e8mes. Vous comprenez mieux votre application et votre interface en \u00e9crivant les composants de cette mani\u00e8re.Une meilleure r\u00e9utilisabilit\u00e9. Vous pouvez utiliser le m\u00eame composant de pr\u00e9sentation avec des sources de donn\u00e9es compl\u00e8tement diff\u00e9rentes, et transformer celles-ci en diff\u00e9rents composants de contenus pouvant \u00eatre r\u00e9utilis\u00e9s ult\u00e9rieurement.Les composants de pr\u00e9sentation sont essentiellement la \u201cpalette\u201d de votre app. Vous pouvez les mettre sur une simple page et laisser le designer y apporter ses variations sans toucher \u00e0 la logique de l\u2019application. Vous pouvez lancer des tests de r\u00e9gression \u00e0 base de copies d\u2019\u00e9crans sur cette page.Cela vous force \u00e0 extraire les composants de mise en page tels que SideBar, Page, ContextMenu et utiliser this.props.children au lieu de dupliquer les m\u00eames balises et mise en page sur plusieurs composants conteneurs. Souvenez vous, les composants n\u2019ont pas \u00e0 \u00e9mettre du DOM. Ils ont seulement besoin de fournir les limites de compositions entre les UI concern\u00e9es. Tirez profit de \u00e7a. Quand introduire des conteneurs\u00a0? Je vous sugg\u00e8re de commencer par construire votre application juste avec des composants de pr\u00e9sentation. Vous allez bient\u00f4t r\u00e9aliser que vous passez trop de props \u00e0 travers les composants interm\u00e9diaires. Quand vous remarquez que certains composants n\u2019utilisent pas les props qu\u2019ils re\u00e7oivent mais les font suivre simplement en dessous et que vous devez refaire tous ces composants interm\u00e9diaires chaque fois qu\u2019un composant enfant \u00e0 besoin de plus de donn\u00e9es, c\u2019est le bon moment pour introduire quelques composants conteneurs. De cette mani\u00e8re vous pourrez obtenir les props de donn\u00e9es et de comportements depuis les composants feuilles sans toucher aux composants qui n\u2019ont rien \u00e0 voir. C\u2019est un processus continu de refactorisation donc n\u2019essayez pas d\u2019atteindre la perfection d\u00e8s la premi\u00e8re tentative. En appliquant ce mod\u00e8le vous d\u00e9velopperez un instinct pour identifier quand extraire certains conteneurs, tout comme vous savez rep\u00e9rer quand abstraire un traitement en fonction. Ma s\u00e9rie d\u2019article gratuits \u00e0 propos de Redux sur Egghead peut aussi vous aidez \u00e0 \u00e7a\u00a0! Autres dichotomies Il est important de comprendre que la distinction entre les composants de pr\u00e9sentation et les conteneurs n\u2019est pas technique. Il s\u2019agit plut\u00f4t de distinguer leur fonction. En revanche, voici quelques distinctions techniques reli\u00e9es (mais diff\u00e9rentes\u00a0!)\u00a0: Stateful et Stateless. Certains composants utilisent la m\u00e9thode setState() de React et d\u2019autres non. Vu que les composants conteneurs tendent \u00e0 \u00eatre stateful et que les composants de pr\u00e9sentation stateless, ce n\u2019est pas une r\u00e8gle difficile. Les composants de pr\u00e9sentation peuvent \u00eatre stateful et les conteneurs peuvent \u00eatre stateless aussi.Classes et Fonctions. Depuis React 0.14, les composants peuvent \u00eatre \u00e0 la fois d\u00e9clar\u00e9s en classes et en fonctions. Les composants fonctionnels sont plus simples \u00e0 d\u00e9finir mais il leur manque certaines fonctionnalit\u00e9s disponibles seulement avec les composants de classes. Certaines de ces restrictions pourront dispara\u00eetre dans le futur mais elles existent aujourd\u2019hui. Parce que les composants fonctionnels sont plus simples \u00e0 comprendre, je vous sugg\u00e8re de les utiliser \u00e0 moins que vous ayez besoin de sp\u00e9cifier un \u00e9tat, d\u2019intervenir sur le cycle de vie ou faire de l\u2019optimisation de performance, ce qui n\u2019est disponible que dans les composants de classes pour le moment.Pur et Impur. Les gens disent qu\u2019un composant est pur s\u2019il garantit de retourner le m\u00eame r\u00e9sultat en ayant les m\u00eames props et le m\u00eame \u00e9tat. Les composants purs peuvent \u00eatre d\u00e9finis \u00e0 la fois comme des classes ou des fonctions, et peuvent \u00eatre stateful ou stateless. Un autre aspect important des composants purs c\u2019est qu\u2019ils ne reposent pas sur des changements profonds dans les props ou l\u2019\u00e9tat, aussi leur performance de rendu peut \u00eatre optimis\u00e9e par une comparaison superficielle dans le hook shouldComponentUpdate(). Actuellement, seules les classes peuvent d\u00e9finir shouldComponentUpdate() mais cela pourrait changer \u00e0 l\u2019avenir. Les composants de pr\u00e9sentation et les conteneurs peuvent tomber dans l\u2019une ou l\u2019autre de ces cat\u00e9gories. Selon mon exp\u00e9rience, les composants de pr\u00e9sentation ont tendance \u00e0 \u00eatre des fonctions pures et sans \u00e9tat, et les conteneurs des classes pures et avec un \u00e9tat. Toutefois c\u2019est juste une observation et non une r\u00e8gle, et j\u2019ai vu des situations o\u00f9 le contraire \u00e9tait adapt\u00e9. Ne suivez pas la s\u00e9paration des composants de pr\u00e9sentation et les conteneurs comme un dogme. Parfois cela n\u2019a pas d\u2019importance ou bien il est difficile de dessiner la ligne de s\u00e9paration. Si vous ne savez pas si un composant sp\u00e9cifique doit \u00eatre de pr\u00e9sentation ou conteneur, il est peut-\u00eatre trop t\u00f4t pour d\u00e9cider. Ne vous faites pas suer. Exemple Ce gist par Michael Chan l\u2019illustre tr\u00e8s bien. Lectures compl\u00e9mentaires Getting Started with ReduxMixins are Dead, Long Live CompositionContainer ComponentsAtomic Web DesignBuilding the Facebook News Feed with Relay Notes * Dans une pr\u00e9c\u00e9dente version de cet article je les ai appel\u00e9s \u201cintelligent\u201d et \u201cidiot\u201d mais c\u2019\u00e9tait excessivement s\u00e9v\u00e8re pour les composants de pr\u00e9sentation et plus important encore, cela n\u2019expliquait pas vraiment la diff\u00e9rence de leurs objectifs. Je pr\u00e9f\u00e8re les nouveaux termes et j\u2019esp\u00e8re que vous aussi\u00a0! ** Dans une pr\u00e9c\u00e9dente version de cet article, j\u2019ai affirm\u00e9 que les composants de pr\u00e9sentation ne devaient contenir que d\u2019autres composants de pr\u00e9sentation. Je ne pense plus que ce soit le cas. Qu\u2019un composant soit de pr\u00e9sentation ou un conteneur n\u2019est qu\u2019un d\u00e9tail d\u2019impl\u00e9mentation. Vous devez \u00eatre capable de substituer un composant de pr\u00e9sentation par un conteneur sans modifier aucun appel. Par cons\u00e9quent, les composants de pr\u00e9sentation ou les conteneurs peuvent contenir d\u2019autre composants de pr\u00e9sentation ou conteneur sans probl\u00e8me. Traduction\u00a0: Brice Favre Relecteurs\u00a0: Frank Taillandier et Goulven Champenois ", "creatorid": "5fc528d86144", "name": "1996_25", "parent": "1996"}