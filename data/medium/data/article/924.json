{"name": "924", "parent": "", "content": "How to build your own real-time chat\u00a0app Messaging apps are surging in popularity. The past few years have brought apps like WhatsApp, Telegram, Signal, and Line. People seem to prefer chat-based applications because they allow for real-time interaction. They also add a personal touch to the experience. I recently attended a workshop conducted by the Free Software Movement Karnataka in Bangalore where I mentored a group of college students. During the interactions, I observed certain things: So we had to find a solution to break the ice between mentors and students. A local chat application came handy in this situation. People love to be anonymous, which gives them more power to express themselves and ask anytime anywhere. This is the same mantra used by most of the popular forums on the internet, such as Reddit and 4chan. These are just a few giant examples of semi-anonymous apps. So I started thinking about this idea. I came up with some of the basic requirements and features. Technology, Tools\u00a0used So how do you create a simple chat application? In this tutorial, I\u2019m going to help you create your own chat application. You can later integrate as a widget into any project! This tutorial won\u2019t concentrate on the complete development of a chat application. But it will help you build one. Pre-requisite\u00a0: You need to know some basic knowledge of MEAN Stack, as we are making use of it to build one. First, create a directory structure something like this. Directory structure of the\u00a0project Install Node.js and MongoDB. We\u2019ll be making use of AngularJS 1 for this tutorial. Download the AngularJS library from here and copy it to the lib folder in Client directory. If you like to beautify the application you can download any CSS libraries and copy them to lib as well. Building the\u00a0Server Step 1\u200a\u2014\u200aStart the project\u00a0: Go to Server directory and run this command: npm init This will start a new project. Provide all the details required. The package.json will be created and will look something like this. {  \"name\": \"chat\",  \"version\": \"1.0.0\",  \"description\": \"Chat application\",  \"main\": \"server.js\",  \"scripts\": {    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"  },  \"author\": \"Your name\",  \"license\": \"ISC\"} Step 2\u200a\u2014\u200aInstall the dependencies. npm install --save socket.ionpm install --save express This will install required dependencies and add those to package.json. An extra field will be added to package.json which will look like this: \"dependencies\": {    \"express\": \"^4.14.0\",    \"socket.io\": \"^1.4.8\"  } Step 3\u200a\u2014\u200aCreating the Server Create a server which serves at port 3000 and will send the html when called. Initialize a new socket connection by passing HTTP object. Event connection will be listening for incoming sockets. Each socket emits disconnect event which will be called whenever a client disconnects. The syntax is: socket.on('event', function(msg){})io.emit('event', 'message') Create a server with name server.js. It should: The server will look something like this: var app = require('express')();var http = require('http').Server(app);var io = require('socket.io')(http); app.get('/', function(req, res){  res.sendfile('index.html');}); io.on('connection', function(socket){  console.log('user connected');  socket.on('chat message', function(msg){    io.emit('chat message', msg);  });  socket.on('disconnect', function(){    console.log('user disconnected');  });}); http.listen(3000, function(){  console.log('listening on *:3000');}); Building the\u00a0Client Create the index.html in the client directory, style.css in the css directory and app.js in js directory in the client. index.html: Let us write a simple HTML which can take our message and also display it. Include socket.io-client and angular.js in your HTML script. <script src=\"/path/to/angular.js\"></script><script src=\"/socket.io/socket.io.js\"></script> socket.io serves the client for us. It defaults to connect to the host that serves the page. Final HTML looks something like this: <!doctype html><html ng-app=\"myApp\">  <head>    <title>Socket.IO chat</title>    <link rel=\"stylesheet\" href=\"/css/style.css\">    <script src=\"/lib/angular/angular.js\"></script>    <script src=\"/socket.io/socket.io.js\"></script>    <script src=\"http://code.jquery.com/jquery-1.11.1.js\">    </script>    <script src=\"/js/app.js\"></script>  </head>  <body ng-controller=\"mainController\">    <ul id=\"messages\"></ul>    <div>      <input id=\"m\" ng-model=\"message\" autocomplete=\"off\" />      <button ng-click=\"send()\">Send</button>    </div>  </body></html> css/style.css: Give it some styling so that it looks like a chatbox. You can make use of any libraries. * { margin: 0; padding: 0; box-sizing: border-box; }body { font: 13px Helvetica, Arial; }div { background: #000; padding: 3px; position: fixed; bottom: 0; width: 100%; }div input { border: 0; padding: 10px; width: 90%; margin-right: .5%; }div button { width: 9%; background: rgb(130, 224, 255); border: none; padding: 10px; }#messages { list-style-type: none; margin: 0; padding: 0; }#messages li { padding: 5px 10px; }#messages li:nth-child(odd) { background: #eee; } js/app.js: Create an angular.js app and initialize a socket connection. Basic syntax of both are: socket.on(\u2018event name\u2019, function(msg){});socket.emit('event name', message); So whenever the message is typed and the button is clicked, call the function to send the message. Whenever the socket receives a message, display it. The JavaScript will look something like this: var app=angular.module('myApp',[]); app.controller('mainController',['$scope',function($scope){ var socket = io.connect(); $scope.send = function(){  socket.emit('chat message', $scope.message);  $scope.message=\"\"; } socket.on('chat message', function(msg){  var li=document.createElement(\"li\");  li.appendChild(document.createTextNode(msg));  document.getElementById(\"messages\").appendChild(li); });}]); Running the application Go to server directory where our server is present. Run the server using the following command: node server.js The server starts running on port 3000. Go to the browser and type the following url: http://localhost:3000 How to improve the same application You can design a database to save user details and messages. It would be good if the design was scalable so that you could add more features later. You need to install Mongoose or a MongoDB module to make use of a Mongo database: npm install --save mongoose or: npm install --save mongodb Here\u2019s the documentation to use mongoose and the mongodb module. Here\u2019s what my schema design looks like: { \u201c_id\u201d : ObjectId(\u201c5809171b71e640556be904ef\u201d), \u201cname\u201d : \u201cSudheesh Shetty\u201d, \u201chandle\u201d : \u201csudheesh\u201d, \u201cpassword\u201d : \u201c556624370\u201d, \u201cphone\u201d : \u201c8888888888\u201d, \u201cemail\u201d : \u201csudheeshshetty@gmail.com\u201d, \u201cfriends\u201d : [    {      \u201cname\u201d : \u201cabc\u201d,      \u201cstatus\u201d : \u201cFriend\u201d    },    {      \u201cname\u201d : \u201cxyz\u201d,      \u201cstatus\u201d : \u201cFriend\u201d    } ], \u201c__v\u201d : 0} Here, the status of each member can be: Suppose the member has rejected a chat request. The sender can then send a chat request again. A user can also save the messages by creating an extra collection. Each document will have the message, sender, receiver, and time. So design your database according to your specific needs and how you want to handle messages. 2. Create REST APIs to serve the client. For example, an endpoint that sends a home page, from which users can make other requests. Few of my API endpoints are: app.post(\u2018/register\u2019,function(req,res){}) app.post(\u2018/login\u2019,function(req,res){}) app.post(\u2018/friend_request\u2019,function(req,res){}) app.post(\u2018/friend_request/confirmed\u2019,function(req,res){}) 3. Think of some cool additional features and implement them. I have created a chat application of my own: sudheeshshetty/ChatContribute to Chat development by creating an account on GitHub.github.com Here\u2019s a quick glance at my chat application: Please do look at it, and give it a star at the top right if you like it. There are many ways I could improve this application. If you have any suggestions, send them to me at sudheeshshetty@gmail.com. You can follow me here on click the green heart if you found this helpful so that more people will see this. You can also follow me on GitHub and twitter. ", "title": "How to build your own real-time chat\u00a0app", "sentences": [{"712d": "How to build your own real-time chat\u00a0app"}, {"3c13": "Messaging apps are surging in popularity. The past few years have brought apps like WhatsApp, Telegram, Signal, and Line."}, {"a56d": "People seem to prefer chat-based applications because they allow for real-time interaction. They also add a personal touch to the experience."}, {"591c": "I recently attended a workshop conducted by the Free Software Movement Karnataka in Bangalore where I mentored a group of college students."}, {"03ba": "During the interactions, I observed certain things:"}, {"849e": "So we had to find a solution to break the ice between mentors and students. A local chat application came handy in this situation. People love to be anonymous, which gives them more power to express themselves and ask anytime anywhere. This is the same mantra used by most of the popular forums on the internet, such as Reddit and 4chan. These are just a few giant examples of semi-anonymous apps."}, {"c645": "So I started thinking about this idea. I came up with some of the basic requirements and features."}, {"51f5": "Technology, Tools\u00a0used"}, {"c5fd": "So how do you create a simple chat application?"}, {"513f": "In this tutorial, I\u2019m going to help you create your own chat application. You can later integrate as a widget into any project! This tutorial won\u2019t concentrate on the complete development of a chat application. But it will help you build one."}, {"1bb0": "Pre-requisite\u00a0: You need to know some basic knowledge of MEAN Stack, as we are making use of it to build one."}, {"875c": "First, create a directory structure something like this."}, {"5ff1": "Directory structure of the\u00a0project"}, {"dd85": "Install Node.js and MongoDB."}, {"b2a0": "We\u2019ll be making use of AngularJS 1 for this tutorial. Download the AngularJS library from here and copy it to the lib folder in Client directory."}, {"d5ad": "If you like to beautify the application you can download any CSS libraries and copy them to lib as well."}, {"7641": "Building the\u00a0Server"}, {"dade": "Step 1\u200a\u2014\u200aStart the project\u00a0:"}, {"e221": "Go to Server directory and run this command:"}, {"f60b": "npm init"}, {"6b97": "This will start a new project. Provide all the details required. The package.json will be created and will look something like this."}, {"c12e": "{  \"name\": \"chat\",  \"version\": \"1.0.0\",  \"description\": \"Chat application\",  \"main\": \"server.js\",  \"scripts\": {    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"  },  \"author\": \"Your name\",  \"license\": \"ISC\"}"}, {"0ef8": "Step 2\u200a\u2014\u200aInstall the dependencies."}, {"3ac0": "npm install --save socket.ionpm install --save express"}, {"d970": "This will install required dependencies and add those to package.json. An extra field will be added to package.json which will look like this:"}, {"c723": "\"dependencies\": {    \"express\": \"^4.14.0\",    \"socket.io\": \"^1.4.8\"  }"}, {"4ef4": "Step 3\u200a\u2014\u200aCreating the Server"}, {"ee04": "Create a server which serves at port 3000 and will send the html when called."}, {"d4ab": "Initialize a new socket connection by passing HTTP object."}, {"b4b0": "Event connection will be listening for incoming sockets."}, {"6fbe": "Each socket emits disconnect event which will be called whenever a client disconnects."}, {"126e": "The syntax is:"}, {"f127": "socket.on('event', function(msg){})io.emit('event', 'message')"}, {"08f9": "Create a server with name server.js. It should:"}, {"ca8d": "The server will look something like this:"}, {"f9cf": "var app = require('express')();var http = require('http').Server(app);var io = require('socket.io')(http);"}, {"743b": "app.get('/', function(req, res){  res.sendfile('index.html');});"}, {"2e16": "io.on('connection', function(socket){  console.log('user connected');  socket.on('chat message', function(msg){    io.emit('chat message', msg);  });  socket.on('disconnect', function(){    console.log('user disconnected');  });});"}, {"dc21": "http.listen(3000, function(){  console.log('listening on *:3000');});"}, {"0505": "Building the\u00a0Client"}, {"e556": "Create the index.html in the client directory, style.css in the css directory and app.js in js directory in the client."}, {"29e9": "index.html:"}, {"338c": "Let us write a simple HTML which can take our message and also display it."}, {"9f42": "Include socket.io-client and angular.js in your HTML script."}, {"f96b": "<script src=\"/path/to/angular.js\"></script><script src=\"/socket.io/socket.io.js\"></script>"}, {"9fb6": "socket.io serves the client for us. It defaults to connect to the host that serves the page. Final HTML looks something like this:"}, {"3e3b": "<!doctype html><html ng-app=\"myApp\">  <head>    <title>Socket.IO chat</title>    <link rel=\"stylesheet\" href=\"/css/style.css\">    <script src=\"/lib/angular/angular.js\"></script>    <script src=\"/socket.io/socket.io.js\"></script>    <script src=\"http://code.jquery.com/jquery-1.11.1.js\">    </script>    <script src=\"/js/app.js\"></script>  </head>  <body ng-controller=\"mainController\">    <ul id=\"messages\"></ul>    <div>      <input id=\"m\" ng-model=\"message\" autocomplete=\"off\" />      <button ng-click=\"send()\">Send</button>    </div>  </body></html>"}, {"f630": "css/style.css:"}, {"e4d0": "Give it some styling so that it looks like a chatbox. You can make use of any libraries."}, {"f0c6": "* { margin: 0; padding: 0; box-sizing: border-box; }body { font: 13px Helvetica, Arial; }div { background: #000; padding: 3px; position: fixed; bottom: 0; width: 100%; }div input { border: 0; padding: 10px; width: 90%; margin-right: .5%; }div button { width: 9%; background: rgb(130, 224, 255); border: none; padding: 10px; }#messages { list-style-type: none; margin: 0; padding: 0; }#messages li { padding: 5px 10px; }#messages li:nth-child(odd) { background: #eee; }"}, {"d890": "js/app.js:"}, {"2105": "Create an angular.js app and initialize a socket connection."}, {"88f6": "Basic syntax of both are:"}, {"6b0d": "socket.on(\u2018event name\u2019, function(msg){});socket.emit('event name', message);"}, {"b29f": "So whenever the message is typed and the button is clicked, call the function to send the message."}, {"7589": "Whenever the socket receives a message, display it."}, {"0141": "The JavaScript will look something like this:"}, {"96eb": "var app=angular.module('myApp',[]);"}, {"ab3c": "app.controller('mainController',['$scope',function($scope){ var socket = io.connect(); $scope.send = function(){  socket.emit('chat message', $scope.message);  $scope.message=\"\"; } socket.on('chat message', function(msg){  var li=document.createElement(\"li\");  li.appendChild(document.createTextNode(msg));  document.getElementById(\"messages\").appendChild(li); });}]);"}, {"e33f": "Running the application"}, {"ba92": "Go to server directory where our server is present. Run the server using the following command:"}, {"a0c9": "node server.js"}, {"e5f7": "The server starts running on port 3000. Go to the browser and type the following url:"}, {"43fc": "http://localhost:3000"}, {"1b6d": "How to improve the same application"}, {"3622": "You can design a database to save user details and messages. It would be good if the design was scalable so that you could add more features later."}, {"abf8": "You need to install Mongoose or a MongoDB module to make use of a Mongo database:"}, {"f5fe": "npm install --save mongoose"}, {"d05b": "or:"}, {"236b": "npm install --save mongodb"}, {"208e": "Here\u2019s the documentation to use mongoose and the mongodb module."}, {"40ea": "Here\u2019s what my schema design looks like:"}, {"411e": "{ \u201c_id\u201d : ObjectId(\u201c5809171b71e640556be904ef\u201d), \u201cname\u201d : \u201cSudheesh Shetty\u201d, \u201chandle\u201d : \u201csudheesh\u201d, \u201cpassword\u201d : \u201c556624370\u201d, \u201cphone\u201d : \u201c8888888888\u201d, \u201cemail\u201d : \u201csudheeshshetty@gmail.com\u201d, \u201cfriends\u201d : [    {      \u201cname\u201d : \u201cabc\u201d,      \u201cstatus\u201d : \u201cFriend\u201d    },    {      \u201cname\u201d : \u201cxyz\u201d,      \u201cstatus\u201d : \u201cFriend\u201d    } ], \u201c__v\u201d : 0}"}, {"b769": "Here, the status of each member can be:"}, {"eaaa": "Suppose the member has rejected a chat request. The sender can then send a chat request again. A user can also save the messages by creating an extra collection. Each document will have the message, sender, receiver, and time."}, {"6166": "So design your database according to your specific needs and how you want to handle messages."}, {"55d9": "2. Create REST APIs to serve the client. For example, an endpoint that sends a home page, from which users can make other requests."}, {"4759": "Few of my API endpoints are:"}, {"f7c4": "app.post(\u2018/register\u2019,function(req,res){})"}, {"0ada": "app.post(\u2018/login\u2019,function(req,res){})"}, {"4680": "app.post(\u2018/friend_request\u2019,function(req,res){})"}, {"6dd4": "app.post(\u2018/friend_request/confirmed\u2019,function(req,res){})"}, {"976d": "3. Think of some cool additional features and implement them."}, {"e254": "I have created a chat application of my own:"}, {"bdc7": "sudheeshshetty/ChatContribute to Chat development by creating an account on GitHub.github.com"}, {"7ae1": "Here\u2019s a quick glance at my chat application:"}, {"3113": "Please do look at it, and give it a star at the top right if you like it. There are many ways I could improve this application. If you have any suggestions, send them to me at sudheeshshetty@gmail.com."}, {"cee4": "You can follow me here on click the green heart if you found this helpful so that more people will see this. You can also follow me on GitHub and twitter."}], "child": "924_1"}