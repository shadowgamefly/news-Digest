{"name": "1871", "parent": "", "content": "From Engineer to Manager: keeping your technical skills I became an Engineering Manager over two years ago. One of my main challenges during this time has been to find the balance between my leadership duties towards my team and my desire to keep coding. I figured I must not be the only one struggling with this, so I thought I\u2019d give my two cents. Why engineering managers should be technically competent In my opinion, hands-on, technically competent managers are the best leaders for engineering teams (and the ones who escape the Dilbert Principle most of the time). As a technically competent manager you will: Ok, we agree it is a really good idea to keep and improve your engineering skills. But that doesn\u2019t come without challenges. Coder vs\u00a0Mentor The first challenge you will likely face is the conflict between your engineer self and the mentor self: Your engineer self will want to solve all the interesting technical challenges your team faces. In the other hand, your mentor self should want to give the problems to team members who can use them to improve their skills and become better developers. This problem can be acute in teams with many junior members and a lack of senior engineers to mentor them. In that case, the engineering manager will have to put even more emphasis on the mentorship aspect of her role. Make your team successful Your team and your people come first, before any coding. It\u2019s a necessary condition: If and Only If your team is successful you can dedicate some time to coding. As a manager you are not building a product, you are building a team that knows how to build products. Thus, making your team succesful should be your primary goal and metric to evaluate yourself against. If you lead a successful team of happy engineers, the team\u2019s success will speak by itself and you will need to spend less time in meetings trying to explain or sell your achievements to your peers and superiors. A self-sufficient team of empowered individuals where you are not the decision bottleneck will give you some additional bandwidth to spend doing something else. Your words have more\u00a0weight Another challenge for me was being too vocal or expressing my opinions too strongly when the team was discussing how to tackle technical problems. I was unaware of this problem until a team member let me know during an open feedback session with the whole team. She said something like \u201cYou are too opinionated during our technical discussions\u2026 you should give more room to others\u201d While some managers are indeed very vocal and use power speech, I learned the hard way that it will prevent others from expressing any different/dissenting opinions they might have and you will probably end up with a worse solution to your problem. My advice? Always speak last and ask questions rather than give\u00a0answers I can\u2019t stress enough how important this is. Hands-on managers have to be fully aware that every word they say or write is potentially silencing her team member\u2019s ideas or proposals in some way. James Everingham goes even further and suggests that just by observing, a manager is already changing the outcome of a project in his Quantum Mechanics analogy: The observer effect is real in the workplace, and you can affect the outcome of any project as a manager simply by inserting yourself. Often, a manager will take their team into a room and say, \u201cHere\u2019s what we need to do,\u201d or \u201cHere\u2019s what I\u2019ve been thinking,\u201d or \u201cHere\u2019s one way we can think about this\u2026\u201d as they start sketching on a whiteboard. They\u2019re trying to add value. We always want to add value. But if you\u2019re in any position of authority and you do this, you\u2019ve just limited the number of outcomes and your path to success pretty dramatically. Maker vs\u00a0Manager A more logistical challenge I faced was trying to blend the Maker\u2019s schedule with the Manager\u2019s. In Paul Graham\u2019s words (emphasis added): Most powerful people are on the manager\u2019s schedule. It\u2019s the schedule of command. But there\u2019s another way of using time that\u2019s common among people who make things, like programmers and writers. They generally prefer to use time in units of half a day at least. You can\u2019t write or program well in units of an hour. That\u2019s barely enough time to get started. In short, the fragmented, reactive and meeting-driven schedule of managers simply doesn\u2019t bode well with the concentration coding requires (which is a kind of Deep Work). One could say the characteristics of the manager\u2019s and maker\u2019s schedule are antagonistic: an engineer needs as few distractions as possible while a manager who doesn\u2019t attend meetings or doesn\u2019t interact with other teams can get her reputation penalized for \u201cnot being visible enough\u201d in the organization. Don\u2019t mix the two schedules http://dilbert.com/strip/2012-05-30 Don\u2019t even try. It\u2019s a recipe for feeling frustrated and unproductive. Like water and oil, the best is to keep them in their natural state: separated and independent from each other. I try to separate my schedules with natural interruptions like lunchtime break. Grouping all my meetings back-to-back in the morning, while exhausting mentally, leaves my afternoon free to wear my Maker hat and concentrate in tough programming problems. I try doing so at least twice a week. I found that having an ample lunchtime break, having a walk outside the office if at all possible, is perfect for my mind to disconnect and reset from meetings and come back refreshed to code productively. While wearing your Maker hat you should avoid all possible distractions. To begin with, turn off email. Then, close all the distracting tabs from your browser\u200a\u2014\u200aehem, Facebook, ehem\u200a\u2014\u200aor open a new browser window just to consult the documentation you need. Lastly, I would also turn HipChat/Slack off. Of course you should always leave some communication channel open for urgent issues, for the right people (your team) to reach you if necessary. Being able to be productive and focused depends heavily on the context you are physically and mentally in. By tweaking and adjusting your environment (working from a different desk/place, listening to certain type of music, whatever works for you), you can go a long way to triggering the right mental context to be as productive as you can. You can get many more tricks on how to deal with shallow vs deep work in Cal Newport\u2019s Deep Work. Being the code bottleneck Given your busy schedule you will probably find it difficult to finish any coding tasks in a timely manner, which means you will probably be blocking some feature from getting merged and deployed to Production. Even worse, if something goes wrong, you might not be able to tend to urgent technical issues like live site issues or pipeline breaks. As the team leader you should be busy shielding your team from distracting meetings and conversations while they can focus on coding. Again, your job is not to code but to ensure that your team can code effectively, and help your team socialize their achievements. Your code doesn\u2019t have to\u00a0ship A good friend gave me this advice when we were talking about hands-on, technical managers: You can\u2019t be your team\u2019s bottleneck. You need to coach and mentor your team members to be able to tackle all technical challenges without your help. You should never be needed to write production code. A great use of your coding time is the non-feature dirty work. Make the build faster, extract some shared behavior into a nice library. Look for things that will make things more productive or more fun for the team. You can also keep your technical skills by focusing on coding Proofs Of Concepts, explore new technologies for your team to use, or work on side projects within the company or on your own. I took that advice to heart and I couldn\u2019t be happier with the results. Not only do I feel less stressed knowing that I am not the technical bottleneck of the team, but my team members have had many more opportunities to face challenges by themselves, learn and become better developers in the process. In order to pass down my technical knowledge I pair code on interesting problems and I also run \u201cClean Code Sessions\u201d where the whole team solves technical problems together through mob programming or just share some technical knowledge and opinions. Nowadays the bulk of my coding is on side projects, either in Expedia (like the Expedia Alexa Skill) or my own side projects like markpress or my useless-but-cool-looking Rolex GMT Chrome Start tab extension. Conclusion Being a manager who can code is like having two jobs. It requires hard work, and lots of dedication. It\u2019s very easy to feel overwhelmed or burned out if you don\u2019t manage well the fine balance between leading and growing your team and honing your tech chops. I\u2019d say you need to love both leadership and coding to pull it off, as you will need to spend lots of your free time improving your manager self and/or your maker self, but hey, it\u2019s worth it! And after all, this is life. Further reads ", "title": "From Engineer to Manager: keeping your technical skills", "sentences": [{"1f4e": "From Engineer to Manager: keeping your technical skills"}, {"29fa": "I became an Engineering Manager over two years ago. One of my main challenges during this time has been to find the balance between my leadership duties towards my team and my desire to keep coding."}, {"df11": "I figured I must not be the only one struggling with this, so I thought I\u2019d give my two cents."}, {"e329": "Why engineering managers should be technically competent"}, {"d61c": "In my opinion, hands-on, technically competent managers are the best leaders for engineering teams (and the ones who escape the Dilbert Principle most of the time). As a technically competent manager you will:"}, {"1dc4": "Ok, we agree it is a really good idea to keep and improve your engineering skills. But that doesn\u2019t come without challenges."}, {"730a": "Coder vs\u00a0Mentor"}, {"08a1": "The first challenge you will likely face is the conflict between your engineer self and the mentor self: Your engineer self will want to solve all the interesting technical challenges your team faces. In the other hand, your mentor self should want to give the problems to team members who can use them to improve their skills and become better developers."}, {"e089": "This problem can be acute in teams with many junior members and a lack of senior engineers to mentor them. In that case, the engineering manager will have to put even more emphasis on the mentorship aspect of her role."}, {"ff8b": "Make your team successful"}, {"6b2c": "Your team and your people come first, before any coding. It\u2019s a necessary condition: If and Only If your team is successful you can dedicate some time to coding."}, {"a0cc": "As a manager you are not building a product, you are building a team that knows how to build products. Thus, making your team succesful should be your primary goal and metric to evaluate yourself against. If you lead a successful team of happy engineers, the team\u2019s success will speak by itself and you will need to spend less time in meetings trying to explain or sell your achievements to your peers and superiors."}, {"aa38": "A self-sufficient team of empowered individuals where you are not the decision bottleneck will give you some additional bandwidth to spend doing something else."}, {"9dcb": "Your words have more\u00a0weight"}, {"a4f0": "Another challenge for me was being too vocal or expressing my opinions too strongly when the team was discussing how to tackle technical problems. I was unaware of this problem until a team member let me know during an open feedback session with the whole team. She said something like \u201cYou are too opinionated during our technical discussions\u2026 you should give more room to others\u201d"}, {"0629": "While some managers are indeed very vocal and use power speech, I learned the hard way that it will prevent others from expressing any different/dissenting opinions they might have and you will probably end up with a worse solution to your problem."}, {"8fe2": "My advice?"}, {"628f": "Always speak last and ask questions rather than give\u00a0answers"}, {"6e81": "I can\u2019t stress enough how important this is. Hands-on managers have to be fully aware that every word they say or write is potentially silencing her team member\u2019s ideas or proposals in some way."}, {"6d8c": "James Everingham goes even further and suggests that just by observing, a manager is already changing the outcome of a project in his Quantum Mechanics analogy:"}, {"83a4": "The observer effect is real in the workplace, and you can affect the outcome of any project as a manager simply by inserting yourself. Often, a manager will take their team into a room and say, \u201cHere\u2019s what we need to do,\u201d or \u201cHere\u2019s what I\u2019ve been thinking,\u201d or \u201cHere\u2019s one way we can think about this\u2026\u201d as they start sketching on a whiteboard. They\u2019re trying to add value. We always want to add value. But if you\u2019re in any position of authority and you do this, you\u2019ve just limited the number of outcomes and your path to success pretty dramatically."}, {"17af": "Maker vs\u00a0Manager"}, {"bdff": "A more logistical challenge I faced was trying to blend the Maker\u2019s schedule with the Manager\u2019s. In Paul Graham\u2019s words (emphasis added):"}, {"1edc": "Most powerful people are on the manager\u2019s schedule. It\u2019s the schedule of command. But there\u2019s another way of using time that\u2019s common among people who make things, like programmers and writers. They generally prefer to use time in units of half a day at least. You can\u2019t write or program well in units of an hour. That\u2019s barely enough time to get started."}, {"4eea": "In short, the fragmented, reactive and meeting-driven schedule of managers simply doesn\u2019t bode well with the concentration coding requires (which is a kind of Deep Work). One could say the characteristics of the manager\u2019s and maker\u2019s schedule are antagonistic: an engineer needs as few distractions as possible while a manager who doesn\u2019t attend meetings or doesn\u2019t interact with other teams can get her reputation penalized for \u201cnot being visible enough\u201d in the organization."}, {"72c8": "Don\u2019t mix the two schedules"}, {"c2f9": "http://dilbert.com/strip/2012-05-30"}, {"6392": "Don\u2019t even try. It\u2019s a recipe for feeling frustrated and unproductive. Like water and oil, the best is to keep them in their natural state: separated and independent from each other."}, {"73f4": "I try to separate my schedules with natural interruptions like lunchtime break. Grouping all my meetings back-to-back in the morning, while exhausting mentally, leaves my afternoon free to wear my Maker hat and concentrate in tough programming problems. I try doing so at least twice a week."}, {"1c48": "I found that having an ample lunchtime break, having a walk outside the office if at all possible, is perfect for my mind to disconnect and reset from meetings and come back refreshed to code productively."}, {"3069": "While wearing your Maker hat you should avoid all possible distractions. To begin with, turn off email. Then, close all the distracting tabs from your browser\u200a\u2014\u200aehem, Facebook, ehem\u200a\u2014\u200aor open a new browser window just to consult the documentation you need. Lastly, I would also turn HipChat/Slack off. Of course you should always leave some communication channel open for urgent issues, for the right people (your team) to reach you if necessary."}, {"70d4": "Being able to be productive and focused depends heavily on the context you are physically and mentally in. By tweaking and adjusting your environment (working from a different desk/place, listening to certain type of music, whatever works for you), you can go a long way to triggering the right mental context to be as productive as you can."}, {"dc07": "You can get many more tricks on how to deal with shallow vs deep work in Cal Newport\u2019s Deep Work."}, {"c7ae": "Being the code bottleneck"}, {"84db": "Given your busy schedule you will probably find it difficult to finish any coding tasks in a timely manner, which means you will probably be blocking some feature from getting merged and deployed to Production. Even worse, if something goes wrong, you might not be able to tend to urgent technical issues like live site issues or pipeline breaks."}, {"3fcb": "As the team leader you should be busy shielding your team from distracting meetings and conversations while they can focus on coding. Again, your job is not to code but to ensure that your team can code effectively, and help your team socialize their achievements."}, {"6874": "Your code doesn\u2019t have to\u00a0ship"}, {"a357": "A good friend gave me this advice when we were talking about hands-on, technical managers:"}, {"dcc0": "You can\u2019t be your team\u2019s bottleneck. You need to coach and mentor your team members to be able to tackle all technical challenges without your help. You should never be needed to write production code. A great use of your coding time is the non-feature dirty work. Make the build faster, extract some shared behavior into a nice library. Look for things that will make things more productive or more fun for the team. You can also keep your technical skills by focusing on coding Proofs Of Concepts, explore new technologies for your team to use, or work on side projects within the company or on your own."}, {"1d38": "I took that advice to heart and I couldn\u2019t be happier with the results. Not only do I feel less stressed knowing that I am not the technical bottleneck of the team, but my team members have had many more opportunities to face challenges by themselves, learn and become better developers in the process."}, {"b573": "In order to pass down my technical knowledge I pair code on interesting problems and I also run \u201cClean Code Sessions\u201d where the whole team solves technical problems together through mob programming or just share some technical knowledge and opinions."}, {"98d2": "Nowadays the bulk of my coding is on side projects, either in Expedia (like the Expedia Alexa Skill) or my own side projects like markpress or my useless-but-cool-looking Rolex GMT Chrome Start tab extension."}, {"c84b": "Conclusion"}, {"b7a7": "Being a manager who can code is like having two jobs. It requires hard work, and lots of dedication. It\u2019s very easy to feel overwhelmed or burned out if you don\u2019t manage well the fine balance between leading and growing your team and honing your tech chops."}, {"7340": "I\u2019d say you need to love both leadership and coding to pull it off, as you will need to spend lots of your free time improving your manager self and/or your maker self, but hey, it\u2019s worth it! And after all, this is life."}, {"998d": "Further reads"}], "child": "1871_1\t1871_2\t1871_3\t1871_4\t1871_5\t1871_6\t1871_7\t1871_8\t1871_9\t1871_10\t1871_11\t1871_12\t1871_13\t1871_14\t1871_15\t1871_16\t1871_17\t1871_18\t1871_19"}