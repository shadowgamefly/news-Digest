{"parent": "", "title": "Surefire Ways to Become a Better\u00a0Coder", "author": "Jacob E. Dawson", "sentences": [{"d5ad": "Surefire Ways to Become a Better\u00a0Coder"}, {"ecf0": "If you\u2019re reading this then the chances are that either you feel like you\u2019re not living up to your full potential as a coder, or you\u2019re a straight-up beginner with your head spinning. I can totally empathize\u200a\u2014\u200aI\u2019ve been in your shoes\u200a\u2014\u200ahell, I\u2019ve been coding for nearly 4 years and I still feel like it\u2019s my first day of school. No worries. I spend a lot of time talking to coders who are much better than myself, and through those conversations I\u2019ve learned a few things about how to improve\u200a\u2014\u200aquickly & efficiently. I want to share some of those tips with you now so hopefully you can level-up with less stress. Let\u2019s rock\u2019n\u2019roll."}, {"e27c": "Just Code\u00a0Baby*"}, {"97ff": "Ok, let\u2019s begin with a disclaimer. I hate when people say things so obvious you feel like punching them in the face. I really do. So please\u200a\u2014\u200ahear me out on this one. I read a lot of posts on r/webdev where people want to know what they should do next, or ask how they can become a better coder. Think about it this way\u200a\u2014\u200ahow good do you think Michael Jordan would have been at basketball if all he did was sit at home and read books about the sport? What if all he did was shoot lay-ups exclusively with his right hand? We never would have heard of him. He became great by playing basketball every day\u200a\u2014\u200aby playing it with a competitive fire and challenging himself in every facet of the game. If you want to become a better coder, then you have to:"}, {"ab57": "1.) code every day"}, {"350c": "2.) always push yourself a little bit harder than before."}, {"8933": "*If you are not coding every day yet still posting \u201chow can I get better at coding\u201d questions, please stop reading this now and go and f*cking code\u00a0;)"}, {"6ca6": "So now that Captain Obvious has declared his face super-punchable, here are some practical ways for you to code every day in fun ways that challenge you:"}, {"9557": "Build Something Real"}, {"28c3": "I tried learning to code a few times before the penny dropped. In hindsight, the reason is obvious\u200a\u2014\u200aI was stuck on the Tutorial Treadmill. The Tutorial Treadmill is when you spend all of your time building to-do apps and creating throwaway code that doesn\u2019t *really* do anything. This is a surefire way to lose motivation & inspiration."}, {"e0c8": "My personal coding journey really took off when I decided to build a web app that actually meant something to me. When you decide to build something personal, unexpected challenges will come at you from all angles, and by tackling these challenges as they arise you\u2019ll start to build a repository of techniques to handle them. I started with building a simple chat program for my friends, and by the end of it I was interfacing with APIs, handling user-authentication, integrating animation libraries, configuring servers and much more. I didn\u2019t know that I would be doing any of those things when I started the journey, but once you have the core of a project going these things will crop up naturally while you build them."}, {"cc1c": "no one is going to hire you when you show them that you\u2019ve successfully managed to copy and paste 12 Scotch.io tutorials"}, {"578d": "An added benefit of building a Real Thing\u2122 is that you have something of substance to share with interviewers & companies if you decide that you\u2019re ready to enter the job market. You\u2019ll definitely want a few of these projects to pull out during interviews\u200a\u2014\u200ano one is going to hire you when you show them that you\u2019ve successfully managed to copy and paste 12 Scotch.io tutorials. You should also be using a version control system like Github to manage the code of your Real Thing\u2122, which means that you can always add the repo address to your portfolio & resume."}, {"4d4a": "Look At Professional Code"}, {"2af9": "If you build for the web, you have the opportunity to see how professional developers are working every time you open up your browser\u200a\u2014\u200ait\u2019s as easy as opening up the dev tools on your browser and inspecting the code. You can learn techniques and tricks just by seeing how the pros arrange their HTML, utilize CSS animations or integrate libraries to make the magic happen. If you think that the website you\u2019re visiting looks good, feels fast and is glowing with quality\u200a\u2014\u200aopen it up and see how they do it."}, {"15d6": "Beyond that, there is more quality code than you could ever read sitting on Github waiting for you to clone it to your local machine. Choose a library with say > 500 stars but that isn\u2019t gigantic\u200a\u2014\u200asomething very useful and very popular without being gargantuan. You\u2019re free to inspect the code and see how they achieve their results. You\u2019ll learn a lot just by mentally reverse engineering the code to figure out how the software works, and in the process you\u2019ll likely get a fly-on-the-wall view of properly commented and well-configured code. That\u2019s a free & invaluable resource just waiting for you to get your hands dirty!"}, {"d7ff": "Finally\u200a\u2014\u200ayou might begin to understand the code well enough that you can start to think of ways to improve it. How modular is the code that they\u2019ve written? Are they using monolithic functions that could be broken down into smaller, more readable elements? Are they using objects efficiently, or importing an entire library to complete a simple task? When you start to notice these things\u200a\u2014\u200awhen you can say \u201cnot sure why they did X, I would do it like Y\u201d\u200a\u2014\u200ayou will know you\u2019re improving."}, {"5097": "Learn a Different Language"}, {"f505": "Coding preferences can sometimes devolve into the PC Master Race argument, whereby language X is for undisputed champions and Y is for shameful noobs. While it\u2019s true that PHP sucks (kidding!\u00a0..kind of), the beauty of programming languages is that every one of them has strengths and weaknesses. There\u2019s an old saying attributed to Mark Twain: \u201cto the man with a hammer, everything looks like a nail\u201d, and this kind of mentality can get in the way of becoming the best coder that you can be."}, {"522d": "While the rise of NodeJS and Universal JavaScript means that it\u2019s possible\u200a\u2014\u200aand at times preferable\u200a\u2014\u200ato write the front and back-end of a project in JavaScript, it may not always be the most efficient. JavaScript began as a cute little language to handle browser-based functions, and has grown like crazy over the past decade to become the language of the web, but there are other languages that shine in different ways:"}, {"cd3c": "You don\u2019t have to go out and learn every other language under the sun, but having a knowledge of what other languages do, how they do it and why people use them will give you a much richer understanding of the coding ecosystem in general."}, {"ea03": "Do Freelance Projects for Cheap /\u00a0Free"}, {"308b": "While the general consensus is that you should never use Upwork to get freelance work, I think that it can actually be a pretty useful way to improve your coding skills. Look\u200a\u2014\u200aan economic race to the bottom is never a good idea, but on the other hand, necessity is the mother of invention. If you take on a smallish project on Upwork (or a similar freelance platform), you\u2019ll not only be simulating the conditions of honest-to-goodness freelance coding work, you\u2019ll also be under some time pressure, which is something that your own projects generally won\u2019t offer (unless you\u2019re super strict with yourself)."}, {"ba2d": "Even if the payment is ludicrously small, you can think of it as though you\u2019re getting paid to learn\u200a\u2014\u200awhich isn\u2019t such a bad deal since learning usually costs money. You\u2019ll also feel a little bit of extra pressure to deliver high-quality work, which is going to force you to learn best practices and do your research before marking the job as complete."}, {"1e18": "If you\u2019re morally opposed to Upwork et al, you can even add in some feel-good juice by offering your services to not-for-profits and local charities. The upside of this is not only that you get to feel all warm & gooey on the inside, but the bar generally won\u2019t be raised so high when you\u2019re upgrading the local soup kitchen\u2019s website from a 90\u2019s-era codebase. FreeCodeCamp and similar websites offer you a lot of options when it comes to donating your time, and it\u2019s a win-win situation."}, {"26a1": "You Are Never\u00a0Finished"}, {"af93": "Realize that you\u2019re never \u201cdone\u201d. There\u2019s not some oddly-calm code ninja waiting at the top of an ice-covered mountain to pin a \u201cWinner!\u201d badge on your sweat-stained lapels once you\u2019ve successfully managed to put together a functioning Webpack build without swearing. Unfortunately."}, {"379d": "A journey of 100k LOC begins with a single LOC."}, {"13fd": "No matter what you learn, coding just keeps on going. You could be the number-one expert in your area of expertise and a few years later be totally unemployable *cough* ActionScript coders *cough*. Even when you\u2019re feeling pretty solid with your skills, just remember that there\u2019s some uber-keyboard jockey working for a Wall Street trading firm who dreams of binary code and poops algorithms. Don\u2019t sweat it\u200a\u2014\u200abe the best that you can be and keep on coding."}, {"d93e": "Good luck!"}, {"61a6": "###"}, {"a903": "If you\u2019re wondering whether you\u2019re ready to get a developer job, I\u2019m building a platform to help you find out. Jumpjet helps you become a better coder by practicing technical interviews with pro developers. Get feedback, get hired. Check it out here: https://www.jumpjet.io"}], "content": "Surefire Ways to Become a Better\u00a0Coder If you\u2019re reading this then the chances are that either you feel like you\u2019re not living up to your full potential as a coder, or you\u2019re a straight-up beginner with your head spinning. I can totally empathize\u200a\u2014\u200aI\u2019ve been in your shoes\u200a\u2014\u200ahell, I\u2019ve been coding for nearly 4 years and I still feel like it\u2019s my first day of school. No worries. I spend a lot of time talking to coders who are much better than myself, and through those conversations I\u2019ve learned a few things about how to improve\u200a\u2014\u200aquickly & efficiently. I want to share some of those tips with you now so hopefully you can level-up with less stress. Let\u2019s rock\u2019n\u2019roll. Just Code\u00a0Baby* Ok, let\u2019s begin with a disclaimer. I hate when people say things so obvious you feel like punching them in the face. I really do. So please\u200a\u2014\u200ahear me out on this one. I read a lot of posts on r/webdev where people want to know what they should do next, or ask how they can become a better coder. Think about it this way\u200a\u2014\u200ahow good do you think Michael Jordan would have been at basketball if all he did was sit at home and read books about the sport? What if all he did was shoot lay-ups exclusively with his right hand? We never would have heard of him. He became great by playing basketball every day\u200a\u2014\u200aby playing it with a competitive fire and challenging himself in every facet of the game. If you want to become a better coder, then you have to: 1.) code every day 2.) always push yourself a little bit harder than before. *If you are not coding every day yet still posting \u201chow can I get better at coding\u201d questions, please stop reading this now and go and f*cking code\u00a0;) So now that Captain Obvious has declared his face super-punchable, here are some practical ways for you to code every day in fun ways that challenge you: Build Something Real I tried learning to code a few times before the penny dropped. In hindsight, the reason is obvious\u200a\u2014\u200aI was stuck on the Tutorial Treadmill. The Tutorial Treadmill is when you spend all of your time building to-do apps and creating throwaway code that doesn\u2019t *really* do anything. This is a surefire way to lose motivation & inspiration. My personal coding journey really took off when I decided to build a web app that actually meant something to me. When you decide to build something personal, unexpected challenges will come at you from all angles, and by tackling these challenges as they arise you\u2019ll start to build a repository of techniques to handle them. I started with building a simple chat program for my friends, and by the end of it I was interfacing with APIs, handling user-authentication, integrating animation libraries, configuring servers and much more. I didn\u2019t know that I would be doing any of those things when I started the journey, but once you have the core of a project going these things will crop up naturally while you build them. no one is going to hire you when you show them that you\u2019ve successfully managed to copy and paste 12 Scotch.io tutorials An added benefit of building a Real Thing\u2122 is that you have something of substance to share with interviewers & companies if you decide that you\u2019re ready to enter the job market. You\u2019ll definitely want a few of these projects to pull out during interviews\u200a\u2014\u200ano one is going to hire you when you show them that you\u2019ve successfully managed to copy and paste 12 Scotch.io tutorials. You should also be using a version control system like Github to manage the code of your Real Thing\u2122, which means that you can always add the repo address to your portfolio & resume. Look At Professional Code If you build for the web, you have the opportunity to see how professional developers are working every time you open up your browser\u200a\u2014\u200ait\u2019s as easy as opening up the dev tools on your browser and inspecting the code. You can learn techniques and tricks just by seeing how the pros arrange their HTML, utilize CSS animations or integrate libraries to make the magic happen. If you think that the website you\u2019re visiting looks good, feels fast and is glowing with quality\u200a\u2014\u200aopen it up and see how they do it. Beyond that, there is more quality code than you could ever read sitting on Github waiting for you to clone it to your local machine. Choose a library with say > 500 stars but that isn\u2019t gigantic\u200a\u2014\u200asomething very useful and very popular without being gargantuan. You\u2019re free to inspect the code and see how they achieve their results. You\u2019ll learn a lot just by mentally reverse engineering the code to figure out how the software works, and in the process you\u2019ll likely get a fly-on-the-wall view of properly commented and well-configured code. That\u2019s a free & invaluable resource just waiting for you to get your hands dirty! Finally\u200a\u2014\u200ayou might begin to understand the code well enough that you can start to think of ways to improve it. How modular is the code that they\u2019ve written? Are they using monolithic functions that could be broken down into smaller, more readable elements? Are they using objects efficiently, or importing an entire library to complete a simple task? When you start to notice these things\u200a\u2014\u200awhen you can say \u201cnot sure why they did X, I would do it like Y\u201d\u200a\u2014\u200ayou will know you\u2019re improving. Learn a Different Language Coding preferences can sometimes devolve into the PC Master Race argument, whereby language X is for undisputed champions and Y is for shameful noobs. While it\u2019s true that PHP sucks (kidding!\u00a0..kind of), the beauty of programming languages is that every one of them has strengths and weaknesses. There\u2019s an old saying attributed to Mark Twain: \u201cto the man with a hammer, everything looks like a nail\u201d, and this kind of mentality can get in the way of becoming the best coder that you can be. While the rise of NodeJS and Universal JavaScript means that it\u2019s possible\u200a\u2014\u200aand at times preferable\u200a\u2014\u200ato write the front and back-end of a project in JavaScript, it may not always be the most efficient. JavaScript began as a cute little language to handle browser-based functions, and has grown like crazy over the past decade to become the language of the web, but there are other languages that shine in different ways: You don\u2019t have to go out and learn every other language under the sun, but having a knowledge of what other languages do, how they do it and why people use them will give you a much richer understanding of the coding ecosystem in general. Do Freelance Projects for Cheap /\u00a0Free While the general consensus is that you should never use Upwork to get freelance work, I think that it can actually be a pretty useful way to improve your coding skills. Look\u200a\u2014\u200aan economic race to the bottom is never a good idea, but on the other hand, necessity is the mother of invention. If you take on a smallish project on Upwork (or a similar freelance platform), you\u2019ll not only be simulating the conditions of honest-to-goodness freelance coding work, you\u2019ll also be under some time pressure, which is something that your own projects generally won\u2019t offer (unless you\u2019re super strict with yourself). Even if the payment is ludicrously small, you can think of it as though you\u2019re getting paid to learn\u200a\u2014\u200awhich isn\u2019t such a bad deal since learning usually costs money. You\u2019ll also feel a little bit of extra pressure to deliver high-quality work, which is going to force you to learn best practices and do your research before marking the job as complete. If you\u2019re morally opposed to Upwork et al, you can even add in some feel-good juice by offering your services to not-for-profits and local charities. The upside of this is not only that you get to feel all warm & gooey on the inside, but the bar generally won\u2019t be raised so high when you\u2019re upgrading the local soup kitchen\u2019s website from a 90\u2019s-era codebase. FreeCodeCamp and similar websites offer you a lot of options when it comes to donating your time, and it\u2019s a win-win situation. You Are Never\u00a0Finished Realize that you\u2019re never \u201cdone\u201d. There\u2019s not some oddly-calm code ninja waiting at the top of an ice-covered mountain to pin a \u201cWinner!\u201d badge on your sweat-stained lapels once you\u2019ve successfully managed to put together a functioning Webpack build without swearing. Unfortunately. A journey of 100k LOC begins with a single LOC. No matter what you learn, coding just keeps on going. You could be the number-one expert in your area of expertise and a few years later be totally unemployable *cough* ActionScript coders *cough*. Even when you\u2019re feeling pretty solid with your skills, just remember that there\u2019s some uber-keyboard jockey working for a Wall Street trading firm who dreams of binary code and poops algorithms. Don\u2019t sweat it\u200a\u2014\u200abe the best that you can be and keep on coding. Good luck! ### If you\u2019re wondering whether you\u2019re ready to get a developer job, I\u2019m building a platform to help you find out. Jumpjet helps you become a better coder by practicing technical interviews with pro developers. Get feedback, get hired. Check it out here: https://www.jumpjet.io ", "name": "856", "child": "856_1\t856_2\t856_3\t856_4\t856_5\t856_6\t856_7\t856_8", "timestamp": "Mar 29"}