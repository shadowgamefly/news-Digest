{"parent": "", "title": "4 Reasons You Can\u2019t Learn to Code That Have Nothing to Do With Being Lazy or a Poor Programmer", "author": "Nicole Archambault", "sentences": [{"11ec": "4 Reasons You Can\u2019t Learn to Code That Have Nothing to Do With Being Lazy or a Poor Programmer"}, {"832f": "Personal responsibility is important, but there may be more to\u00a0it."}, {"889d": "It\u2019s a familiar picture. You\u2019ve decided to learn to code. Eager and enthusiastic, you pick your first tutorials and learn-to-code websites, and start working through the content in earnest. Students typically start with HTML and CSS, so you\u2019re likely learning the basics of putting together a website, structurally and stylistically."}, {"ab25": "You\u2019re building confidence with each visible change, and discovering this new power is exhilarating! (Or, you could be like me and incredibly frustrated with CSS before you even hit JavaScript. If that\u2019s the case, then\u2026 twinsies. You\u2019re definitely not alone.)"}, {"8b32": "If you made it this far, regardless of whether you\u2019re focusing on Front-End or Back-End, your education should shift into JavaScript eventually. You can\u2019t call yourself a web developer without at least knowing some JavaScript."}, {"c471": "This is where things start to get hard. You learn about variables, loops, and functions. The abstraction\u2014the lack of being able to readily see what your work is doing in the front end\u2014can be maddening for a highly visual learner."}, {"4611": "Many students take to various fora at this point, as I did. And we\u2019re told a variety of things, from \u201cI know, I\u2019m struggling, too,\u201d to \u201cSuck it up, buttercup\u201d. Apart from being kind of unhelpful, the general assumption is that everyone is coming from a similar educational background in this scenario, which is highly problematic for reasons you\u2019ll read about shortly."}, {"5b52": "Anyway, you become anxious about learning to code. Unconsciously, you may step away from it for \u201ca few days\u201d. But by the time you get back\u2014if you get back\u2014you\u2019re too far removed from the context for it to feel like an appealing prospect. Defeated, you may give up coding altogether."}, {"8e9b": "I know this happens, because it\u2019s happened to me, and many of the students I talk to. It\u2019s the basis of the #1 question I get from students: is it supposed to be this hard? (for anyone curious, #2 is \u201cwhat should I learn now/next?\u201d)."}, {"8b59": "This ending is 100% avoidable. But I\u2019m absolutely not here to blame you\u2014rather, tell you that I have experienced it, empathize fully, and have been working to figure out why this happens. I push myself to become an expert in issues that affect my ability to be my best version of myself, but as a disclaimer, I\u2019m no professional expert. Just another self-taught coder that desperately wants to learn everything I can for the first time in my life."}, {"188f": "Why we shy away from learning to\u00a0code"}, {"aa8b": "Any web developer or software engineer will tell you that learning programming is difficult. There\u2019s no illusion around that fact, and you\u2019ve probably seen it for yourself by this point."}, {"a306": "However, that fact clashes head-on with the fact that we need to learn to be learning every day, as efficiently and quickly as possible, to stay relevant as web developers. Without learning how to learn effectively, you\u2019ll be a stale, outdated web developer surrounded by a blur of new technology updates. While you may still manage to run a business this way, or even get hired by a company, you\u2019ll soon be bored and miserable\u2014because as it turns out, learning new things is what keeps us engaged in anything."}, {"7ac3": "Viking Code School discussed this particular phenomenon in their popular article, \u201cWhy Learning to Code is So Damn Hard\u201d. I referenced this article repeatedly when pushing myself through the \u201cdesert of despair\u201d. I\u2019m still encountering these valleys every so often as a fairly new programmer but they are much more shallow."}, {"5312": "Coding Confidence vs. Competence chart\u00a0(source)"}, {"7316": "Viking managed to create an infographic that is both highly relatable and well-explained. When we first learn to code, we\u2019re in the \u201chand-holding honeymoon\u201d stage, where everything is peachy and great. This is mostly due to a plethora of newbie-friendly resources available for brand new coders. But like any honeymoon period, it doesn\u2019t last."}, {"e74e": "As soon as advanced concepts make an appearance, your ability to learn\u2014not your ability to program\u2014will be put to the test. The \u201ccliff of confusion\u201d happened for me right around the time JavaScript started to get hard. I questioned my entire self. Am I meant to be a programmer? Was the advisor in college that told me I might not be a good fit for Computer Science right? Am I wasting my time?"}, {"d2a4": "(I mean, amplify that by 100, because I live with debilitating generalized anxiety. I\u2019ve done enough work on myself over the past two years that by this point, I can finally respond with an immediate \u201cno\u201d to my anxiety voice. At that time, however, the two voices sounded much the same.)"}, {"84e1": "The \u201cdesert of despair\u201d was an ugly one, and happened around the time I moved back to the East Coast this year. Desperate to get back to relevancy, I fell prey to \u201cmirages of mania\u201d, grasping at a bunch of different frameworks I\u2019d never tried, starting Full-Stack JavaScript all over again, and trying to re-commit multiple times\u2014unsuccessfully. I even got back into Free Code Camp, thinking maybe I just needed a new platform. Projects fell by the wayside as I burned out. Nothing worked, because what I needed was a head check, some context, and focus."}, {"c53d": "So, here are the reasons why despite desperately wanting to learn to code\u2026 you haven\u2019t been able to do so successfully. And after you read them, we\u2019re going to start addressing them."}, {"08ed": "Reason #1: You\u2019ve lost sight of your initial reasons for learning to\u00a0code"}, {"92f2": "When we start learning to code, we\u2019re driven by our passions and a strong motivation to better our lives. In other words, our reasons are near and dear to our hearts. We love computers and technology. We\u2019ve always been fascinated with websites and design. We\u2019re intrigued with solving complex problems."}, {"375f": "The danger comes as we continue down our learning path. The deeper into the programming itself that we get, the further removed we can become from that initial goal. Rather, those goals are replaced with tons of tiny, irrelevant goals: create a project in X language, take a tutorial in Y language, get Z job."}, {"72c8": "This is dangerous to your early development for a couple of reasons:"}, {"bd22": "Something happens when we start learning the meat and bones programming principles, like data structures, functions, object-oriented programming and prototypal inheritance, etc. The more complex it gets, the less internal compass we have. Like wandering into the Bermuda Triangle, our sense of direction can get wonky really fast."}, {"bc3f": "Picture this: you\u2019re reading a tutorial one moment, then there\u2019s a link to a related article in the comments. You may assume that this is information you need. But it isn\u2019t totally related\u2014you need to get more context to connect the two. So you branch off, seeking information to connect the concepts, and perhaps end up needing something else."}, {"359e": "The end result is always lost time and energy, and possibly some skills that you may or may not use."}, {"e971": "An experienced and confident programmer knows to ignore everything that they don\u2019t need to know\u2014even if they don\u2019t already know it\u2014and only pay attention to the information they\u2019re actually looking for. Of course, it\u2019s easier to focus when you know what\u2019s important to begin with. A newbie programmer will likely try to learn everything, because they don\u2019t have that compass and overall context."}, {"c96e": "Focusing is hard. Understanding is hard. Developing these skills takes time, practice, and a priority on primary concepts. Primary concepts provide our ever-valuable context, and take the form of questions you may have learned in early school years\u2014what, why, and how?"}, {"2227": "Why am I doing this?What problem does this solve?What happens if I do this correctly?What happens if I don\u2019t do this correctly?How do I do this correctly?Why does it respond that way?"}, {"0dac": "Providing this primary context to the material you\u2019re learning helps avoid a clouded perspective. Our brains don\u2019t have to focus so hard on remembering the details, because it makes sense. As a result, I found it much easier to remember that I\u2019m doing this to become a better problem solver, and increase my career prospects, happiness, and balance with the rest of my life. I can make goals and decisions that align me for that type of a future, rather than losing my damn mind trying to remember all the minutia, and sight of what I really want."}, {"1b11": "If that isn\u2019t enough reason to keep your personal goals tightly aligned with your educational goals and actions, consider that you\u2019ll be spinning your wheels learning complex languages that you may never use professionally. Unless you can somehow afford to do this, I highly doubt that\u2019s what any student wants."}, {"0c39": "How different you would be today if you learned everything you actually needed to know for your life in school, instead of what you were actually taught? That\u2019s an ideal situation that never happens, so learning how to learn confidently now is your next best bet."}, {"5146": "The process of learning to code in some language should not be your primary objective. Rather, it should be to become a competent problem solver and critical thinker, and to be comfortable with the concepts of programming. And then, build. Learning the languages will come as a side benefit of building, and nothing will change until you start building."}, {"ca2f": "Reason #2: You\u2019re experiencing residual effects of an early lack of learning privilege"}, {"99e2": "Say what?"}, {"68c6": "This is one that really isn\u2019t talked about very much within the web development industry itself, but I\u2019ve begun to open the conversation by tying in the science of learning. I think that there\u2019s a big hesitation to peg traditional educational systems as a major problem, but we know they\u2019re broken."}, {"ccb5": "The entire \u201clearn to code\u201d industry tells you that it\u2019s so easy, anyone can do it. But let\u2019s be real\u2014not just anyone can do this, and they know that. They will lose many of their students within their first few months of self-teaching. These people may have been excellent programmers, but were overwhelmed by information based on unconscious factors. In other words, it may not be your fault at all."}, {"51ab": "Either additionally or alternatively, your reasons for failing to learn to code may run as deep as your childhood. If you had a difficult early education as I did, or have otherwise struggled with learning, you may feel like others are \u201cgetting it\u201d much faster than you are."}, {"eff0": "I was a student who struggled chronically with focus issues. However, this wasn\u2019t because I had any type of learning disability. Rather, my individual learning styles were never provided for, and as a result, I was not a privileged learner\u2014someone who is taught information in the same manner by which they best learn. Don\u2019t be surprised if you can\u2019t find much on this topic, as it\u2019s my own theory. But it makes an awful lot of sense."}, {"5103": "I didn\u2019t learn this about myself until much later in life. I am terrible at memorization, and that still stands today, which isn\u2019t such a bad thing. Understanding is much more important."}, {"142b": "But, understanding difficult concepts requires more of me than the average person. However, when I do eventually understand that topic and gain that context, the information is easily retrieved with a bit of practice. I require information to be presented with as much top-level context as possible\u2014How does this fit into the bigger picture?, or What problem is this solving?"}, {"bd8c": "As far as the information itself, I am a highly visual and auditory learner. I prefer to learn solo, to prevent aggravating my anxiety. Once I understand the information, I enjoy discussing it with others and asking clarification questions to fill in the gaps. In other words, give me a pair of noise-cancelling headphones, and a video with Closed Captioning and playback speed controls, then let me ask questions\u2026 and you\u2019ll be amazed at my comprehension."}, {"0ebb": "Students with learning privilege are fortunate enough to have information delivered to them in the same manner that they best absorb it. These students typically excel early on in education, and can build easily on existing knowledge because they are able to gain valuable context earlier than unprivileged students."}, {"3a6f": "What does this mean for us as self-taught coders? Well, students without learning privilege can experience deep self-doubt and anxiety with learning complex material, and these effects may be carried into adulthood, where they affect career prospects, professional development, and personal relationships."}, {"b030": "If you\u2019ve been surprised at your passion later in life, and have found that you can learn with relative ease compared to early years, you\u2019re likely recovering from a negative educational experience, as well. There is hope, and I\u2019m proof."}, {"a226": "As an adult teaching themselves to code, you\u2019re the student again\u2014just like the early years. As was my personal experience, you now have the important task of digging deep to identify the source of your hesitations. Work on your hang-ups now, and you\u2019ll absorb new information effortlessly. I\u2019ve discussed the topic of early learning privilege more extensively on my podcast episode, \u201cHow I Learned How I Learn\u201d, and encourage you to listen to it if you feel that this issue relates to you."}, {"9bff": "Reason #3: You\u2019re isolating yourself and your education"}, {"c776": "This is a hard one for me to write about, because it\u2019s my biggest issue\u2014and it\u2019s still an issue, to date. I don\u2019t collaborate enough. Perhaps you don\u2019t, either."}, {"d893": "I know way more about web development than I write about on my blog. I love talking about it, and I\u2019m honestly trying to write more, but it doesn\u2019t always make it to public text. In fact, I\u2019m going to probably go through this article in the future and update it as I learn more. So why would you think that tutorials and blog posts are going to hold everything you\u2019d need to know?"}, {"9f67": "The very experience of teaching ourselves anything is an incredibly vulnerable one. It requires reaching deep down within ourselves, and asking ourselves what we really want, then aligning those interests with the information we seek to learn. But after you\u2019ve aligned yourself to code, don\u2019t stay walled up in your own cocoon. You need to interact with other web developers, build relationships, and learn from your peers."}, {"18e8": "Do so in a focused manner, though. One of my biggest flaws is that I avoid meaningful educational interactions with other web developers because I\u2019m anxious that I\u2019ll seem unknowledgeable in comparison. I have to remind myself, sometimes out loud, that I am unknowledgeable compared to them\u2014and that\u2019s okay. They are not the focus. The focus is what they know."}, {"3844": "I\u2019m going to be really vulnerable here for a moment: I\u2019ve been coding for going on 2 years now, and I\u2019ve never worked collaboratively on a project with someone else. There. I said it. Nowadays, as I\u2019m starting my freelance web development business, it\u2019s been mostly because I don\u2019t need to. But overall? It\u2019s because I was afraid of my code being really shitty, and them judging me for it. I\u2019m going to need to contract developers down the road, so I need to learn to start collaborating."}, {"886f": "In general, sheltering yourself from other programmers is a surefire way to stunt your professional growth. Bugs are easier to see with more than one pair of eyes, and even explaining concepts to someone else will help you better retain them."}, {"67d0": "Reason #4: You\u2019re using incompatible learning resources"}, {"ad77": "Nobody says you have to stick with one particular learning resource. I mean, it\u2019s good to stay focused on one thing to completion, but if you get stuck, ask yourself these questions before you switch:"}, {"5daa": "Are you being engaged by the instructor and the material?"}, {"758f": "Does the course explain primary concepts well? (such as, why you\u2019re doing something, or what problem it solves)"}, {"d9e2": "If the answer to either of these is \u201cno\u201d, you\u2019ll likely want to look at other options. Your learning time is too valuable to waste on incompatible and inadequate material. Furthermore, engagement and understanding have a tight relationship, and increasing engagement will improve your understanding of the material."}, {"7991": "So, if your instructor or course material isn\u2019t doing it for you, don\u2019t be afraid to go off-track a bit. For example, if you\u2019re learning JavaScript objects, but are unable to wrap your head around why one would want to use an object, pause the video and do some Googling until something clicks with you. Fight the urge to just give up. There will be material out there that speaks to you, and it won\u2019t be brand new to your brain. Our chances of understanding increase exponentially with each pass."}, {"1c25": "One of the greatest benefits of teaching ourselves is the ability to choose our learning material. However, be aware that this can come at a price (literally) if we don\u2019t vet our choices well, such as enrolling in an expensive online course that is text-based when you\u2019re a visual learner."}, {"cf78": "At the end of the day, the onus is on you to take this information and make something of it. That\u2019s where 95% of you will fail. Be in the 5% that takes responsibility for the fact that your courses aren\u2019t good quality, your education experience sucked, you don\u2019t know what you\u2019re doing anymore, and/or you\u2019re an isolated student. Then, bury down your ego, and carry on. You\u2019re back, with a vengeance. \ud83d\udc4a\ud83c\udffc"}, {"4a93": "There are more reasons than just these four, and I may be editing this post as time goes on, and I experience more of this rollercoaster we call learning web development. I\u2019m interested in hearing your thoughts in the comments, on Twitter @lavie_encode, or on the LVEC Facebook page."}, {"73f4": "If this article was useful to you, please remember to click the PURPLE \ud83d\ude09 heart button!"}], "content": "4 Reasons You Can\u2019t Learn to Code That Have Nothing to Do With Being Lazy or a Poor Programmer Personal responsibility is important, but there may be more to\u00a0it. It\u2019s a familiar picture. You\u2019ve decided to learn to code. Eager and enthusiastic, you pick your first tutorials and learn-to-code websites, and start working through the content in earnest. Students typically start with HTML and CSS, so you\u2019re likely learning the basics of putting together a website, structurally and stylistically. You\u2019re building confidence with each visible change, and discovering this new power is exhilarating! (Or, you could be like me and incredibly frustrated with CSS before you even hit JavaScript. If that\u2019s the case, then\u2026 twinsies. You\u2019re definitely not alone.) If you made it this far, regardless of whether you\u2019re focusing on Front-End or Back-End, your education should shift into JavaScript eventually. You can\u2019t call yourself a web developer without at least knowing some JavaScript. This is where things start to get hard. You learn about variables, loops, and functions. The abstraction\u2014the lack of being able to readily see what your work is doing in the front end\u2014can be maddening for a highly visual learner. Many students take to various fora at this point, as I did. And we\u2019re told a variety of things, from \u201cI know, I\u2019m struggling, too,\u201d to \u201cSuck it up, buttercup\u201d. Apart from being kind of unhelpful, the general assumption is that everyone is coming from a similar educational background in this scenario, which is highly problematic for reasons you\u2019ll read about shortly. Anyway, you become anxious about learning to code. Unconsciously, you may step away from it for \u201ca few days\u201d. But by the time you get back\u2014if you get back\u2014you\u2019re too far removed from the context for it to feel like an appealing prospect. Defeated, you may give up coding altogether. I know this happens, because it\u2019s happened to me, and many of the students I talk to. It\u2019s the basis of the #1 question I get from students: is it supposed to be this hard? (for anyone curious, #2 is \u201cwhat should I learn now/next?\u201d). This ending is 100% avoidable. But I\u2019m absolutely not here to blame you\u2014rather, tell you that I have experienced it, empathize fully, and have been working to figure out why this happens. I push myself to become an expert in issues that affect my ability to be my best version of myself, but as a disclaimer, I\u2019m no professional expert. Just another self-taught coder that desperately wants to learn everything I can for the first time in my life. Why we shy away from learning to\u00a0code Any web developer or software engineer will tell you that learning programming is difficult. There\u2019s no illusion around that fact, and you\u2019ve probably seen it for yourself by this point. However, that fact clashes head-on with the fact that we need to learn to be learning every day, as efficiently and quickly as possible, to stay relevant as web developers. Without learning how to learn effectively, you\u2019ll be a stale, outdated web developer surrounded by a blur of new technology updates. While you may still manage to run a business this way, or even get hired by a company, you\u2019ll soon be bored and miserable\u2014because as it turns out, learning new things is what keeps us engaged in anything. Viking Code School discussed this particular phenomenon in their popular article, \u201cWhy Learning to Code is So Damn Hard\u201d. I referenced this article repeatedly when pushing myself through the \u201cdesert of despair\u201d. I\u2019m still encountering these valleys every so often as a fairly new programmer but they are much more shallow. Coding Confidence vs. Competence chart\u00a0(source) Viking managed to create an infographic that is both highly relatable and well-explained. When we first learn to code, we\u2019re in the \u201chand-holding honeymoon\u201d stage, where everything is peachy and great. This is mostly due to a plethora of newbie-friendly resources available for brand new coders. But like any honeymoon period, it doesn\u2019t last. As soon as advanced concepts make an appearance, your ability to learn\u2014not your ability to program\u2014will be put to the test. The \u201ccliff of confusion\u201d happened for me right around the time JavaScript started to get hard. I questioned my entire self. Am I meant to be a programmer? Was the advisor in college that told me I might not be a good fit for Computer Science right? Am I wasting my time? (I mean, amplify that by 100, because I live with debilitating generalized anxiety. I\u2019ve done enough work on myself over the past two years that by this point, I can finally respond with an immediate \u201cno\u201d to my anxiety voice. At that time, however, the two voices sounded much the same.) The \u201cdesert of despair\u201d was an ugly one, and happened around the time I moved back to the East Coast this year. Desperate to get back to relevancy, I fell prey to \u201cmirages of mania\u201d, grasping at a bunch of different frameworks I\u2019d never tried, starting Full-Stack JavaScript all over again, and trying to re-commit multiple times\u2014unsuccessfully. I even got back into Free Code Camp, thinking maybe I just needed a new platform. Projects fell by the wayside as I burned out. Nothing worked, because what I needed was a head check, some context, and focus. So, here are the reasons why despite desperately wanting to learn to code\u2026 you haven\u2019t been able to do so successfully. And after you read them, we\u2019re going to start addressing them. Reason #1: You\u2019ve lost sight of your initial reasons for learning to\u00a0code When we start learning to code, we\u2019re driven by our passions and a strong motivation to better our lives. In other words, our reasons are near and dear to our hearts. We love computers and technology. We\u2019ve always been fascinated with websites and design. We\u2019re intrigued with solving complex problems. The danger comes as we continue down our learning path. The deeper into the programming itself that we get, the further removed we can become from that initial goal. Rather, those goals are replaced with tons of tiny, irrelevant goals: create a project in X language, take a tutorial in Y language, get Z job. This is dangerous to your early development for a couple of reasons: Something happens when we start learning the meat and bones programming principles, like data structures, functions, object-oriented programming and prototypal inheritance, etc. The more complex it gets, the less internal compass we have. Like wandering into the Bermuda Triangle, our sense of direction can get wonky really fast. Picture this: you\u2019re reading a tutorial one moment, then there\u2019s a link to a related article in the comments. You may assume that this is information you need. But it isn\u2019t totally related\u2014you need to get more context to connect the two. So you branch off, seeking information to connect the concepts, and perhaps end up needing something else. The end result is always lost time and energy, and possibly some skills that you may or may not use. An experienced and confident programmer knows to ignore everything that they don\u2019t need to know\u2014even if they don\u2019t already know it\u2014and only pay attention to the information they\u2019re actually looking for. Of course, it\u2019s easier to focus when you know what\u2019s important to begin with. A newbie programmer will likely try to learn everything, because they don\u2019t have that compass and overall context. Focusing is hard. Understanding is hard. Developing these skills takes time, practice, and a priority on primary concepts. Primary concepts provide our ever-valuable context, and take the form of questions you may have learned in early school years\u2014what, why, and how? Why am I doing this?What problem does this solve?What happens if I do this correctly?What happens if I don\u2019t do this correctly?How do I do this correctly?Why does it respond that way? Providing this primary context to the material you\u2019re learning helps avoid a clouded perspective. Our brains don\u2019t have to focus so hard on remembering the details, because it makes sense. As a result, I found it much easier to remember that I\u2019m doing this to become a better problem solver, and increase my career prospects, happiness, and balance with the rest of my life. I can make goals and decisions that align me for that type of a future, rather than losing my damn mind trying to remember all the minutia, and sight of what I really want. If that isn\u2019t enough reason to keep your personal goals tightly aligned with your educational goals and actions, consider that you\u2019ll be spinning your wheels learning complex languages that you may never use professionally. Unless you can somehow afford to do this, I highly doubt that\u2019s what any student wants. How different you would be today if you learned everything you actually needed to know for your life in school, instead of what you were actually taught? That\u2019s an ideal situation that never happens, so learning how to learn confidently now is your next best bet. The process of learning to code in some language should not be your primary objective. Rather, it should be to become a competent problem solver and critical thinker, and to be comfortable with the concepts of programming. And then, build. Learning the languages will come as a side benefit of building, and nothing will change until you start building. Reason #2: You\u2019re experiencing residual effects of an early lack of learning privilege Say what? This is one that really isn\u2019t talked about very much within the web development industry itself, but I\u2019ve begun to open the conversation by tying in the science of learning. I think that there\u2019s a big hesitation to peg traditional educational systems as a major problem, but we know they\u2019re broken. The entire \u201clearn to code\u201d industry tells you that it\u2019s so easy, anyone can do it. But let\u2019s be real\u2014not just anyone can do this, and they know that. They will lose many of their students within their first few months of self-teaching. These people may have been excellent programmers, but were overwhelmed by information based on unconscious factors. In other words, it may not be your fault at all. Either additionally or alternatively, your reasons for failing to learn to code may run as deep as your childhood. If you had a difficult early education as I did, or have otherwise struggled with learning, you may feel like others are \u201cgetting it\u201d much faster than you are. I was a student who struggled chronically with focus issues. However, this wasn\u2019t because I had any type of learning disability. Rather, my individual learning styles were never provided for, and as a result, I was not a privileged learner\u2014someone who is taught information in the same manner by which they best learn. Don\u2019t be surprised if you can\u2019t find much on this topic, as it\u2019s my own theory. But it makes an awful lot of sense. I didn\u2019t learn this about myself until much later in life. I am terrible at memorization, and that still stands today, which isn\u2019t such a bad thing. Understanding is much more important. But, understanding difficult concepts requires more of me than the average person. However, when I do eventually understand that topic and gain that context, the information is easily retrieved with a bit of practice. I require information to be presented with as much top-level context as possible\u2014How does this fit into the bigger picture?, or What problem is this solving? As far as the information itself, I am a highly visual and auditory learner. I prefer to learn solo, to prevent aggravating my anxiety. Once I understand the information, I enjoy discussing it with others and asking clarification questions to fill in the gaps. In other words, give me a pair of noise-cancelling headphones, and a video with Closed Captioning and playback speed controls, then let me ask questions\u2026 and you\u2019ll be amazed at my comprehension. Students with learning privilege are fortunate enough to have information delivered to them in the same manner that they best absorb it. These students typically excel early on in education, and can build easily on existing knowledge because they are able to gain valuable context earlier than unprivileged students. What does this mean for us as self-taught coders? Well, students without learning privilege can experience deep self-doubt and anxiety with learning complex material, and these effects may be carried into adulthood, where they affect career prospects, professional development, and personal relationships. If you\u2019ve been surprised at your passion later in life, and have found that you can learn with relative ease compared to early years, you\u2019re likely recovering from a negative educational experience, as well. There is hope, and I\u2019m proof. As an adult teaching themselves to code, you\u2019re the student again\u2014just like the early years. As was my personal experience, you now have the important task of digging deep to identify the source of your hesitations. Work on your hang-ups now, and you\u2019ll absorb new information effortlessly. I\u2019ve discussed the topic of early learning privilege more extensively on my podcast episode, \u201cHow I Learned How I Learn\u201d, and encourage you to listen to it if you feel that this issue relates to you. Reason #3: You\u2019re isolating yourself and your education This is a hard one for me to write about, because it\u2019s my biggest issue\u2014and it\u2019s still an issue, to date. I don\u2019t collaborate enough. Perhaps you don\u2019t, either. I know way more about web development than I write about on my blog. I love talking about it, and I\u2019m honestly trying to write more, but it doesn\u2019t always make it to public text. In fact, I\u2019m going to probably go through this article in the future and update it as I learn more. So why would you think that tutorials and blog posts are going to hold everything you\u2019d need to know? The very experience of teaching ourselves anything is an incredibly vulnerable one. It requires reaching deep down within ourselves, and asking ourselves what we really want, then aligning those interests with the information we seek to learn. But after you\u2019ve aligned yourself to code, don\u2019t stay walled up in your own cocoon. You need to interact with other web developers, build relationships, and learn from your peers. Do so in a focused manner, though. One of my biggest flaws is that I avoid meaningful educational interactions with other web developers because I\u2019m anxious that I\u2019ll seem unknowledgeable in comparison. I have to remind myself, sometimes out loud, that I am unknowledgeable compared to them\u2014and that\u2019s okay. They are not the focus. The focus is what they know. I\u2019m going to be really vulnerable here for a moment: I\u2019ve been coding for going on 2 years now, and I\u2019ve never worked collaboratively on a project with someone else. There. I said it. Nowadays, as I\u2019m starting my freelance web development business, it\u2019s been mostly because I don\u2019t need to. But overall? It\u2019s because I was afraid of my code being really shitty, and them judging me for it. I\u2019m going to need to contract developers down the road, so I need to learn to start collaborating. In general, sheltering yourself from other programmers is a surefire way to stunt your professional growth. Bugs are easier to see with more than one pair of eyes, and even explaining concepts to someone else will help you better retain them. Reason #4: You\u2019re using incompatible learning resources Nobody says you have to stick with one particular learning resource. I mean, it\u2019s good to stay focused on one thing to completion, but if you get stuck, ask yourself these questions before you switch: Are you being engaged by the instructor and the material? Does the course explain primary concepts well? (such as, why you\u2019re doing something, or what problem it solves) If the answer to either of these is \u201cno\u201d, you\u2019ll likely want to look at other options. Your learning time is too valuable to waste on incompatible and inadequate material. Furthermore, engagement and understanding have a tight relationship, and increasing engagement will improve your understanding of the material. So, if your instructor or course material isn\u2019t doing it for you, don\u2019t be afraid to go off-track a bit. For example, if you\u2019re learning JavaScript objects, but are unable to wrap your head around why one would want to use an object, pause the video and do some Googling until something clicks with you. Fight the urge to just give up. There will be material out there that speaks to you, and it won\u2019t be brand new to your brain. Our chances of understanding increase exponentially with each pass. One of the greatest benefits of teaching ourselves is the ability to choose our learning material. However, be aware that this can come at a price (literally) if we don\u2019t vet our choices well, such as enrolling in an expensive online course that is text-based when you\u2019re a visual learner. At the end of the day, the onus is on you to take this information and make something of it. That\u2019s where 95% of you will fail. Be in the 5% that takes responsibility for the fact that your courses aren\u2019t good quality, your education experience sucked, you don\u2019t know what you\u2019re doing anymore, and/or you\u2019re an isolated student. Then, bury down your ego, and carry on. You\u2019re back, with a vengeance. \ud83d\udc4a\ud83c\udffc There are more reasons than just these four, and I may be editing this post as time goes on, and I experience more of this rollercoaster we call learning web development. I\u2019m interested in hearing your thoughts in the comments, on Twitter @lavie_encode, or on the LVEC Facebook page. If this article was useful to you, please remember to click the PURPLE \ud83d\ude09 heart button! ", "name": "814", "child": "814_1\t814_2\t814_3\t814_4\t814_5\t814_6814_1\t814_2\t814_3\t814_4\t814_5\t814_6", "timestamp": "Apr 11"}