{"name": "918", "parent": "", "content": "How to build a pre-rendered, SEO-friendly Vue.js\u00a0app David Ragusa,\u00a0Unsplash \u201cI can\u2019t take it anymore. Our in-house reporting panel sucks!\u201d Our product manager was pissed. The crumbling app he was trying to pull data from was\u2026 disastrous. \u201cMax, we need better reporting. Can you fix it?\u201d \u201cHonestly, I\u2019d much rather build a brand new app,\u201d I answered, grinning. \u201cSure, go ahead. Carte blanche, buddy.\u201d I rubbed my hands, grinning still. FINALLY, an occasion to use the JS framework everyone\u2019s been raving about: Vue.js. I\u2019ve just finished coding that app, and I loved it. Inspired by my recent experience, I took some time to craft a Vue.js tutorial for our community. Now, I\u2019ll be covering mostly two topics in here: More specifically, I\u2019ll walk you through creating a small shop with SEO-friendly product pages. I\u2019ve slightly touched on Vue in my latest headless CMS post, but this one will go much deeper, so I\u2019m excited. GitHub repo and live Vue\u00a0demo Before we get started, everything we\u2019ll discuss here is open source, and I have a live example up as well. See GitHub code repo See live Vue.js demo What is Vue.js\u00a0exactly? Let\u2019s start by dropping a little knowledge for those not familiar with the progressive framework. Vue is a lightweight, progressive JavaScript framework that helps you create web interfaces. Don\u2019t be fooled by the \u201cJS framework\u201d part of the definition just yet. For Vue is quite different from its trendy counterparts\u200a\u2014\u200aReact.js & Angular.js. For starters, it\u2019s not an open source by-product of commercial tech giants like Google and Facebook. Evan You first released it in 2014, with the intention of creating an \u201cincrementally adoptable,\u201d modern JS library. That\u2019s one of the most powerful features of Vue: creating pluggable components you can add to any project without undergoing major refactors. Any developer can try out Vue in a project without jeopardizing or burdening its existing code base. Pattern terminology apart, I feel like the premises of Vue are: 1. You can\u2019t know the entire state architecture of your app from the start. 2. Your data will surely change on the runtime. It\u2019s around these constraints that the library shapes itself: it\u2019s incremental, component-based, and reactive. The granular architecture of the components lets you easily separate your logic concerns while maintaining reusability for them. On top of that, it natively binds your data to the views so they magically update when necessary (through watchers). Although the same definition could be said of many reactive front-end frameworks, I found Vue just achieved it more elegantly, and, for the majority of my use cases, in a better way. Vue also has a softer learning curve than, say, React, which requires JSX templating knowledge. One could even say Vue is React minus the awkward parts. For more in-depth comparisons with other JS frameworks\u200a\u2014\u200aReact, Angular, Ember, Knockout, Polymer, Riot\u200a\u2014\u200acheck out the official docs on the subject. Last but not least, the performance & insightful dev tools Vue offers make for a great coding experience. No wonder its adoption is skyrocketing. From open source projects like Laravel & PageKit to enterprise ones like Gitlab & Codeship (not to mention the Alibaba & Baidu giants), lots of organizations are using Vue. Now, however, it\u2019s time to see how you\u2019re going to use it here. Our Vue.js example: a quick, SEO-friendly e-commerce app In this section, I\u2019ll show you how to build a small e-commerce app using Vue 2.0 & Snipcart, our HTML/JS cart platform for devs. You\u2019ll also see how to make sure product pages are properly \u201ccrawlable\u201d for search engine bots. Pre-requisites If you want to dive deeper into all things Vue 2.0, Laracasts\u2019 got you covered with this series. 1. Setting up the environment First, use the vue-cli to scaffold a basic Vue app. In your favorite terminal, input: npm install -g vue-cli vue init webpack-simple vue-snipcart This will create a new vue-snipcart folder containing a basic configuration using vue-loader. It will also enable you to write a single file component (template/js/css in the same\u00a0.vue file). I want this demo to feel as real as possible, so let\u2019s add two more modules widely used in Vue SPA for large applications: vuex and vue-router. To install these, go in your new vue-snipcart project folder and run the following commands: npm install --save vue-router npm intsall --save vuex Another thing to install now is the prerender-spa-plugin, which will allow you to prerender crawlable routes: npm install --save prerender-spa-plugin Almost there. The last four packages are: Run these: npm install --save pug npm install --save vuex-router-sync npm install --save copy-webpack-plugin npm install --save babel-polyfill 2. Assembling the architecture Installs: check. Time to set everything so it can handle the store\u2019s data. Let\u2019s start with vuex store. You\u2019ll use this to store/access our products info. For this demo, I\u2019ll use static data, although this would still work if you were to fetch it instead. Note: with Snipcart, we inject the cart with a basic JS snippet, and define products in the markup with simple HTML attributes. 2.1 Building the\u00a0store Create a store folder in the src one, along with 3 files: 2.2 Building the\u00a0router Let\u2019s keep the store basic: a homepage listing products + a details page for each product. You\u2019ll need to register two routes in the router to handle these: These components haven\u2019t been created yet, but no worries, they\u2019re coming later.\u00a0;) Note that I employed mode: 'history' in my VueRouter declaration. This is important, as the prerender plugin won't work otherwise. The difference is that the router will use the history API instead of hashbangs to navigate. 2.3 Linking everything together Now that you have both your store and your router, you\u2019ll need to register them in the app. Hop in your src/main.js file and update it as follows: Quite simple, right? As mentioned earlier, the sync method from the vuex-router-sync package injects some of the current route information in the store state. It\u2019ll be helpful later on. 3. Crafting the Vue components Having data feels awesome, but showing it is even better. You can use three components to achieve that: Each of them will be in the src/components folder. Above, the store state is used to get products and iterate on them to render a product component for each one. You link to each page, handled by your router, which brings us to your last component. This one has a little more logic than the others. You get the current ID from the route and then get the associated product from the getter previously created. 4. Creating the\u00a0app Let\u2019s use your new components, yeah? Open the App.vue file. Content in there is still the default one generated from the vue init webpack-simple scaffolding. Swap everything to this instead: The TopContext component isn't really important: it acts only as a header. The key part is the router-view one: it will be determined dynamically by VueRouter, and the associated component defined earlier will be injected instead. The last view to update is the index.html. For this use case, let\u2019s create a new static folder in the src one. There, you'll move the index file, and update as follows: You can see I added Snipcart\u2019s necessary scripts in the default view. A small component granularly including them could have been cleaner, but since all the views need them, I did it this way. 5. Handling Vue.js SEO with the Prerender plugin Everything in the app is rendered dynamically with JS, which isn\u2019t super for SEO: the asynchronous content of pages can\u2019t be optimally crawled by search engine bots. It wouldn\u2019t be smart to have an e-commerce website missing out on all that organic traffic opportunity! Let\u2019s use prerendering to bring more SEO opportunities to your Vue.js app. Compared to Vue SSR (Server-Side Rendering), prerendering is much easier to set up. And quite frankly, the former is often overkill, unless you\u2019re dealing with lots of routes. Plus, both achieve quite similar results on an SEO level. Prerendering will allow you to keep your front end as a fast, light static site that\u2019s easily crawlable. Let\u2019s see how you can use it. Go to your webpack file and add the following declaration to your top level export: Okay, so how does this work? The CopyWebpackPlugin will copy your static folder (only containing the view referencing our Vue App) to your dist folder. Then, the PrerenderSpaPlugin will use PhantomJS to load the content of your pages and use the results as static assets. And voil\u00e0! You\u2019ve now got prerendered, SEO-friendly product pages for a Vue app. You can test it yourself with the following command: npm run build This will generate a dist folder containing everything needed for production. Other important SEO considerations Conclusion Since I had worked with Vue before, crafting this tutorial went rather smoothly. I must\u2019ve spent an hour on the demo. I struggled a bit to get CopyWebpackPlugin to work, but eventually found answers in their docs. I hope this post encourages developers to start using Vue in some projects. Like I said, you can start slowly, by developing a tiny part of an existing project with it. I think it\u2019s definitely worth a try. Our lead developer is coding our latest merchant dashboard feature with Vue as I\u2019m writing this, and he loves it. Plus, when set up right, a Vue app can drive good SEO results. If you feel like getting inspired first, check out the Vue.js Awesome list, which curates loads of Vue examples & projects. And if you end up really digging Vue, cop some swag or support the creator! If you found this post valuable, take a second to share it on Twitter. Found something I missed? Got thoughts on Vue, other frameworks, or handling SEO with them? Comments are all yours! I originally published this on the Snipcart Blog and shared it in our newsletter. ", "title": "How to build a pre-rendered, SEO-friendly Vue.js\u00a0app", "sentences": [{"dfef": "How to build a pre-rendered, SEO-friendly Vue.js\u00a0app"}, {"b1b5": "David Ragusa,\u00a0Unsplash"}, {"f0e9": "\u201cI can\u2019t take it anymore. Our in-house reporting panel sucks!\u201d"}, {"03ba": "Our product manager was pissed. The crumbling app he was trying to pull data from was\u2026 disastrous."}, {"9ef3": "\u201cMax, we need better reporting. Can you fix it?\u201d"}, {"2464": "\u201cHonestly, I\u2019d much rather build a brand new app,\u201d I answered, grinning."}, {"d852": "\u201cSure, go ahead. Carte blanche, buddy.\u201d"}, {"4302": "I rubbed my hands, grinning still. FINALLY, an occasion to use the JS framework everyone\u2019s been raving about: Vue.js."}, {"1b63": "I\u2019ve just finished coding that app, and I loved it."}, {"7290": "Inspired by my recent experience, I took some time to craft a Vue.js tutorial for our community. Now, I\u2019ll be covering mostly two topics in here:"}, {"b2e8": "More specifically, I\u2019ll walk you through creating a small shop with SEO-friendly product pages."}, {"ef8b": "I\u2019ve slightly touched on Vue in my latest headless CMS post, but this one will go much deeper, so I\u2019m excited."}, {"6da0": "GitHub repo and live Vue\u00a0demo"}, {"53e0": "Before we get started, everything we\u2019ll discuss here is open source, and I have a live example up as well."}, {"afbd": "See GitHub code repo"}, {"c490": "See live Vue.js demo"}, {"e6c6": "What is Vue.js\u00a0exactly?"}, {"0f87": "Let\u2019s start by dropping a little knowledge for those not familiar with the progressive framework."}, {"3ea7": "Vue is a lightweight, progressive JavaScript framework that helps you create web interfaces."}, {"7c0d": "Don\u2019t be fooled by the \u201cJS framework\u201d part of the definition just yet. For Vue is quite different from its trendy counterparts\u200a\u2014\u200aReact.js & Angular.js. For starters, it\u2019s not an open source by-product of commercial tech giants like Google and Facebook."}, {"33bc": "Evan You first released it in 2014, with the intention of creating an \u201cincrementally adoptable,\u201d modern JS library. That\u2019s one of the most powerful features of Vue: creating pluggable components you can add to any project without undergoing major refactors. Any developer can try out Vue in a project without jeopardizing or burdening its existing code base."}, {"99ca": "Pattern terminology apart, I feel like the premises of Vue are:"}, {"f16f": "1. You can\u2019t know the entire state architecture of your app from the start."}, {"4fd3": "2. Your data will surely change on the runtime."}, {"625d": "It\u2019s around these constraints that the library shapes itself: it\u2019s incremental, component-based, and reactive. The granular architecture of the components lets you easily separate your logic concerns while maintaining reusability for them. On top of that, it natively binds your data to the views so they magically update when necessary (through watchers). Although the same definition could be said of many reactive front-end frameworks, I found Vue just achieved it more elegantly, and, for the majority of my use cases, in a better way."}, {"1b75": "Vue also has a softer learning curve than, say, React, which requires JSX templating knowledge. One could even say Vue is React minus the awkward parts."}, {"ca4f": "For more in-depth comparisons with other JS frameworks\u200a\u2014\u200aReact, Angular, Ember, Knockout, Polymer, Riot\u200a\u2014\u200acheck out the official docs on the subject."}, {"4662": "Last but not least, the performance & insightful dev tools Vue offers make for a great coding experience. No wonder its adoption is skyrocketing."}, {"169e": "From open source projects like Laravel & PageKit to enterprise ones like Gitlab & Codeship (not to mention the Alibaba & Baidu giants), lots of organizations are using Vue."}, {"cb4a": "Now, however, it\u2019s time to see how you\u2019re going to use it here."}, {"a25f": "Our Vue.js example: a quick, SEO-friendly e-commerce app"}, {"83d5": "In this section, I\u2019ll show you how to build a small e-commerce app using Vue 2.0 & Snipcart, our HTML/JS cart platform for devs. You\u2019ll also see how to make sure product pages are properly \u201ccrawlable\u201d for search engine bots."}, {"dd14": "Pre-requisites"}, {"1486": "If you want to dive deeper into all things Vue 2.0, Laracasts\u2019 got you covered with this series."}, {"c101": "1. Setting up the environment"}, {"3ca5": "First, use the vue-cli to scaffold a basic Vue app. In your favorite terminal, input:"}, {"0aa3": "npm install -g vue-cli vue init webpack-simple vue-snipcart"}, {"4d99": "This will create a new vue-snipcart folder containing a basic configuration using vue-loader. It will also enable you to write a single file component (template/js/css in the same\u00a0.vue file)."}, {"1bd8": "I want this demo to feel as real as possible, so let\u2019s add two more modules widely used in Vue SPA for large applications: vuex and vue-router."}, {"12ec": "To install these, go in your new vue-snipcart project folder and run the following commands:"}, {"af5d": "npm install --save vue-router npm intsall --save vuex"}, {"f943": "Another thing to install now is the prerender-spa-plugin, which will allow you to prerender crawlable routes:"}, {"c63d": "npm install --save prerender-spa-plugin"}, {"b41a": "Almost there. The last four packages are:"}, {"13d9": "Run these:"}, {"c9d8": "npm install --save pug npm install --save vuex-router-sync npm install --save copy-webpack-plugin npm install --save babel-polyfill"}, {"2528": "2. Assembling the architecture"}, {"a7fb": "Installs: check. Time to set everything so it can handle the store\u2019s data."}, {"28d4": "Let\u2019s start with vuex store. You\u2019ll use this to store/access our products info."}, {"f536": "For this demo, I\u2019ll use static data, although this would still work if you were to fetch it instead."}, {"b8a9": "Note: with Snipcart, we inject the cart with a basic JS snippet, and define products in the markup with simple HTML attributes."}, {"97e2": "2.1 Building the\u00a0store"}, {"0620": "Create a store folder in the src one, along with 3 files:"}, {"2e4e": "2.2 Building the\u00a0router"}, {"e604": "Let\u2019s keep the store basic: a homepage listing products + a details page for each product. You\u2019ll need to register two routes in the router to handle these:"}, {"431d": "These components haven\u2019t been created yet, but no worries, they\u2019re coming later.\u00a0;)"}, {"2f0a": "Note that I employed mode: 'history' in my VueRouter declaration. This is important, as the prerender plugin won't work otherwise. The difference is that the router will use the history API instead of hashbangs to navigate."}, {"7641": "2.3 Linking everything together"}, {"4d53": "Now that you have both your store and your router, you\u2019ll need to register them in the app. Hop in your src/main.js file and update it as follows:"}, {"8cb4": "Quite simple, right? As mentioned earlier, the sync method from the vuex-router-sync package injects some of the current route information in the store state. It\u2019ll be helpful later on."}, {"1c08": "3. Crafting the Vue components"}, {"4c78": "Having data feels awesome, but showing it is even better. You can use three components to achieve that:"}, {"7e3a": "Each of them will be in the src/components folder."}, {"e386": "Above, the store state is used to get products and iterate on them to render a product component for each one."}, {"f682": "You link to each page, handled by your router, which brings us to your last component."}, {"ad7c": "This one has a little more logic than the others. You get the current ID from the route and then get the associated product from the getter previously created."}, {"1843": "4. Creating the\u00a0app"}, {"bdd1": "Let\u2019s use your new components, yeah?"}, {"dda5": "Open the App.vue file. Content in there is still the default one generated from the vue init webpack-simple scaffolding."}, {"ac22": "Swap everything to this instead:"}, {"1b6e": "The TopContext component isn't really important: it acts only as a header. The key part is the router-view one: it will be determined dynamically by VueRouter, and the associated component defined earlier will be injected instead."}, {"8ddc": "The last view to update is the index.html. For this use case, let\u2019s create a new static folder in the src one. There, you'll move the index file, and update as follows:"}, {"42bf": "You can see I added Snipcart\u2019s necessary scripts in the default view. A small component granularly including them could have been cleaner, but since all the views need them, I did it this way."}, {"80ba": "5. Handling Vue.js SEO with the Prerender plugin"}, {"e404": "Everything in the app is rendered dynamically with JS, which isn\u2019t super for SEO: the asynchronous content of pages can\u2019t be optimally crawled by search engine bots. It wouldn\u2019t be smart to have an e-commerce website missing out on all that organic traffic opportunity!"}, {"0a19": "Let\u2019s use prerendering to bring more SEO opportunities to your Vue.js app."}, {"ba4d": "Compared to Vue SSR (Server-Side Rendering), prerendering is much easier to set up. And quite frankly, the former is often overkill, unless you\u2019re dealing with lots of routes. Plus, both achieve quite similar results on an SEO level."}, {"fa1f": "Prerendering will allow you to keep your front end as a fast, light static site that\u2019s easily crawlable."}, {"ffcd": "Let\u2019s see how you can use it. Go to your webpack file and add the following declaration to your top level export:"}, {"8287": "Okay, so how does this work?"}, {"92a8": "The CopyWebpackPlugin will copy your static folder (only containing the view referencing our Vue App) to your dist folder. Then, the PrerenderSpaPlugin will use PhantomJS to load the content of your pages and use the results as static assets."}, {"d47a": "And voil\u00e0! You\u2019ve now got prerendered, SEO-friendly product pages for a Vue app."}, {"1d88": "You can test it yourself with the following command:"}, {"32b7": "npm run build"}, {"dc3d": "This will generate a dist folder containing everything needed for production."}, {"f527": "Other important SEO considerations"}, {"a5ca": "Conclusion"}, {"ff58": "Since I had worked with Vue before, crafting this tutorial went rather smoothly. I must\u2019ve spent an hour on the demo. I struggled a bit to get CopyWebpackPlugin to work, but eventually found answers in their docs."}, {"9ce5": "I hope this post encourages developers to start using Vue in some projects. Like I said, you can start slowly, by developing a tiny part of an existing project with it. I think it\u2019s definitely worth a try. Our lead developer is coding our latest merchant dashboard feature with Vue as I\u2019m writing this, and he loves it. Plus, when set up right, a Vue app can drive good SEO results."}, {"61c3": "If you feel like getting inspired first, check out the Vue.js Awesome list, which curates loads of Vue examples & projects."}, {"21a3": "And if you end up really digging Vue, cop some swag or support the creator!"}, {"a1c9": "If you found this post valuable, take a second to share it on Twitter. Found something I missed? Got thoughts on Vue, other frameworks, or handling SEO with them? Comments are all yours!"}, {"5037": "I originally published this on the Snipcart Blog and shared it in our newsletter."}], "child": "918_1\t918_2918_1\t918_2"}