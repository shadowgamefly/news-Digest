{"name": "462", "parent": "", "content": "Consuming REST API using Retrofit Library in\u00a0Android Hi Android beginner developers, in this tutorial, i\u2019ll introduce you to the Retrofit Library and also try to provide a step by step guide on how to consume JSON objects using the retrofit library. This practice requires that you are familiar with Java and Android App development. For those interested in learning the very basics of Java, check my blog for some very old articles i wrote on Introduction to Java In this tutorial, we are going to create an Android App that uses the Retrofit Library to download JSON Objects containing movie details from The Movie DB API, this movie details will now be displayed in a RecyclerView on the Android App. Find the full source code for the project here on GitHub. What is Retrofit? Retrofit is a REST Client library (Helper Library) used in Android and Java to create an HTTP request and also to process the HTTP response from a REST API. It was created by Square, you can also use retrofit to receive data structures other than JSON, for example SimpleXML and Jackson. Before we continue, let\u2019s briefly define REST Client and REST API in our context. REST Client in our case is the Retrofit library that is used on the client side (Android) to make HTTP request to REST API, in our case, The Movie DB API and also process the response. A REST API defines a set of functions which developers can perform requests and receive responses via HTTP protocol such as GET and POST. in our case, The Movie DB (TMDB) API is the REST API. We can also simply say that a RESTful API is an application program interface (API) that uses HTTP requests to GET, PUT, POST and DELETE data. To use Retrofit in your Android Application, you\u2019ll need 3 major classes. According to Square, creators of Retrofit documentation, Retrofit turns your HTTP API into a Java interface. Sample codes for the interface and the method declared in it are as below: public interface GitHubService { @GET(\"users/{user}/repos\") Call<List<Repo>> listRepos(@Path(\"user\") String user); @GET(\"group/{id}/users\") Call<List<User>> groupList(@Path(\"id\") int groupId); } Every method inside an interface represents one possible API call. It must have a HTTP annotation (GET, POST, etc.) to specify the request type and the relative URL. The return value wraps the response in a Call object with the type of the expected result. Query parameters can also be added to a method. @GET(\u201cgroup/{id}/users\u201d) Call<List<User>> groupList(@Path(\u201cid\u201d) int groupId, @Query(\u201csort\u201d) String sort); You can use replacement blocks and query parameters to adjust the URL. A replacement block is added to the relative URL with {}. With the help of the @Path annotation on the method parameter, the value of that parameter is bound to the specific replacement block. 2. A Retrofit class which generates an implementation of the GitHubService interface. The below sample code would be inside the Retrofit class and this is how it creates an instance of Retrofit and implements the listRepos() method that\u2019s in the GitHubService Interface. Retrofit retrofit = new Retrofit.Builder() .baseUrl(\u201chttps://api.github.com/\") .build(); GitHubService service = retrofit.create(GitHubService.class); Call<List<Repo>> repos = service.listRepos(\u201cGino Osahon\u201d); 3. The last of the 3 needed class is a simple POJO that matches each field in the JSON response object gotten from querying an API. It\u2019s a simple class with getter and setter methods for each fields. We\u2019ll see sample codes later. Retrofit Converters Retrofit Converters are like an agreement between and Android client and the Server on the format on which data will be represented. Both parties can agree that for our communication, the format for data transfer will be JSON, as in our case in this tutorial. Remember i said apart from the JSON structure converter, we have others and here are some supported by Retrofit. Gson: Gson is for JSON mapping and can be added with the following dependency: compile \u2018com.squareup.retrofit2:converter-gson:2.2.0\u2019 SimpleXML SimpleXML is for XML mapping. You\u2019ll need the following line for your build.gradle: compile \u2018com.squareup.retrofit2:converter-simplexml:2.2.0\u2019 Jackson Jackson is an alternative to Gson and claims to be faster in mapping JSON data. The setup offers you a lot more customization and might be worth a look. You can add it with: compile \u2018com.squareup.retrofit2:converter-jackson:2.2.0\u2019 Moshi Moshi is another alternative to Gson. It\u2019s created by the developers of Retrofit. Moshi is based on Gson, but differentiates itself with some simplifications. If you want to give this young new player on the market a try, add it with: compile \u2018com.squareup.retrofit2:converter-moshi:2.2.0\u2019 Retrofit supports Authentication for API calls that require the user to be authenticated before using the API to access resources. Querying Twitter, Facebook and StackoverFlow all require authentication. However, authentication feature is out of the scope of this tutorial as we\u2019ll simply be querying The Movie DB(TMDB) API which requires no authentication. Hmm! Enough talk, now It\u2019s time to write some codes. Let\u2019s now create an Android App using Android Studio. The App uses Retrofit to fetch Movie details from \u201cThe Movie DB\u201d website and then displays these details on the Android Client RecyclerView Activity. We\u2019ll be using the TMDB API, So the first step is to get the API key from their website. TMDB is a popular website for getting information on movies, it\u2019s a community built movie and TV database. It also provides a REST API that is well documented. Queries can be built using this API. click here to see the API documentation. Click here for the website\u2019s instructions on how to obtain API key, you just need to register and be logged in. CREATE ANDROID APP dependencies { compile fileTree(dir: \u2018libs\u2019, include: [\u2018*.jar\u2019]) testCompile \u2018junit:junit:4.12\u2019 compile \u2018com.android.support:appcompat-v7:23.3.0\u2019 // retrofit, gson compile \u2018com.squareup.picasso:picasso:2.5.2\u2019 compile \u2018com.squareup.retrofit2:retrofit:2.1.0\u2019 compile \u2018com.squareup.retrofit2:converter-gson:2.1.0\u2019 compile \u2018com.android.support:recyclerview-v7:25.0.0\u2019 } You might be wondering why add recyclerview and picasso dependencies, since we\u2019ll be using Picasso to load image URLs into an imageView and we\u2019ll display the movie details in a RecyclerView, so adding their dependencies at this stage is wise. 3. Since we\u2019ll be querying the TMDB API which is a network operations we\u2019ll need to add INTERNET permissions in AndroidManifest.xml file: <?xml version=\u201d1.0\" encoding=\u201dutf-8\"?> <manifest xmlns:android=\u201dhttp://schemas.android.com/apk/res/android\" package=\u201dapp.movie.tutorial.com\u201d> <uses-permission android:name=\u201dandroid.permission.INTERNET\u201d/> <application android:icon=\u201d@mipmap/ic_launcher\u201d android:label=\u201d@string/app_name\u201d android:theme=\u201d@style/AppTheme\u201d> <activity android:name=\u201dapp.movie.tutorial.com.activity.MainActivity\u201d> <intent-filter> <action android:name=\u201dandroid.intent.action.MAIN\u201d /> <category android:name=\u201dandroid.intent.category.LAUNCHER\u201d /> </intent-filter> </activity> </application> </manifest> 4. Create four sub packages named activity, adapter, rest and model in your main package. Move your empty MainActivity into the activity package. Remember that after querying TMDB API, a JSON response will be returned. We need to know the exact fields that will be included in the response, so we can create a POJO that will be able to parse the latest movies. For us to know these fields in advance, let\u2019s first define how a basic movie representation should look like Using this URL (http://api.themoviedb.org/3/movie/top_rated?api_key=INSERT_YOUR_API_KEY) we can get the last 50 movies. Let\u2019s insert it into browser and see. Using JsonViewer you can see JSON in more structured way. Copy the response from browser to this JsonViewer and this online tool show JSON like below: 5. So now that what we have seen the expected fields from the above image which shows the different fields of the JSON response, let\u2019s create a class named Movie.java under model package which is a simple POJO to hold all fields and provide getter and setter methods for fields that we are expecting in the JSON response object. Past the below code in the Movie.java file. /** * Created by Gino Osahon on 13/03/2017. */ public class Movie { @SerializedName(\"poster_path\") private String posterPath; @SerializedName(\"adult\") private boolean adult; @SerializedName(\"overview\") private String overview; @SerializedName(\"release_date\") private String releaseDate; @SerializedName(\"genre_ids\") private List<Integer> genreIds = new ArrayList<Integer>(); @SerializedName(\"id\") private Integer id; @SerializedName(\"original_title\") private String originalTitle; @SerializedName(\"original_language\") private String originalLanguage; @SerializedName(\"title\") private String title; @SerializedName(\"backdrop_path\") private String backdropPath; @SerializedName(\"popularity\") private Double popularity; @SerializedName(\"vote_count\") private Integer voteCount; @SerializedName(\"video\") private Boolean video; @SerializedName(\"vote_average\") private Double voteAverage; public Movie(String posterPath, boolean adult, String overview, String releaseDate, List<Integer> genreIds, Integer id, String originalTitle, String originalLanguage, String title, String backdropPath, Double popularity, Integer voteCount, Boolean video, Double voteAverage) { this.posterPath = posterPath; this.adult = adult; this.overview = overview; this.releaseDate = releaseDate; this.genreIds = genreIds; this.id = id; this.originalTitle = originalTitle; this.originalLanguage = originalLanguage; this.title = title; this.backdropPath = backdropPath; this.popularity = popularity; this.voteCount = voteCount; this.video = video; this.voteAverage = voteAverage; } public String getPosterPath() { return posterPath; } public void setPosterPath(String posterPath) { this.posterPath = posterPath; } public boolean isAdult() { return adult; } public void setAdult(boolean adult) { this.adult = adult; } public String getOverview() { return overview; } public void setOverview(String overview) { this.overview = overview; } public String getReleaseDate() { return releaseDate; } public void setReleaseDate(String releaseDate) { this.releaseDate = releaseDate; } public List<Integer> getGenreIds() { return genreIds; } public void setGenreIds(List<Integer> genreIds) { this.genreIds = genreIds; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getOriginalTitle() { return originalTitle; } public void setOriginalTitle(String originalTitle) { this.originalTitle = originalTitle; } public String getOriginalLanguage() { return originalLanguage; } public void setOriginalLanguage(String originalLanguage) { this.originalLanguage = originalLanguage; } public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } public String getBackdropPath() { return backdropPath; } public void setBackdropPath(String backdropPath) { this.backdropPath = backdropPath; } public Double getPopularity() { return popularity; } public void setPopularity(Double popularity) { this.popularity = popularity; } public Integer getVoteCount() { return voteCount; } public void setVoteCount(Integer voteCount) { this.voteCount = voteCount; } public Boolean getVideo() { return video; } public void setVideo(Boolean video) { this.video = video; } public Double getVoteAverage() { return voteAverage; } public void setVoteAverage(Double voteAverage) { this.voteAverage = voteAverage; } } 6. We also need to create MovieResponse.java class inside the model package, since we have some extra fields like page number. This class contains all fetched movies and extra information. Create MovieResponse.java under model package and past the below code. /** * Created by Gino Osahon on 13/03/2017. */ // This class contains all fetched movies and extra information public class MovieResponse { @SerializedName(\"page\") private int page; @SerializedName(\"results\") private List<Movie> results; @SerializedName(\"total_results\") private int totalResults; @SerializedName(\"total_pages\") private int totalPages; public int getPage() { return page; } public void setPage(int page) { this.page = page; } public List<Movie> getResults() { return results; } public void setResults(List<Movie> results) { this.results = results; } public int getTotalResults() { return totalResults; } public void setTotalResults(int totalResults) { this.totalResults = totalResults; } public int getTotalPages() { return totalPages; } public void setTotalPages(int totalPages) { this.totalPages = totalPages; } } 7. Next, let\u2019s define the Interface containing the Endpoint method used to query the TMDB API. Special retrofit annotations are used to encode details about the parameters and request method. the interface defines each endpoint in the following way. Note that we only have one endpoint method in the Interface, in a real programming world scenario, you can have multiple endpoints methods inside the interface. So create an interface named MovieApiService.java and past the below codes. /** * Created by Gino Osahon on 13/03/2017. */ public interface MovieApiService { @GET(\u201cmovie/top_rated\u201d) Call<MovieResponse> getTopRatedMovies(@Query(\u201capi_key\u201d) String apiKey); } 8. Let\u2019s now create the MainActivty.java class which is the activity from where we make request to the Movie DB API. Open the MainActivity.java and insert in the below codes. public class MainActivity extends AppCompatActivity{ private static final String TAG = MainActivity.class.getSimpleName(); public static final String BASE_URL = \"http://api.themoviedb.org/3/\"; private static Retrofit retrofit = null; private RecyclerView recyclerView = null; // insert your themoviedb.org API KEY here private final static String API_KEY = \"\"; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); recyclerView = (RecyclerView) findViewById(R.id.recycler_view); recyclerView.setHasFixedSize(true); recyclerView.setLayoutManager(new LinearLayoutManager(this)); connectAndGetApiData(); } // This method create an instance of Retrofit // set the base url public void connectAndGetApiData(){ if (retrofit == null) { retrofit = new Retrofit.Builder() .baseUrl(BASE_URL) .addConverterFactory(GsonConverterFactory.create()) .build(); } MovieApiService movieApiService = retrofit.create(MovieApiService.class); Call<MovieResponse> call = movieApiService.getTopRatedMovies(API_KEY); call.enqueue(new Callback<MovieResponse>() { @Override public void onResponse(Call<MovieResponse> call, Response<MovieResponse> response) { List<Movie> movies = response.body().getResults(); recyclerView.setAdapter(new MoviesAdapter(movies, R.layout.list_item_movie, getApplicationContext())); Log.d(TAG, \"Number of movies received: \" + movies.size()); } @Override public void onFailure(Call<MovieResponse> call, Throwable throwable) { Log.e(TAG, throwable.toString()); } }); } } Retrofit will download and parse the API data on a background thread, and then return the results back to the UI thread via the onResponse or onFailure method. 9. It\u2019s time to display the result gotten from querying the API using the above codes on the layout. We\u2019ll need to create a layout which will contain 4 textViews and 2 imageViews. Open colors.xml and add the below color values <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <color name=\"colorPrimary\">#3F51B5</color> <color name=\"colorPrimaryDark\">#303F9F</color> <color name=\"colorAccent\">#FF4081</color> <color name=\"orange\">#FF3909</color> <color name=\"colorAccentDark\">#00B482</color> <color name=\"colorBlack\">#555555</color> <color name=\"colorWhite\">#FFFFFF</color> <color name=\"colorGrey\">#707070</color> <color name=\"colorGreyLight\">#8A8A8A</color> </resources> 10. In other to the display the ratings, we need to create the star imageView, so create a layout named star.xml under res drawable with the below content. <?xml version=\u201d1.0\" encoding=\u201dutf-8\"?> <! \u2014 drawable/star.xml \u2192 <vector xmlns:android=\u201dhttp://schemas.android.com/apk/res/android\" android:width=\u201d24dp\u201d android:height=\u201d24dp\u201d android:viewportHeight=\u201d24\" android:viewportWidth=\u201d24\"> <path android:fillColor=\u201d#000\" android:pathData=\u201dM12,17.27L18.18,21L16.54,13.97L22,9.24L14.81,8.62L12,2L9.19,8.62L2,9.24L7.45,13.97L5.82,21L12,17.27Z\u201d /> </vector> 11. Open the activity_main.xml file and copy the below code into it. <?xml version=\u201d1.0\" encoding=\u201dutf-8\"?> <LinearLayout xmlns:android=\u201dhttp://schemas.android.com/apk/res/android\" xmlns:tools=\u201dhttp://schemas.android.com/tools\" android:layout_width=\u201dmatch_parent\u201d android:layout_height=\u201dmatch_parent\u201d tools:context=\u201dapp.movie.tutorial.com.activity.MainActivity\u201d> <android.support.v7.widget.RecyclerView android:id=\u201d@+id/recycler_view\u201d android:scrollbars=\u201dvertical\u201d android:layout_width=\u201dmatch_parent\u201d android:layout_height=\u201dmatch_parent\u201d/> </LinearLayout> 12. Create a layout named list_item_movie.xml under res layout folder <?xml version=\u201d1.0\" encoding=\u201dutf-8\"?> <LinearLayout xmlns:android=\u201dhttp://schemas.android.com/apk/res/android\" android:id=\u201d@+id/movies_layout\u201d android:layout_width=\u201dmatch_parent\u201d android:layout_height=\u201dwrap_content\u201d android:gravity=\u201dcenter_vertical\u201d android:minHeight=\u201d72dp\u201d android:orientation=\u201dhorizontal\u201d android:padding=\u201d16dp\u201d> <LinearLayout android:layout_width=\u201d0dp\u201d android:layout_height=\u201dwrap_content\u201d android:layout_weight=\u201d1\" android:orientation=\u201dvertical\u201d> <ImageView android:id=\u201d@+id/movie_image\u201d android:layout_width=\u201dwrap_content\u201d android:layout_height=\u201dwrap_content\u201d android:layout_gravity=\u201dtop\u201d android:paddingRight=\u201d16dp\u201d/> <TextView android:id=\u201d@+id/title\u201d android:layout_width=\u201dwrap_content\u201d android:layout_height=\u201dwrap_content\u201d android:paddingRight=\u201d16dp\u201d android:textStyle=\u201dbold\u201d android:textColor=\u201d@color/colorBlack\u201d android:textSize=\u201d16sp\u201d /> <TextView android:id=\u201d@+id/date\u201d android:layout_width=\u201dwrap_content\u201d android:layout_height=\u201dwrap_content\u201d android:paddingRight=\u201d16dp\u201d android:textColor=\u201d@color/colorGreyLight\u201d /> <TextView android:id=\u201d@+id/description\u201d android:layout_width=\u201dwrap_content\u201d android:layout_height=\u201dwrap_content\u201d android:maxLines=\u201d3\" android:paddingRight=\u201d16dp\u201d android:textColor=\u201d@color/colorGreyLight\u201d /> </LinearLayout> <LinearLayout android:layout_width=\u201dwrap_content\u201d android:layout_height=\u201d35dp\u201d android:orientation=\u201dhorizontal\u201d> <ImageView android:id=\u201d@+id/rating_image\u201d android:layout_width=\u201d15dp\u201d android:layout_height=\u201d15dp\u201d android:layout_centerInParent=\u201dtrue\u201d android:scaleType=\u201dcenterCrop\u201d android:src=\u201d@drawable/star\u201d android:tint=\u201d@color/colorAccent\u201d /> <TextView android:id=\u201d@+id/rating\u201d android:layout_width=\u201dwrap_content\u201d android:layout_height=\u201dwrap_content\u201d android:layout_marginLeft=\u201d8dp\u201d android:text=\u201d5.0\" /> </LinearLayout> </LinearLayout> 12. Adapter is a common pattern which helps to bind view and data, so let\u2019s implement adapter for this. Create a class named MoviesAdapter.java under adapter package. /** * Created by Gino Osahon on 14/03/2017. */ public class MoviesAdapter extends RecyclerView.Adapter<MoviesAdapter.MovieViewHolder> { private List<Movie> movies; private int rowLayout; private Context context; public static final String IMAGE_URL_BASE_PATH=\u201dhttp://image.tmdb.org/t/p/w342//\"; public MoviesAdapter(List<Movie> movies, int rowLayout, Context context) { this.movies = movies; this.rowLayout = rowLayout; this.context = context; } //A view holder inner class where we get reference to the views in the layout using their ID public static class MovieViewHolder extends RecyclerView.ViewHolder { LinearLayout moviesLayout; TextView movieTitle; TextView data; TextView movieDescription; TextView rating; ImageView movieImage; public MovieViewHolder(View v) { super(v); moviesLayout = (LinearLayout) v.findViewById(R.id.movies_layout); movieImage = (ImageView) v.findViewById(R.id.movie_image); movieTitle = (TextView) v.findViewById(R.id.title); data = (TextView) v.findViewById(R.id.date); movieDescription = (TextView) v.findViewById(R.id.description); rating = (TextView) v.findViewById(R.id.rating); } } @Override public MoviesAdapter.MovieViewHolder onCreateViewHolder(ViewGroup parent, int viewType) { View view = LayoutInflater.from(parent.getContext()).inflate(rowLayout, parent, false); return new MovieViewHolder(view); } @Override public void onBindViewHolder(MovieViewHolder holder, final int position) { String image_url = IMAGE_URL_BASE_PATH + movies.get(position).getPosterPath(); Picasso.with(context) .load(image_url) .placeholder(android.R.drawable.sym_def_app_icon) .error(android.R.drawable.sym_def_app_icon) .into(holder.movieImage); holder.movieTitle.setText(movies.get(position).getTitle()); holder.data.setText(movies.get(position).getReleaseDate()); holder.movieDescription.setText(movies.get(position).getOverview()); holder.rating.setText(movies.get(position).getVoteAverage().toString()); } @Override public int getItemCount() { return movies.size(); } } Now save and run the App. You can download the full source code for this project on GitHub ", "title": "Android", "sentences": [{"be0d": "Consuming REST API using Retrofit Library in\u00a0Android"}, {"b42a": "Hi Android beginner developers, in this tutorial, i\u2019ll introduce you to the Retrofit Library and also try to provide a step by step guide on how to consume JSON objects using the retrofit library. This practice requires that you are familiar with Java and Android App development. For those interested in learning the very basics of Java, check my blog for some very old articles i wrote on Introduction to Java"}, {"c359": "In this tutorial, we are going to create an Android App that uses the Retrofit Library to download JSON Objects containing movie details from The Movie DB API, this movie details will now be displayed in a RecyclerView on the Android App."}, {"0587": "Find the full source code for the project here on GitHub."}, {"7054": "What is Retrofit?"}, {"814c": "Retrofit is a REST Client library (Helper Library) used in Android and Java to create an HTTP request and also to process the HTTP response from a REST API. It was created by Square, you can also use retrofit to receive data structures other than JSON, for example SimpleXML and Jackson. Before we continue, let\u2019s briefly define REST Client and REST API in our context."}, {"688e": "REST Client in our case is the Retrofit library that is used on the client side (Android) to make HTTP request to REST API, in our case, The Movie DB API and also process the response."}, {"a88e": "A REST API defines a set of functions which developers can perform requests and receive responses via HTTP protocol such as GET and POST. in our case, The Movie DB (TMDB) API is the REST API."}, {"81f4": "We can also simply say that a RESTful API is an application program interface (API) that uses HTTP requests to GET, PUT, POST and DELETE data."}, {"04f3": "To use Retrofit in your Android Application, you\u2019ll need 3 major classes."}, {"472f": "According to Square, creators of Retrofit documentation, Retrofit turns your HTTP API into a Java interface. Sample codes for the interface and the method declared in it are as below:"}, {"8e58": "public interface GitHubService {"}, {"8917": "@GET(\"users/{user}/repos\")"}, {"a290": "Call<List<Repo>> listRepos(@Path(\"user\") String user);"}, {"4eff": "@GET(\"group/{id}/users\")"}, {"3d3b": "Call<List<User>> groupList(@Path(\"id\") int groupId);"}, {"1074": "}"}, {"e9cb": "Every method inside an interface represents one possible API call. It must have a HTTP annotation (GET, POST, etc.) to specify the request type and the relative URL. The return value wraps the response in a Call object with the type of the expected result."}, {"5d16": "Query parameters can also be added to a method."}, {"c40d": "@GET(\u201cgroup/{id}/users\u201d)"}, {"85f5": "Call<List<User>> groupList(@Path(\u201cid\u201d) int groupId, @Query(\u201csort\u201d) String sort);"}, {"c143": "You can use replacement blocks and query parameters to adjust the URL. A replacement block is added to the relative URL with {}. With the help of the @Path annotation on the method parameter, the value of that parameter is bound to the specific replacement block."}, {"70a7": "2. A Retrofit class which generates an implementation of the GitHubService interface. The below sample code would be inside the Retrofit class and this is how it creates an instance of Retrofit and implements the listRepos() method that\u2019s in the GitHubService Interface."}, {"6e0a": "Retrofit retrofit = new Retrofit.Builder()"}, {"de8e": ".baseUrl(\u201chttps://api.github.com/\")"}, {"284e": ".build();"}, {"e924": "GitHubService service = retrofit.create(GitHubService.class);"}, {"09b5": "Call<List<Repo>> repos = service.listRepos(\u201cGino Osahon\u201d);"}, {"4e3a": "3. The last of the 3 needed class is a simple POJO that matches each field in the JSON response object gotten from querying an API. It\u2019s a simple class with getter and setter methods for each fields. We\u2019ll see sample codes later."}, {"36cb": "Retrofit Converters"}, {"c33a": "Retrofit Converters are like an agreement between and Android client and the Server on the format on which data will be represented. Both parties can agree that for our communication, the format for data transfer will be JSON, as in our case in this tutorial. Remember i said apart from the JSON structure converter, we have others and here are some supported by Retrofit."}, {"cfd4": "Gson:"}, {"f5e5": "Gson is for JSON mapping and can be added with the following dependency:"}, {"f35b": "compile \u2018com.squareup.retrofit2:converter-gson:2.2.0\u2019"}, {"a67c": "SimpleXML"}, {"2eaa": "SimpleXML is for XML mapping. You\u2019ll need the following line for your build.gradle:"}, {"d48a": "compile \u2018com.squareup.retrofit2:converter-simplexml:2.2.0\u2019"}, {"200e": "Jackson"}, {"09db": "Jackson is an alternative to Gson and claims to be faster in mapping JSON data. The setup offers you a lot more customization and might be worth a look. You can add it with:"}, {"8525": "compile \u2018com.squareup.retrofit2:converter-jackson:2.2.0\u2019"}, {"bfe7": "Moshi"}, {"e0f6": "Moshi is another alternative to Gson. It\u2019s created by the developers of Retrofit. Moshi is based on Gson, but differentiates itself with some simplifications. If you want to give this young new player on the market a try, add it with:"}, {"fa6a": "compile \u2018com.squareup.retrofit2:converter-moshi:2.2.0\u2019"}, {"44a6": "Retrofit supports Authentication for API calls that require the user to be authenticated before using the API to access resources. Querying Twitter, Facebook and StackoverFlow all require authentication. However, authentication feature is out of the scope of this tutorial as we\u2019ll simply be querying The Movie DB(TMDB) API which requires no authentication."}, {"6fac": "Hmm! Enough talk, now It\u2019s time to write some codes. Let\u2019s now create an Android App using Android Studio. The App uses Retrofit to fetch Movie details from \u201cThe Movie DB\u201d website and then displays these details on the Android Client RecyclerView Activity."}, {"3915": "We\u2019ll be using the TMDB API, So the first step is to get the API key from their website. TMDB is a popular website for getting information on movies, it\u2019s a community built movie and TV database. It also provides a REST API that is well documented. Queries can be built using this API. click here to see the API documentation."}, {"55c6": "Click here for the website\u2019s instructions on how to obtain API key, you just need to register and be logged in."}, {"a514": "CREATE ANDROID APP"}, {"1c3c": "dependencies {"}, {"85a5": "compile fileTree(dir: \u2018libs\u2019, include: [\u2018*.jar\u2019])"}, {"ee8d": "testCompile \u2018junit:junit:4.12\u2019"}, {"3f23": "compile \u2018com.android.support:appcompat-v7:23.3.0\u2019"}, {"4add": "// retrofit, gson"}, {"58f8": "compile \u2018com.squareup.picasso:picasso:2.5.2\u2019"}, {"7b84": "compile \u2018com.squareup.retrofit2:retrofit:2.1.0\u2019"}, {"cd4c": "compile \u2018com.squareup.retrofit2:converter-gson:2.1.0\u2019"}, {"c9e7": "compile \u2018com.android.support:recyclerview-v7:25.0.0\u2019"}, {"feca": "}"}, {"0fc8": "You might be wondering why add recyclerview and picasso dependencies, since we\u2019ll be using Picasso to load image URLs into an imageView and we\u2019ll display the movie details in a RecyclerView, so adding their dependencies at this stage is wise."}, {"5c84": "3. Since we\u2019ll be querying the TMDB API which is a network operations we\u2019ll need to add INTERNET permissions in AndroidManifest.xml file:"}, {"8609": "<?xml version=\u201d1.0\" encoding=\u201dutf-8\"?>"}, {"572f": "<manifest xmlns:android=\u201dhttp://schemas.android.com/apk/res/android\""}, {"1ebf": "package=\u201dapp.movie.tutorial.com\u201d>"}, {"eac5": "<uses-permission android:name=\u201dandroid.permission.INTERNET\u201d/>"}, {"87c8": "<application"}, {"570a": "android:icon=\u201d@mipmap/ic_launcher\u201d"}, {"5bf2": "android:label=\u201d@string/app_name\u201d"}, {"b241": "android:theme=\u201d@style/AppTheme\u201d>"}, {"9107": "<activity android:name=\u201dapp.movie.tutorial.com.activity.MainActivity\u201d>"}, {"2a44": "<intent-filter>"}, {"4310": "<action android:name=\u201dandroid.intent.action.MAIN\u201d />"}, {"f831": "<category android:name=\u201dandroid.intent.category.LAUNCHER\u201d />"}, {"80ad": "</intent-filter>"}, {"9e59": "</activity>"}, {"5969": "</application>"}, {"e883": "</manifest>"}, {"5751": "4. Create four sub packages named activity, adapter, rest and model in your main package. Move your empty MainActivity into the activity package."}, {"4c95": "Remember that after querying TMDB API, a JSON response will be returned. We need to know the exact fields that will be included in the response, so we can create a POJO that will be able to parse the latest movies. For us to know these fields in advance, let\u2019s first define how a basic movie representation should look like"}, {"e782": "Using this URL (http://api.themoviedb.org/3/movie/top_rated?api_key=INSERT_YOUR_API_KEY) we can get the last 50 movies. Let\u2019s insert it into browser and see. Using JsonViewer you can see JSON in more structured way. Copy the response from browser to this JsonViewer and this online tool show JSON like below:"}, {"e8dc": "5. So now that what we have seen the expected fields from the above image which shows the different fields of the JSON response, let\u2019s create a class named Movie.java under model package which is a simple POJO to hold all fields and provide getter and setter methods for fields that we are expecting in the JSON response object. Past the below code in the Movie.java file."}, {"7dc8": "/**"}, {"eaae": "* Created by Gino Osahon on 13/03/2017."}, {"3793": "*/"}, {"a433": "public class Movie {"}, {"9307": "@SerializedName(\"poster_path\")"}, {"501c": "private String posterPath;"}, {"a5d1": "@SerializedName(\"adult\")"}, {"d525": "private boolean adult;"}, {"7a00": "@SerializedName(\"overview\")"}, {"eb67": "private String overview;"}, {"f41a": "@SerializedName(\"release_date\")"}, {"fbe9": "private String releaseDate;"}, {"4245": "@SerializedName(\"genre_ids\")"}, {"acd0": "private List<Integer> genreIds = new ArrayList<Integer>();"}, {"5535": "@SerializedName(\"id\")"}, {"2617": "private Integer id;"}, {"5a98": "@SerializedName(\"original_title\")"}, {"67a0": "private String originalTitle;"}, {"e434": "@SerializedName(\"original_language\")"}, {"5775": "private String originalLanguage;"}, {"ef1a": "@SerializedName(\"title\")"}, {"81f7": "private String title;"}, {"5918": "@SerializedName(\"backdrop_path\")"}, {"6679": "private String backdropPath;"}, {"3fe3": "@SerializedName(\"popularity\")"}, {"9966": "private Double popularity;"}, {"dbc3": "@SerializedName(\"vote_count\")"}, {"811d": "private Integer voteCount;"}, {"25fe": "@SerializedName(\"video\")"}, {"b1da": "private Boolean video;"}, {"2c56": "@SerializedName(\"vote_average\")"}, {"786d": "private Double voteAverage;"}, {"ebf4": "public Movie(String posterPath, boolean adult, String overview, String releaseDate, List<Integer> genreIds, Integer id,"}, {"93fd": "String originalTitle, String originalLanguage, String title, String backdropPath, Double popularity,"}, {"1c18": "Integer voteCount, Boolean video, Double voteAverage) {"}, {"3b12": "this.posterPath = posterPath;"}, {"b1ab": "this.adult = adult;"}, {"f37a": "this.overview = overview;"}, {"bc1f": "this.releaseDate = releaseDate;"}, {"4fcc": "this.genreIds = genreIds;"}, {"e37e": "this.id = id;"}, {"538e": "this.originalTitle = originalTitle;"}, {"9fd9": "this.originalLanguage = originalLanguage;"}, {"cc49": "this.title = title;"}, {"e734": "this.backdropPath = backdropPath;"}, {"c80f": "this.popularity = popularity;"}, {"7fc0": "this.voteCount = voteCount;"}, {"9767": "this.video = video;"}, {"5217": "this.voteAverage = voteAverage;"}, {"35fe": "}"}, {"b02e": "public String getPosterPath() {"}, {"aecf": "return posterPath;"}, {"eb4b": "}"}, {"f981": "public void setPosterPath(String posterPath) {"}, {"7411": "this.posterPath = posterPath;"}, {"c082": "}"}, {"b363": "public boolean isAdult() {"}, {"5f2d": "return adult;"}, {"f84e": "}"}, {"8539": "public void setAdult(boolean adult) {"}, {"d679": "this.adult = adult;"}, {"e550": "}"}, {"4a42": "public String getOverview() {"}, {"08c2": "return overview;"}, {"a7d8": "}"}, {"6e9c": "public void setOverview(String overview) {"}, {"1b7f": "this.overview = overview;"}, {"925b": "}"}, {"db74": "public String getReleaseDate() {"}, {"16bf": "return releaseDate;"}, {"df5f": "}"}, {"b6be": "public void setReleaseDate(String releaseDate) {"}, {"9e66": "this.releaseDate = releaseDate;"}, {"b537": "}"}, {"fb82": "public List<Integer> getGenreIds() {"}, {"dffc": "return genreIds;"}, {"31c2": "}"}, {"d84e": "public void setGenreIds(List<Integer> genreIds) {"}, {"24c4": "this.genreIds = genreIds;"}, {"f069": "}"}, {"af27": "public Integer getId() {"}, {"7a76": "return id;"}, {"3acb": "}"}, {"bff3": "public void setId(Integer id) {"}, {"05b9": "this.id = id;"}, {"c23e": "}"}, {"7cf6": "public String getOriginalTitle() {"}, {"76e4": "return originalTitle;"}, {"1ed7": "}"}, {"bf8c": "public void setOriginalTitle(String originalTitle) {"}, {"6be4": "this.originalTitle = originalTitle;"}, {"eb3a": "}"}, {"a4ea": "public String getOriginalLanguage() {"}, {"3f2e": "return originalLanguage;"}, {"f217": "}"}, {"b2cb": "public void setOriginalLanguage(String originalLanguage) {"}, {"b25e": "this.originalLanguage = originalLanguage;"}, {"a4d8": "}"}, {"596b": "public String getTitle() {"}, {"2621": "return title;"}, {"ea0b": "}"}, {"a8c2": "public void setTitle(String title) {"}, {"2b6c": "this.title = title;"}, {"5a82": "}"}, {"b348": "public String getBackdropPath() {"}, {"88ab": "return backdropPath;"}, {"3060": "}"}, {"1c03": "public void setBackdropPath(String backdropPath) {"}, {"2867": "this.backdropPath = backdropPath;"}, {"64d0": "}"}, {"3da0": "public Double getPopularity() {"}, {"9aa8": "return popularity;"}, {"b1f1": "}"}, {"35f7": "public void setPopularity(Double popularity) {"}, {"e450": "this.popularity = popularity;"}, {"402e": "}"}, {"7795": "public Integer getVoteCount() {"}, {"9dd8": "return voteCount;"}, {"d3d1": "}"}, {"385c": "public void setVoteCount(Integer voteCount) {"}, {"013d": "this.voteCount = voteCount;"}, {"a951": "}"}, {"5c66": "public Boolean getVideo() {"}, {"9b40": "return video;"}, {"ddf4": "}"}, {"4740": "public void setVideo(Boolean video) {"}, {"f0d1": "this.video = video;"}, {"a15f": "}"}, {"851f": "public Double getVoteAverage() {"}, {"12f6": "return voteAverage;"}, {"1ddf": "}"}, {"953e": "public void setVoteAverage(Double voteAverage) {"}, {"a26e": "this.voteAverage = voteAverage;"}, {"0326": "}"}, {"5cba": "}"}, {"2e73": "6. We also need to create MovieResponse.java class inside the model package, since we have some extra fields like page number. This class contains all fetched movies and extra information. Create MovieResponse.java under model package and past the below code."}, {"4f0b": "/**"}, {"54a0": "* Created by Gino Osahon on 13/03/2017."}, {"be29": "*/"}, {"b1c6": "// This class contains all fetched movies and extra information"}, {"b889": "public class MovieResponse {"}, {"1e17": "@SerializedName(\"page\")"}, {"4863": "private int page;"}, {"d706": "@SerializedName(\"results\")"}, {"e940": "private List<Movie> results;"}, {"10d0": "@SerializedName(\"total_results\")"}, {"19bd": "private int totalResults;"}, {"51db": "@SerializedName(\"total_pages\")"}, {"b3ea": "private int totalPages;"}, {"509d": "public int getPage() {"}, {"f48c": "return page;"}, {"269d": "}"}, {"24c0": "public void setPage(int page) {"}, {"70a1": "this.page = page;"}, {"842f": "}"}, {"06ce": "public List<Movie> getResults() {"}, {"952e": "return results;"}, {"c963": "}"}, {"9fbe": "public void setResults(List<Movie> results) {"}, {"8e49": "this.results = results;"}, {"0485": "}"}, {"9b47": "public int getTotalResults() {"}, {"7078": "return totalResults;"}, {"fbf3": "}"}, {"3a12": "public void setTotalResults(int totalResults) {"}, {"7894": "this.totalResults = totalResults;"}, {"ac66": "}"}, {"2424": "public int getTotalPages() {"}, {"8c2a": "return totalPages;"}, {"27cb": "}"}, {"4842": "public void setTotalPages(int totalPages) {"}, {"6e3f": "this.totalPages = totalPages;"}, {"d1bf": "}"}, {"87b8": "}"}, {"72d0": "7. Next, let\u2019s define the Interface containing the Endpoint method used to query the TMDB API. Special retrofit annotations are used to encode details about the parameters and request method. the interface defines each endpoint in the following way. Note that we only have one endpoint method in the Interface, in a real programming world scenario, you can have multiple endpoints methods inside the interface. So create an interface named MovieApiService.java and past the below codes."}, {"fc12": "/**"}, {"012c": "* Created by Gino Osahon on 13/03/2017."}, {"2b37": "*/"}, {"b847": "public interface MovieApiService {"}, {"49be": "@GET(\u201cmovie/top_rated\u201d)"}, {"c58a": "Call<MovieResponse> getTopRatedMovies(@Query(\u201capi_key\u201d) String apiKey);"}, {"6dad": "}"}, {"1f46": "8. Let\u2019s now create the MainActivty.java class which is the activity from where we make request to the Movie DB API. Open the MainActivity.java and insert in the below codes."}, {"d2a4": "public class MainActivity extends AppCompatActivity{"}, {"0679": "private static final String TAG = MainActivity.class.getSimpleName();"}, {"d924": "public static final String BASE_URL = \"http://api.themoviedb.org/3/\";"}, {"d236": "private static Retrofit retrofit = null;"}, {"cff0": "private RecyclerView recyclerView = null;"}, {"30b4": "// insert your themoviedb.org API KEY here"}, {"3927": "private final static String API_KEY = \"\";"}, {"3cdb": "@Override"}, {"e03e": "protected void onCreate(Bundle savedInstanceState) {"}, {"1ffe": "super.onCreate(savedInstanceState);"}, {"8409": "setContentView(R.layout.activity_main);"}, {"78cd": "recyclerView = (RecyclerView) findViewById(R.id.recycler_view);"}, {"2139": "recyclerView.setHasFixedSize(true);"}, {"0694": "recyclerView.setLayoutManager(new LinearLayoutManager(this));"}, {"a882": "connectAndGetApiData();"}, {"bb2e": "}"}, {"18fa": "// This method create an instance of Retrofit"}, {"b953": "// set the base url"}, {"e480": "public void connectAndGetApiData(){"}, {"06d0": "if (retrofit == null) {"}, {"84e2": "retrofit = new Retrofit.Builder()"}, {"22ed": ".baseUrl(BASE_URL)"}, {"d21b": ".addConverterFactory(GsonConverterFactory.create())"}, {"de2e": ".build();"}, {"1bc1": "}"}, {"e8c1": "MovieApiService movieApiService = retrofit.create(MovieApiService.class);"}, {"f1df": "Call<MovieResponse> call = movieApiService.getTopRatedMovies(API_KEY);"}, {"6c22": "call.enqueue(new Callback<MovieResponse>() {"}, {"3122": "@Override"}, {"1998": "public void onResponse(Call<MovieResponse> call, Response<MovieResponse> response) {"}, {"85b5": "List<Movie> movies = response.body().getResults();"}, {"1149": "recyclerView.setAdapter(new MoviesAdapter(movies, R.layout.list_item_movie, getApplicationContext()));"}, {"041a": "Log.d(TAG, \"Number of movies received: \" + movies.size());"}, {"51ed": "}"}, {"1259": "@Override"}, {"88e0": "public void onFailure(Call<MovieResponse> call, Throwable throwable) {"}, {"b838": "Log.e(TAG, throwable.toString());"}, {"9b83": "}"}, {"4263": "});"}, {"1196": "}"}, {"b4cf": "}"}, {"7e0d": "Retrofit will download and parse the API data on a background thread, and then return the results back to the UI thread via the onResponse or onFailure method."}, {"29e9": "9. It\u2019s time to display the result gotten from querying the API using the above codes on the layout. We\u2019ll need to create a layout which will contain 4 textViews and 2 imageViews."}, {"ab67": "Open colors.xml and add the below color values"}, {"22d2": "<?xml version=\"1.0\" encoding=\"utf-8\"?>"}, {"fd5f": "<resources>"}, {"bf15": "<color name=\"colorPrimary\">#3F51B5</color>"}, {"5a95": "<color name=\"colorPrimaryDark\">#303F9F</color>"}, {"02ac": "<color name=\"colorAccent\">#FF4081</color>"}, {"89e1": "<color name=\"orange\">#FF3909</color>"}, {"fbb8": "<color name=\"colorAccentDark\">#00B482</color>"}, {"db90": "<color name=\"colorBlack\">#555555</color>"}, {"f2e1": "<color name=\"colorWhite\">#FFFFFF</color>"}, {"1c30": "<color name=\"colorGrey\">#707070</color>"}, {"c8e1": "<color name=\"colorGreyLight\">#8A8A8A</color>"}, {"7b8d": "</resources>"}, {"0379": "10. In other to the display the ratings, we need to create the star imageView, so create a layout named star.xml under res drawable with the below content."}, {"d641": "<?xml version=\u201d1.0\" encoding=\u201dutf-8\"?>"}, {"87b6": "<! \u2014 drawable/star.xml \u2192"}, {"cb96": "<vector xmlns:android=\u201dhttp://schemas.android.com/apk/res/android\""}, {"5639": "android:width=\u201d24dp\u201d"}, {"874c": "android:height=\u201d24dp\u201d"}, {"b1c3": "android:viewportHeight=\u201d24\""}, {"6d88": "android:viewportWidth=\u201d24\">"}, {"2da0": "<path"}, {"1c32": "android:fillColor=\u201d#000\""}, {"dcaa": "android:pathData=\u201dM12,17.27L18.18,21L16.54,13.97L22,9.24L14.81,8.62L12,2L9.19,8.62L2,9.24L7.45,13.97L5.82,21L12,17.27Z\u201d />"}, {"9978": "</vector>"}, {"4bb4": "11. Open the activity_main.xml file and copy the below code into it."}, {"9b53": "<?xml version=\u201d1.0\" encoding=\u201dutf-8\"?>"}, {"fc5f": "<LinearLayout xmlns:android=\u201dhttp://schemas.android.com/apk/res/android\""}, {"d149": "xmlns:tools=\u201dhttp://schemas.android.com/tools\""}, {"5ef7": "android:layout_width=\u201dmatch_parent\u201d"}, {"5de1": "android:layout_height=\u201dmatch_parent\u201d"}, {"997b": "tools:context=\u201dapp.movie.tutorial.com.activity.MainActivity\u201d>"}, {"c58b": "<android.support.v7.widget.RecyclerView"}, {"10ee": "android:id=\u201d@+id/recycler_view\u201d"}, {"6e47": "android:scrollbars=\u201dvertical\u201d"}, {"4ce9": "android:layout_width=\u201dmatch_parent\u201d"}, {"78a0": "android:layout_height=\u201dmatch_parent\u201d/>"}, {"da02": "</LinearLayout>"}, {"45b3": "12. Create a layout named list_item_movie.xml under res layout folder"}, {"5220": "<?xml version=\u201d1.0\" encoding=\u201dutf-8\"?>"}, {"7cd1": "<LinearLayout xmlns:android=\u201dhttp://schemas.android.com/apk/res/android\""}, {"07a6": "android:id=\u201d@+id/movies_layout\u201d"}, {"7b88": "android:layout_width=\u201dmatch_parent\u201d"}, {"6a8c": "android:layout_height=\u201dwrap_content\u201d"}, {"a94f": "android:gravity=\u201dcenter_vertical\u201d"}, {"91b6": "android:minHeight=\u201d72dp\u201d"}, {"aa8c": "android:orientation=\u201dhorizontal\u201d"}, {"2d62": "android:padding=\u201d16dp\u201d>"}, {"6349": "<LinearLayout"}, {"b342": "android:layout_width=\u201d0dp\u201d"}, {"d6be": "android:layout_height=\u201dwrap_content\u201d"}, {"336b": "android:layout_weight=\u201d1\""}, {"a95d": "android:orientation=\u201dvertical\u201d>"}, {"ea2a": "<ImageView"}, {"d200": "android:id=\u201d@+id/movie_image\u201d"}, {"7317": "android:layout_width=\u201dwrap_content\u201d"}, {"b3d8": "android:layout_height=\u201dwrap_content\u201d"}, {"52d0": "android:layout_gravity=\u201dtop\u201d"}, {"4aa0": "android:paddingRight=\u201d16dp\u201d/>"}, {"cf31": "<TextView"}, {"8f78": "android:id=\u201d@+id/title\u201d"}, {"631e": "android:layout_width=\u201dwrap_content\u201d"}, {"fd4a": "android:layout_height=\u201dwrap_content\u201d"}, {"625e": "android:paddingRight=\u201d16dp\u201d"}, {"0c35": "android:textStyle=\u201dbold\u201d"}, {"ee4d": "android:textColor=\u201d@color/colorBlack\u201d"}, {"e762": "android:textSize=\u201d16sp\u201d />"}, {"4206": "<TextView"}, {"5981": "android:id=\u201d@+id/date\u201d"}, {"1030": "android:layout_width=\u201dwrap_content\u201d"}, {"a883": "android:layout_height=\u201dwrap_content\u201d"}, {"0199": "android:paddingRight=\u201d16dp\u201d"}, {"040c": "android:textColor=\u201d@color/colorGreyLight\u201d />"}, {"1d06": "<TextView"}, {"1bbc": "android:id=\u201d@+id/description\u201d"}, {"77a1": "android:layout_width=\u201dwrap_content\u201d"}, {"d0c2": "android:layout_height=\u201dwrap_content\u201d"}, {"5210": "android:maxLines=\u201d3\""}, {"d5a6": "android:paddingRight=\u201d16dp\u201d"}, {"655c": "android:textColor=\u201d@color/colorGreyLight\u201d />"}, {"81b7": "</LinearLayout>"}, {"bcfc": "<LinearLayout"}, {"8631": "android:layout_width=\u201dwrap_content\u201d"}, {"1804": "android:layout_height=\u201d35dp\u201d"}, {"f5aa": "android:orientation=\u201dhorizontal\u201d>"}, {"d140": "<ImageView"}, {"9e3b": "android:id=\u201d@+id/rating_image\u201d"}, {"0473": "android:layout_width=\u201d15dp\u201d"}, {"e514": "android:layout_height=\u201d15dp\u201d"}, {"7bd9": "android:layout_centerInParent=\u201dtrue\u201d"}, {"594a": "android:scaleType=\u201dcenterCrop\u201d"}, {"ace2": "android:src=\u201d@drawable/star\u201d"}, {"e5a7": "android:tint=\u201d@color/colorAccent\u201d />"}, {"a137": "<TextView"}, {"b466": "android:id=\u201d@+id/rating\u201d"}, {"0856": "android:layout_width=\u201dwrap_content\u201d"}, {"e2e6": "android:layout_height=\u201dwrap_content\u201d"}, {"c33d": "android:layout_marginLeft=\u201d8dp\u201d"}, {"9a3e": "android:text=\u201d5.0\" />"}, {"4c47": "</LinearLayout>"}, {"c56b": "</LinearLayout>"}, {"024f": "12. Adapter is a common pattern which helps to bind view and data, so let\u2019s implement adapter for this. Create a class named MoviesAdapter.java under adapter package."}, {"f3b7": "/**"}, {"be94": "* Created by Gino Osahon on 14/03/2017."}, {"927a": "*/"}, {"051c": "public class MoviesAdapter extends RecyclerView.Adapter<MoviesAdapter.MovieViewHolder> {"}, {"f692": "private List<Movie> movies;"}, {"36ee": "private int rowLayout;"}, {"b80f": "private Context context;"}, {"176f": "public static final String IMAGE_URL_BASE_PATH=\u201dhttp://image.tmdb.org/t/p/w342//\";"}, {"82ba": "public MoviesAdapter(List<Movie> movies, int rowLayout, Context context) {"}, {"6e42": "this.movies = movies;"}, {"d361": "this.rowLayout = rowLayout;"}, {"a4a0": "this.context = context;"}, {"21c6": "}"}, {"de02": "//A view holder inner class where we get reference to the views in the layout using their ID"}, {"0fe8": "public static class MovieViewHolder extends RecyclerView.ViewHolder {"}, {"c489": "LinearLayout moviesLayout;"}, {"1009": "TextView movieTitle;"}, {"01d9": "TextView data;"}, {"64ea": "TextView movieDescription;"}, {"874d": "TextView rating;"}, {"38b5": "ImageView movieImage;"}, {"8b99": "public MovieViewHolder(View v) {"}, {"67ce": "super(v);"}, {"0800": "moviesLayout = (LinearLayout) v.findViewById(R.id.movies_layout);"}, {"3899": "movieImage = (ImageView) v.findViewById(R.id.movie_image);"}, {"5414": "movieTitle = (TextView) v.findViewById(R.id.title);"}, {"a76e": "data = (TextView) v.findViewById(R.id.date);"}, {"a436": "movieDescription = (TextView) v.findViewById(R.id.description);"}, {"0b02": "rating = (TextView) v.findViewById(R.id.rating);"}, {"e354": "}"}, {"456b": "}"}, {"5cb4": "@Override"}, {"1bba": "public MoviesAdapter.MovieViewHolder onCreateViewHolder(ViewGroup parent,"}, {"cedc": "int viewType) {"}, {"bb1b": "View view = LayoutInflater.from(parent.getContext()).inflate(rowLayout, parent, false);"}, {"9fca": "return new MovieViewHolder(view);"}, {"bf29": "}"}, {"0579": "@Override"}, {"6802": "public void onBindViewHolder(MovieViewHolder holder, final int position) {"}, {"30d2": "String image_url = IMAGE_URL_BASE_PATH + movies.get(position).getPosterPath();"}, {"6acc": "Picasso.with(context)"}, {"2a75": ".load(image_url)"}, {"63e9": ".placeholder(android.R.drawable.sym_def_app_icon)"}, {"42b6": ".error(android.R.drawable.sym_def_app_icon)"}, {"0d2b": ".into(holder.movieImage);"}, {"a7e9": "holder.movieTitle.setText(movies.get(position).getTitle());"}, {"3505": "holder.data.setText(movies.get(position).getReleaseDate());"}, {"ce9f": "holder.movieDescription.setText(movies.get(position).getOverview());"}, {"e850": "holder.rating.setText(movies.get(position).getVoteAverage().toString());"}, {"06c5": "}"}, {"3dfc": "@Override"}, {"e079": "public int getItemCount() {"}, {"5715": "return movies.size();"}, {"2987": "}"}, {"c480": "}"}, {"4587": "Now save and run the App. You can download the full source code for this project on GitHub"}], "child": "462_1\t462_2"}