{"name": "469", "parent": "", "content": "Tools that will help you develop a RESTful\u00a0API For all the time I\u2019ve been working on Paw, I tried to stay updated with the new tools and services available to API developers, so I decided to publish some thoughts about the most mainstream ones, as well as a few that I think have big potential. This short overview will hopefully help you choose the right tools for your needs. When building a web API, one\u2019s first choice is the language and framework. But soon after, we come to realize that we need tools to test, describe and document our API. Playgrounds and Debug\u00a0Tools As soon as you start writing some code, you\u2019ll be tempted to try out your code. That's the hacker spirit! HTTPie makes interaction with web APIs more human-friendly If you\u2019re the kind of guy that prefers command lines over GUIs, I can\u2019t recommend more HTTPie, which aims \u201cto make CLI interaction with web services as human-friendly as possible\u201d. It has an easy to remember syntax that won\u2019t make you feel nostalgic about cURL, and will definitely bring some color and joy to your Terminal! Otherwise\u200a\u2014\u200aand under the cover of a disclaimer as I\u2019m the founder\u200a\u2014\u200aPaw will help you visually play with your API, as being a graphical HTTP client. If you\u2019re dealing with many endpoints you\u2019d like to keep organized, run all your requests sequentially, deal with OAuth or generate code snippets for the consumers of your API, it will be your everyday buddy. We\u2019ve also created Pawprint to quickly share HTTP requests with your colleagues, by providing you with a shortened URL like: https://paw.pt/aT4yn5QF Paw is a full-featured HTTP client for\u00a0Mac There are also many situations where you want to intercept HTTP traffic to see what\u2019s going on between your server and a client. To inspect traffic on a local network, you should try mitmproxy, a CLI tool that allows you to see the status of requests, inspect, and redirect traffic. The graphical version of it is Charles; it\u2019s full-featured and has many years of experience already, but I have to say the Java-like interface is terribly 2000'. If you need to inspect traffic between remote machines, RequestBin is nice (it requires a free Runscope account). Among hacking tools, I have a crush on ngrok. It exposes your local server to the (remote) internet. It\u2019s a small idea that probably many of us have had, but it\u2019s incredibly well executed! It\u2019s the way to go if you want to give access to your localhost server to remote working colleagues, or test incoming webhooks. Definition of the\u00a0API Defining your API is like filling the gap between development and testing. It defines the contract you\u200a\u2014\u200athe provider\u200a\u2014\u200ahave with the consumers. API definitions act as the header files would in a programming language, and are a great way to imagine your API before implementing it. You may just describe your API in your own words and style in a Markdown file, or with a nicer interface like readme.io, but I would recommend using one of these 3 description formats: Hypermedia and Linked\u00a0Data One may argue that since having a uniform interface is one of the constraints of the REST architecture, there\u2019s no point having a frozen documentation and a versioning scheme. Clearly, HTTP and the web have been designed as a way to interact with data without a predefined data schema, and that\u2019s unarguably a great thing. GitHub has a nice living example of hypermedia API, with a root endpoint referencing objects by their URL. In theory, one could use such an API without knowing the endpoints before: that\u2019s where the need for self-explanatory resources (objects) comes. If this may sound overkill when you just start developing your API, JSON-LD is a good way to formally discribe the linking between objects and give consumers access to the descriptive metadata. John Lennon described in a JSON-LD object If JSON-LD and JSON Schema share the goal of structuring JSON data, they may be very much complementary as the latter focuses on describing the type structure of objects. The \u201cArtist\u201d type described using JSON Schema I would be tempted to add a link to a JSON Schema file from the resources described in JSON-LD! Monitoring If you\u2019re at the stage of monitoring your API, you\u2019re already pretty far down the road. Otherwise, I\u2019d frankly recommend you to focus on building a product before thinking about this part. I often talk with the Mashape team, so I\u2019ll start with their new toys. KONG is a layer on top of NGINX that will add many features for your API, including Rate-Limiting, Auth, Caching, Logging, and more via plugins. It nicely plays with Galileo, their service for API analytics. You may also check Runscope that will monitor your API, make sure it passes the validators you configured and send you real time alerts in case of failure. What I see as a downside is the need to point your production API traffic through it. I hope this list was helpful. For me it\u2019s also a way to give back a tiny bit to my favorite tools, after reading many articles mentioning Paw. If you like it, I hope you\u2019ll share your thoughts in the comments and share this with anyone you think might find it useful. ", "title": "Tools that will help you develop a RESTful\u00a0API", "sentences": [{"e104": "Tools that will help you develop a RESTful\u00a0API"}, {"b7ca": "For all the time I\u2019ve been working on Paw, I tried to stay updated with the new tools and services available to API developers, so I decided to publish some thoughts about the most mainstream ones, as well as a few that I think have big potential. This short overview will hopefully help you choose the right tools for your needs."}, {"a89c": "When building a web API, one\u2019s first choice is the language and framework. But soon after, we come to realize that we need tools to test, describe and document our API."}, {"fab0": "Playgrounds and Debug\u00a0Tools"}, {"d6cd": "As soon as you start writing some code, you\u2019ll be tempted to try out your code. That's the hacker spirit!"}, {"a3cc": "HTTPie makes interaction with web APIs more human-friendly"}, {"2616": "If you\u2019re the kind of guy that prefers command lines over GUIs, I can\u2019t recommend more HTTPie, which aims \u201cto make CLI interaction with web services as human-friendly as possible\u201d. It has an easy to remember syntax that won\u2019t make you feel nostalgic about cURL, and will definitely bring some color and joy to your Terminal!"}, {"408d": "Otherwise\u200a\u2014\u200aand under the cover of a disclaimer as I\u2019m the founder\u200a\u2014\u200aPaw will help you visually play with your API, as being a graphical HTTP client. If you\u2019re dealing with many endpoints you\u2019d like to keep organized, run all your requests sequentially, deal with OAuth or generate code snippets for the consumers of your API, it will be your everyday buddy. We\u2019ve also created Pawprint to quickly share HTTP requests with your colleagues, by providing you with a shortened URL like: https://paw.pt/aT4yn5QF"}, {"82c1": "Paw is a full-featured HTTP client for\u00a0Mac"}, {"dfc2": "There are also many situations where you want to intercept HTTP traffic to see what\u2019s going on between your server and a client. To inspect traffic on a local network, you should try mitmproxy, a CLI tool that allows you to see the status of requests, inspect, and redirect traffic. The graphical version of it is Charles; it\u2019s full-featured and has many years of experience already, but I have to say the Java-like interface is terribly 2000'. If you need to inspect traffic between remote machines, RequestBin is nice (it requires a free Runscope account)."}, {"5898": "Among hacking tools, I have a crush on ngrok. It exposes your local server to the (remote) internet. It\u2019s a small idea that probably many of us have had, but it\u2019s incredibly well executed! It\u2019s the way to go if you want to give access to your localhost server to remote working colleagues, or test incoming webhooks."}, {"3816": "Definition of the\u00a0API"}, {"3b92": "Defining your API is like filling the gap between development and testing. It defines the contract you\u200a\u2014\u200athe provider\u200a\u2014\u200ahave with the consumers. API definitions act as the header files would in a programming language, and are a great way to imagine your API before implementing it."}, {"7f36": "You may just describe your API in your own words and style in a Markdown file, or with a nicer interface like readme.io, but I would recommend using one of these 3 description formats:"}, {"5b25": "Hypermedia and Linked\u00a0Data"}, {"0d21": "One may argue that since having a uniform interface is one of the constraints of the REST architecture, there\u2019s no point having a frozen documentation and a versioning scheme. Clearly, HTTP and the web have been designed as a way to interact with data without a predefined data schema, and that\u2019s unarguably a great thing."}, {"fb8b": "GitHub has a nice living example of hypermedia API, with a root endpoint referencing objects by their URL. In theory, one could use such an API without knowing the endpoints before: that\u2019s where the need for self-explanatory resources (objects) comes."}, {"97ae": "If this may sound overkill when you just start developing your API, JSON-LD is a good way to formally discribe the linking between objects and give consumers access to the descriptive metadata."}, {"c5e3": "John Lennon described in a JSON-LD object"}, {"1b98": "If JSON-LD and JSON Schema share the goal of structuring JSON data, they may be very much complementary as the latter focuses on describing the type structure of objects."}, {"006c": "The \u201cArtist\u201d type described using JSON Schema"}, {"7b39": "I would be tempted to add a link to a JSON Schema file from the resources described in JSON-LD!"}, {"e94f": "Monitoring"}, {"1455": "If you\u2019re at the stage of monitoring your API, you\u2019re already pretty far down the road. Otherwise, I\u2019d frankly recommend you to focus on building a product before thinking about this part."}, {"ea74": "I often talk with the Mashape team, so I\u2019ll start with their new toys. KONG is a layer on top of NGINX that will add many features for your API, including Rate-Limiting, Auth, Caching, Logging, and more via plugins. It nicely plays with Galileo, their service for API analytics. You may also check Runscope that will monitor your API, make sure it passes the validators you configured and send you real time alerts in case of failure. What I see as a downside is the need to point your production API traffic through it."}, {"4d98": "I hope this list was helpful. For me it\u2019s also a way to give back a tiny bit to my favorite tools, after reading many articles mentioning Paw. If you like it, I hope you\u2019ll share your thoughts in the comments and share this with anyone you think might find it useful."}], "child": "469_1\t469_2\t469_3469_1\t469_2\t469_3469_1\t469_2\t469_3"}