{"child": "1998_1\t1998_2\t1998_3\t1998_4\t1998_5\t1998_6\t1998_7\t1998_8\t1998_9\t1998_10\t1998_11\t1998_12\t1998_13", "title": "Creating Reusable Components with Vue.js\u00a0: Button Component", "content": "Creating Reusable Components with Vue.js\u00a0: Button Component This article is the beginning of a series titled \u201cCreating Reusable Components with Vue.js\u201d. Each article will guide you through creating a specific UI component and will teach you many Vue essentials along the way. Each article will build upon the last, getting more complex the further we go. Application structure and other opinions will be shared as well. Update\u200a\u2014\u200aApril 13,\u00a02017 Changed the application structure and WebPack alias setup a bit. The old setup was causing a circular dependency issue with WebPack which would cause nested components (that are both within the definition file) to fail. This type of definition file is still relevant in the context of creating a plugin, but it is used a bit differently. We won\u2019t be worrying about creating a plugin for now. Whoa\u00a0, slow\u00a0down Isn\u2019t there a native button element already, why would you need a custom component for that? Both of these will help the maintainability of our application. If a feature needs to be added, updated, or deleted, it only needs to be fixed in a single place. Cha-ching! Preface This article is aimed at people who have a basic understanding of Vue and NPM already. The main focus of this article is JavaScript and how it interacts with the DOM. This means that CSS might not be explained. I cannot guarantee that anything in this article will work in future releases. I cannot guarantee that any of my personal practices are best practices. I am not responsible for any long tangents that seemingly have no point. Phew, now lets get to the good stuff. Boilerplate I have created a boilerplate base project to use. Setting up a project is not the subject for this article. This article assumes you have a very basic understanding of the single file component syntax. You can read up on single file components here. Download the following repository locally: https://github.com/caseymorrisus/vue-button-tutorial Once you have the project above cloned/checked out locally, head to the project root and use npm to install the project dependencies: npm install Tutorial Now that everything is installed we should make sure everything works. From the root of your project, run: npm run dev This should start a development server at localhost:8080 which can be opened in your browser of choice. I prefer Google Chrome as it has a great extension, Vue.js devtools. If you open src/App.vue you will see that it currently only has a header component loaded in, that's no fun! Let's start off by defining a simple template for our Button component. Open src/components/Button/Button.vue and make the following changes: Cool, pretty easy so far. Lets prepare the component to be imported and make sure the component loads without error before explaining it further. To do that, we need to talk a bit about application structure. Application Structure By default to import a component, you need to reference its URL relative to the current file. With a small application, this doesn\u2019t seem like an issue, but can quickly get annoying in larger applications with more complex directory structures. To get around this issue, I setup a WebPack alias that points to our src/components directory. This allows us to ignore the relative location of the directory we are importing. I also go ahead and add an index.js file to each of our component directories to shorten our imports. This would allows us to import components like so: Import using WebPack alias The WebPack alias I use to let me use Components is located in webpack.config.js and looks like: WebPack alias config You may be wondering why I give each component its own directory. I do this to give me a place to store files that are related to a component. These can be images used in a component, or child components that will only be used by a specific component. (E.g. Slider component has Slide components). Button Content The Button component still needs to be added to our view. Open App.vue and import it like so: The component still needs to be locally registered before it can be used. Alter the components object for the App component to include the Button component: Local Component Registration We give our Button component a custom tag name of v-button so that it does not conflict with reserved HTML elements, as I did with the Header component as well. This is not necessary if the component name is not a reserved HTML element. Finally, we can add the Button component to our template: Doing this should add a button element to the page with text that says \u201cButton\u201d. The text content is coming from the fallback content defined within the Button component. Fallback content is defined by putting content between the <slot> tags for a component. More can be read about slots and fallback content here. Let\u2019s add our own custom content to the Button component: This should change the content of the button from \u201cButton\u201d to \u201cCustom\u201d. You are not limited to strings/text content. Any content inserted in-between component tags will be inserted into the slot. For example, you could use an image icon rather than text like so (don\u2019t actually add this): Adding Interactivity/Events with\u00a0Props Alright, so far our Button component is pretty boring. At this point it is nothing more than a bloated implementation of a native HTML button. To make the Button component useful, we need to add the option to pass in a click event from the parent component. This is done through the use of props. Open Button.vue\u00a0, so far we've only altered the template. To allow our parent component to send a method to our Button component, we need to define an onClick prop: Defining a Component Prop In the above, we are giving our Button component a prop of onClick. We're telling Vue to validate the value passed in by using the type property and passing it the value of Function. This will cause Vue to throw a useful error in your development environment if a value of a different type is given. We are also telling Vue that this prop should always exist using required as a button component without a click event is fairly useless. You can read more about prop validation and defaults here. Bind click event to the\u00a0DOM Our component still doesn\u2019t react to user interaction, we need to bind the onClick method that is passed in as a prop. To do this, we will use v-on (more info) to bind the event to the desired DOM element. We will use the shorthand @click which is the same as typing v-bind:click which can be read about here. Event Handling If you try to click the button at this point nothing will happen. This is because we haven\u2019t passed in a value for the onClick prop. Passing a method from parent to child component Open the App component located at src/App.vue and create a consoleClick method that logs a string to the console (more info on methods): With the consoleClick method created within our App component, it is now ready to be passed in as a value for the onClick prop for the Button component. This can be done with the following: Passing a Component Method as a Prop The key here is\u00a0:onClick which is the equivalent to v-bind:onClick (shorthand) which allows us to bind a JavaScript expression to our onClick prop. In this case we are passing in a function (and checking using validation!), but it can just as easily be a number, string, array, boolean, or object. If you click on the button and look at your console, you should see the string Button clicked has been logged. Awesome, we've successfully passed a method from a parent component down to a child component and deferred calling that method until the child component has been clicked. Multiple instances of a component Components aren\u2019t much fun if they\u2019re only used once, let\u2019s create another instance of our new Button component. Let\u2019s also pass in a different method to the new Button instance. First, let\u2019s add the new method to our App component, alertClick, which will create an alert when the Button is clicked. Add another Button component directly after the first, giving it new slot content. Let\u2019s also alter the slot content of the original button to match its behavior. Both buttons should work, the first logging a message to your development console, the second, alerting the same message. Easy! Free Functionality Since we used a native button element as the root element of our Button component, we get some free functionality. If we had used a div as a root element, the following would not work. Using a native button element also has the added benefit of being semantically correct (more info). Edit the template for the App component to pass in a disabled prop to one of the buttons. We can use shorthand syntax when passing a true value for a prop that expects a boolean. Passing disabled to our component is the same as passing\u00a0:disabled=\"true\". Notice we are using the v-bind: shorthand syntax to send in the value of true. Without it, Vue will think you are sending a string with the value of true aka \"true\". This is fine until you try to send in disabled=\"false\" which will disable the button, because a string with the value of false is not a falsy value. It will return true. Wrapping Up We now have ourselves a nice, reusable Button component that could be extended further if we wanted to. It may seem like it took a lot of work to get here, but we covered a lot of important topics that you can build upon in the future. Look for more articles in the future, I plan on continuing the series to the point where we build a small UI framework together. If you found anything useful in this article, it would mean a ton to me if you clicked the \ud83d\udc9a and shared with friends! ", "name": "1998", "parent": "", "sentences": [{"5519": "Creating Reusable Components with Vue.js\u00a0: Button Component"}, {"5e73": "This article is the beginning of a series titled \u201cCreating Reusable Components with Vue.js\u201d. Each article will guide you through creating a specific UI component and will teach you many Vue essentials along the way. Each article will build upon the last, getting more complex the further we go. Application structure and other opinions will be shared as well."}, {"9f51": "Update\u200a\u2014\u200aApril 13,\u00a02017"}, {"741c": "Changed the application structure and WebPack alias setup a bit. The old setup was causing a circular dependency issue with WebPack which would cause nested components (that are both within the definition file) to fail. This type of definition file is still relevant in the context of creating a plugin, but it is used a bit differently. We won\u2019t be worrying about creating a plugin for now."}, {"cf2d": "Whoa\u00a0, slow\u00a0down"}, {"fe84": "Isn\u2019t there a native button element already, why would you need a custom component for that?"}, {"312f": "Both of these will help the maintainability of our application. If a feature needs to be added, updated, or deleted, it only needs to be fixed in a single place. Cha-ching!"}, {"dee9": "Preface"}, {"4d74": "This article is aimed at people who have a basic understanding of Vue and NPM already. The main focus of this article is JavaScript and how it interacts with the DOM. This means that CSS might not be explained. I cannot guarantee that anything in this article will work in future releases. I cannot guarantee that any of my personal practices are best practices. I am not responsible for any long tangents that seemingly have no point. Phew, now lets get to the good stuff."}, {"aa07": "Boilerplate"}, {"f7f6": "I have created a boilerplate base project to use. Setting up a project is not the subject for this article. This article assumes you have a very basic understanding of the single file component syntax. You can read up on single file components here."}, {"7342": "Download the following repository locally:"}, {"cc02": "https://github.com/caseymorrisus/vue-button-tutorial"}, {"1048": "Once you have the project above cloned/checked out locally, head to the project root and use npm to install the project dependencies:"}, {"bd97": "npm install"}, {"50ef": "Tutorial"}, {"7de5": "Now that everything is installed we should make sure everything works. From the root of your project, run:"}, {"e4f0": "npm run dev"}, {"0ebe": "This should start a development server at localhost:8080 which can be opened in your browser of choice. I prefer Google Chrome as it has a great extension, Vue.js devtools. If you open src/App.vue you will see that it currently only has a header component loaded in, that's no fun! Let's start off by defining a simple template for our Button component. Open src/components/Button/Button.vue and make the following changes:"}, {"afaf": "Cool, pretty easy so far. Lets prepare the component to be imported and make sure the component loads without error before explaining it further. To do that, we need to talk a bit about application structure."}, {"a9cb": "Application Structure"}, {"a26a": "By default to import a component, you need to reference its URL relative to the current file. With a small application, this doesn\u2019t seem like an issue, but can quickly get annoying in larger applications with more complex directory structures. To get around this issue, I setup a WebPack alias that points to our src/components directory. This allows us to ignore the relative location of the directory we are importing. I also go ahead and add an index.js file to each of our component directories to shorten our imports."}, {"fded": "This would allows us to import components like so:"}, {"22df": "Import using WebPack alias"}, {"1a00": "The WebPack alias I use to let me use Components is located in webpack.config.js and looks like:"}, {"7cb1": "WebPack alias config"}, {"ca47": "You may be wondering why I give each component its own directory. I do this to give me a place to store files that are related to a component. These can be images used in a component, or child components that will only be used by a specific component. (E.g. Slider component has Slide components)."}, {"6e53": "Button Content"}, {"36b4": "The Button component still needs to be added to our view. Open App.vue and import it like so:"}, {"69c6": "The component still needs to be locally registered before it can be used. Alter the components object for the App component to include the Button component:"}, {"c808": "Local Component Registration"}, {"df9a": "We give our Button component a custom tag name of v-button so that it does not conflict with reserved HTML elements, as I did with the Header component as well. This is not necessary if the component name is not a reserved HTML element."}, {"c878": "Finally, we can add the Button component to our template:"}, {"f1e3": "Doing this should add a button element to the page with text that says \u201cButton\u201d. The text content is coming from the fallback content defined within the Button component. Fallback content is defined by putting content between the <slot> tags for a component. More can be read about slots and fallback content here."}, {"fe65": "Let\u2019s add our own custom content to the Button component:"}, {"54a3": "This should change the content of the button from \u201cButton\u201d to \u201cCustom\u201d. You are not limited to strings/text content. Any content inserted in-between component tags will be inserted into the slot. For example, you could use an image icon rather than text like so (don\u2019t actually add this):"}, {"2566": "Adding Interactivity/Events with\u00a0Props"}, {"6374": "Alright, so far our Button component is pretty boring. At this point it is nothing more than a bloated implementation of a native HTML button. To make the Button component useful, we need to add the option to pass in a click event from the parent component. This is done through the use of props."}, {"dab4": "Open Button.vue\u00a0, so far we've only altered the template. To allow our parent component to send a method to our Button component, we need to define an onClick prop:"}, {"38ab": "Defining a Component Prop"}, {"d140": "In the above, we are giving our Button component a prop of onClick. We're telling Vue to validate the value passed in by using the type property and passing it the value of Function. This will cause Vue to throw a useful error in your development environment if a value of a different type is given. We are also telling Vue that this prop should always exist using required as a button component without a click event is fairly useless. You can read more about prop validation and defaults here."}, {"f29f": "Bind click event to the\u00a0DOM"}, {"3cec": "Our component still doesn\u2019t react to user interaction, we need to bind the onClick method that is passed in as a prop. To do this, we will use v-on (more info) to bind the event to the desired DOM element. We will use the shorthand @click which is the same as typing v-bind:click which can be read about here."}, {"fcde": "Event Handling"}, {"e704": "If you try to click the button at this point nothing will happen. This is because we haven\u2019t passed in a value for the onClick prop."}, {"3c26": "Passing a method from parent to child component"}, {"eb16": "Open the App component located at src/App.vue and create a consoleClick method that logs a string to the console (more info on methods):"}, {"a050": "With the consoleClick method created within our App component, it is now ready to be passed in as a value for the onClick prop for the Button component. This can be done with the following:"}, {"5675": "Passing a Component Method as a Prop"}, {"4c56": "The key here is\u00a0:onClick which is the equivalent to v-bind:onClick (shorthand) which allows us to bind a JavaScript expression to our onClick prop. In this case we are passing in a function (and checking using validation!), but it can just as easily be a number, string, array, boolean, or object."}, {"86e5": "If you click on the button and look at your console, you should see the string Button clicked has been logged. Awesome, we've successfully passed a method from a parent component down to a child component and deferred calling that method until the child component has been clicked."}, {"ddb5": "Multiple instances of a component"}, {"0b94": "Components aren\u2019t much fun if they\u2019re only used once, let\u2019s create another instance of our new Button component. Let\u2019s also pass in a different method to the new Button instance. First, let\u2019s add the new method to our App component, alertClick, which will create an alert when the Button is clicked."}, {"a30f": "Add another Button component directly after the first, giving it new slot content. Let\u2019s also alter the slot content of the original button to match its behavior."}, {"86c3": "Both buttons should work, the first logging a message to your development console, the second, alerting the same message. Easy!"}, {"0bbd": "Free Functionality"}, {"b47c": "Since we used a native button element as the root element of our Button component, we get some free functionality. If we had used a div as a root element, the following would not work. Using a native button element also has the added benefit of being semantically correct (more info). Edit the template for the App component to pass in a disabled prop to one of the buttons."}, {"c118": "We can use shorthand syntax when passing a true value for a prop that expects a boolean. Passing disabled to our component is the same as passing\u00a0:disabled=\"true\". Notice we are using the v-bind: shorthand syntax to send in the value of true. Without it, Vue will think you are sending a string with the value of true aka \"true\". This is fine until you try to send in disabled=\"false\" which will disable the button, because a string with the value of false is not a falsy value. It will return true."}, {"ac86": "Wrapping Up"}, {"1289": "We now have ourselves a nice, reusable Button component that could be extended further if we wanted to. It may seem like it took a lot of work to get here, but we covered a lot of important topics that you can build upon in the future. Look for more articles in the future, I plan on continuing the series to the point where we build a small UI framework together."}, {"7b9f": "If you found anything useful in this article, it would mean a ton to me if you clicked the \ud83d\udc9a and shared with friends!"}]}