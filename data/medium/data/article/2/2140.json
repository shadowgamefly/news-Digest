{"name": "2140", "title": "Kick starting Android Development with Kotlin\u200a\u2014\u200aDiving into Kotlin\u00a0code", "sentences": [{"ac18": "Kick starting Android Development with Kotlin\u200a\u2014\u200aDiving into Kotlin\u00a0code"}, {"1c78": "Content"}, {"08c3": "Prerequisite"}, {"b360": "Let\u2019s dive\u00a0\ud83c\udfca"}, {"94a3": "I hope you guys have learned basic syntax of Kotlin or probably your a quick learner to directly understand the Kotlin code for Android."}, {"6ff4": "In this part we will look at writing some Kotlin code, do some comparison between the Java code and Kotlin code, understand some cool \ud83d\ude0e things in Kotlin."}, {"643c": "I present you the MainActivity in Java"}, {"1922": "MainActivity in Java"}, {"5bed": "Here\u2019s how the same looks in Kotlin"}, {"e972": "MainActivity in Kotlin"}, {"51e3": "Let\u2019s break the Kotlin code down to understand what\u2019s going on"}, {"2863": "Inheritance"}, {"ca3c": "In Kotlin inheritance that is \u201cextends\u201d and \u201cimplements\u201d keywords are replaced with a \u201c:\u201d and we are extending AppCompatActivity which is a Java class from Android Support library."}, {"f6ad": "PS: We directly inherited AppCompatActivity, this shows interoperable nature of Kotlin"}, {"e57b": "Null safety"}, {"60ed": "Everything in Kotlin is not null-able by default unless explicitly mentioned with \u201c?\u201d. It indicates that the object can have value or not (null) and compiler forces us to take of handling the null condition of the object in our code."}, {"4f26": "The \u201conCreate\u201d function in the snippet above has the following parameter / argument which is marked with \u201c?\u201d at the end."}, {"7ba3": "savedInstanceState: Bundle?"}, {"1c54": "To interact with a null-able object is really easy. In the previous article we saw non-idiomatic way of doing it, by placing an \u201cif\u201d loop."}, {"5ac4": "The idiomatic way is using \u201c?\u201d question mark to allow you to use the object in case it value exists, otherwise it will ignore it and you\u2019ll be safe:"}, {"4189": "// Idiomatic wayvar context = Context? = nullval resource = context?.getResources() // Safe"}, {"a7bf": "But what in case I want to execute bunch of lines only when context has\u00a0value?"}, {"b2cf": "// Lots of lines with contextval res = context?.getResources()val title = context?.getString(R.string.title)setTitle(title)"}, {"6be7": "// A better approachif (context != null) {   // Smart cast, Thank you Compiler!   val res = context.getResources()   val title = context.getString(R.string.title)   setTitle(title)}"}, {"c173": "// Another approachcontext?.let {   // Execute this block if not null   val res = context.getResources()   val title = context.getString(R.string.title)   setTitle(title)}"}, {"628c": "// Yet another approachcontext?.apply {   // Execute this block if not null   val res = getResources()   val title = getString(R.string.title)   setTitle(title)}"}, {"0c30": "PS: The \u201csetTitle()\u201d function is just fake function for the sake of example"}, {"b584": "Choosing an approach is all upon the situation. I personally like writing the \u201clet\u201d block or \u201capply\u201d block (Yeah there are other approaches too)."}, {"8617": "Let block"}, {"8e23": "Apply block"}, {"bca3": "Read more about the standard library: https://kotlinlang.org/api/latest/jvm/stdlib/index.htmlhttp://beust.com/weblog/2015/10/30/exploring-the-kotlin-standard-library/"}, {"0475": "What about else condition?"}, {"b4a2": "val files = File(\"Test\").listFiles()  println(files?.size ?: \"empty\")"}, {"f09e": "You can have an else condition using the ternary operator or Elvis operator\u00a0?:"}, {"eb47": "I know your saying that\u2019s awesome literally AWESOME!"}, {"3e73": "Read more about null safety: https://kotlinlang.org/docs/reference/null-safety.html"}, {"adf6": "Properties and\u00a0Fields"}, {"0924": "Kotlin maps getters and setters to properties. They are like fields in Java."}, {"c70e": "// Getting context in Activity - Java styleString title = getBaseContext().getString(R.string.title)"}, {"f10f": "// Getting context in Activity - Kotlin stylevar title = baseContext.getString(R.string.title)"}, {"2ad8": "We directly access the variable. Behind the scene, Kotlin is calling the getter or setter of the object."}, {"28fd": "Let\u2019s dive\u00a0deeper"}, {"d0e6": "In order to understand Kotlin, we will build a simple open source Count down timer Android app. We won\u2019t look at UI code in this article, you can refer it from the GitHub repository."}, {"51c5": "The Count down timer app will store the start time in the Shared Preferences and show a progress bar in the UI. See screenshots."}, {"c9a9": "Count Down Timer app in\u00a0Kotlin"}, {"d22a": "Binding views"}, {"68b0": "Before starting the timer we need to bind the views in code."}, {"37c7": "Binding views in MainActivity"}, {"327d": "Looking at the snippet you can sense the familiarity of the code with Java."}, {"fb6a": "PS: The way shown above is not the best practice. There is a super cool way to do this in Kotlin. We will look into it in the next article."}, {"937a": "Utility functions"}, {"3519": "To store the start time of the count down timer we will need \u201cSharedPreferences\u201d. As a good design practice we will create Utility functions to store and read the start time from \u201cSharedPreferences\u201d."}, {"879a": "PrefUtils in Kotlin"}, {"5689": "Wrapper to save the start time into the \u201cSharedPreferences\u201d. We use the functions defined in the \u201cPrefUtils\u201d."}, {"7277": "Did you notice we have directly declared the functions without any class? What? Are you serious? They are Free functions."}, {"7876": "Free Functions"}, {"651f": "In Kotlin, functions or variables can be declared at the top level in a file (*.kt) without any class holding them, this is called as \u201cfree function or variable\u201d."}, {"c82a": "Free functions are by default static in nature. They are like static functions in Java except without any class holding them.\u00a0What makes them special is you can write free functions and access them from another Kotlin class or file directly (without Class name)."}, {"4a86": "Example:"}, {"1a50": "// Accessing the PrefUtils in Java stylePrefUtils.remove(\"some_key\");"}, {"e5ed": "// Kotlin styleremove(\"some_key\")"}, {"a116": "It\u2019s worth noting that these functions come with access specifiers to control the visibility"}, {"daea": "When Expression"}, {"2297": "I\u2019m sure you noticed \u201cwhen\u201d keyword in the snippet above."}, {"dcd1": "In simple words"}, {"14fa": "\u201cwhen\u201d is super enhanced and magical \u201cswitch\u201d expression"}, {"9bad": "when (x) {          1 -> print(\"x == 1\")     2 -> print(\"x == 2\")          else -> {          // Note the block                  print(\"x is neither 1 nor 2\")          } }"}, {"b61c": "Super Powers of \u201cwhen\u201d expression"}, {"ee90": "Read more about \u201cwhen\u201d:1. https://kotlinlang.org/docs/reference/control-flow.html2. https://antonioleiva.com/when-expression-kotlin/"}, {"6c24": "Let\u2019s start the\u00a0timer"}, {"f247": "Object Expressions"}, {"e4cb": "The CountDownTimer is an abstract class in the Android API. In Java we create an anonymous class while Kotlin handles the same using Object Expressions using the \u201cobject\u201d keyword (Shown below)."}, {"6520": "mTimer = object : CountDownTimer(millisInFuture, intervalMillis) {         ....}"}, {"99b9": "This is the final \u201cMainActivity\u201d for this article. The code is pretty basic Kotlin syntax and some features. In the next article, we will change a lot of stuff by including more features of Kotlin."}, {"bb78": "Repository"}, {"0da3": "https://github.com/AkshayChordiya/timer-kotlin-sample/tree/v0.20"}, {"05e7": "Conclusion"}, {"41f5": "In this part we barely scratched Kotlin. I know after reading this article it feels like Kotlin is similar to Java and there is not much, that\u2019s because the Kotlin code is written in Java style to ease the understanding. In the next article we will kotlin-ize the code and implement exciting stuff of Kotlin."}, {"2d5e": "Underestimate true power of\u00a0Kotlin"}, {"0bb4": "We will truly kotlin-ize the code in the next article and see the power of Kotlin in building better apps while having\u00a0fun."}], "child": "2140_1\t2140_2\t2140_3\t2140_4\t2140_5\t2140_62140_1\t2140_2\t2140_3\t2140_4\t2140_5\t2140_62140_1\t2140_2\t2140_3\t2140_4\t2140_5\t2140_62140_1\t2140_2\t2140_3\t2140_4\t2140_5\t2140_6", "timestamp": "Mar 22", "content": "Kick starting Android Development with Kotlin\u200a\u2014\u200aDiving into Kotlin\u00a0code Content Prerequisite Let\u2019s dive\u00a0\ud83c\udfca I hope you guys have learned basic syntax of Kotlin or probably your a quick learner to directly understand the Kotlin code for Android. In this part we will look at writing some Kotlin code, do some comparison between the Java code and Kotlin code, understand some cool \ud83d\ude0e things in Kotlin. I present you the MainActivity in Java MainActivity in Java Here\u2019s how the same looks in Kotlin MainActivity in Kotlin Let\u2019s break the Kotlin code down to understand what\u2019s going on Inheritance In Kotlin inheritance that is \u201cextends\u201d and \u201cimplements\u201d keywords are replaced with a \u201c:\u201d and we are extending AppCompatActivity which is a Java class from Android Support library. PS: We directly inherited AppCompatActivity, this shows interoperable nature of Kotlin Null safety Everything in Kotlin is not null-able by default unless explicitly mentioned with \u201c?\u201d. It indicates that the object can have value or not (null) and compiler forces us to take of handling the null condition of the object in our code. The \u201conCreate\u201d function in the snippet above has the following parameter / argument which is marked with \u201c?\u201d at the end. savedInstanceState: Bundle? To interact with a null-able object is really easy. In the previous article we saw non-idiomatic way of doing it, by placing an \u201cif\u201d loop. The idiomatic way is using \u201c?\u201d question mark to allow you to use the object in case it value exists, otherwise it will ignore it and you\u2019ll be safe: // Idiomatic wayvar context = Context? = nullval resource = context?.getResources() // Safe But what in case I want to execute bunch of lines only when context has\u00a0value? // Lots of lines with contextval res = context?.getResources()val title = context?.getString(R.string.title)setTitle(title) // A better approachif (context != null) {   // Smart cast, Thank you Compiler!   val res = context.getResources()   val title = context.getString(R.string.title)   setTitle(title)} // Another approachcontext?.let {   // Execute this block if not null   val res = context.getResources()   val title = context.getString(R.string.title)   setTitle(title)} // Yet another approachcontext?.apply {   // Execute this block if not null   val res = getResources()   val title = getString(R.string.title)   setTitle(title)} PS: The \u201csetTitle()\u201d function is just fake function for the sake of example Choosing an approach is all upon the situation. I personally like writing the \u201clet\u201d block or \u201capply\u201d block (Yeah there are other approaches too). Let block Apply block Read more about the standard library: https://kotlinlang.org/api/latest/jvm/stdlib/index.htmlhttp://beust.com/weblog/2015/10/30/exploring-the-kotlin-standard-library/ What about else condition? val files = File(\"Test\").listFiles()  println(files?.size ?: \"empty\") You can have an else condition using the ternary operator or Elvis operator\u00a0?: I know your saying that\u2019s awesome literally AWESOME! Read more about null safety: https://kotlinlang.org/docs/reference/null-safety.html Properties and\u00a0Fields Kotlin maps getters and setters to properties. They are like fields in Java. // Getting context in Activity - Java styleString title = getBaseContext().getString(R.string.title) // Getting context in Activity - Kotlin stylevar title = baseContext.getString(R.string.title) We directly access the variable. Behind the scene, Kotlin is calling the getter or setter of the object. Let\u2019s dive\u00a0deeper In order to understand Kotlin, we will build a simple open source Count down timer Android app. We won\u2019t look at UI code in this article, you can refer it from the GitHub repository. The Count down timer app will store the start time in the Shared Preferences and show a progress bar in the UI. See screenshots. Count Down Timer app in\u00a0Kotlin Binding views Before starting the timer we need to bind the views in code. Binding views in MainActivity Looking at the snippet you can sense the familiarity of the code with Java. PS: The way shown above is not the best practice. There is a super cool way to do this in Kotlin. We will look into it in the next article. Utility functions To store the start time of the count down timer we will need \u201cSharedPreferences\u201d. As a good design practice we will create Utility functions to store and read the start time from \u201cSharedPreferences\u201d. PrefUtils in Kotlin Wrapper to save the start time into the \u201cSharedPreferences\u201d. We use the functions defined in the \u201cPrefUtils\u201d. Did you notice we have directly declared the functions without any class? What? Are you serious? They are Free functions. Free Functions In Kotlin, functions or variables can be declared at the top level in a file (*.kt) without any class holding them, this is called as \u201cfree function or variable\u201d. Free functions are by default static in nature. They are like static functions in Java except without any class holding them.\u00a0What makes them special is you can write free functions and access them from another Kotlin class or file directly (without Class name). Example: // Accessing the PrefUtils in Java stylePrefUtils.remove(\"some_key\"); // Kotlin styleremove(\"some_key\") It\u2019s worth noting that these functions come with access specifiers to control the visibility When Expression I\u2019m sure you noticed \u201cwhen\u201d keyword in the snippet above. In simple words \u201cwhen\u201d is super enhanced and magical \u201cswitch\u201d expression when (x) {          1 -> print(\"x == 1\")     2 -> print(\"x == 2\")          else -> {          // Note the block                  print(\"x is neither 1 nor 2\")          } } Super Powers of \u201cwhen\u201d expression Read more about \u201cwhen\u201d:1. https://kotlinlang.org/docs/reference/control-flow.html2. https://antonioleiva.com/when-expression-kotlin/ Let\u2019s start the\u00a0timer Object Expressions The CountDownTimer is an abstract class in the Android API. In Java we create an anonymous class while Kotlin handles the same using Object Expressions using the \u201cobject\u201d keyword (Shown below). mTimer = object : CountDownTimer(millisInFuture, intervalMillis) {         ....} This is the final \u201cMainActivity\u201d for this article. The code is pretty basic Kotlin syntax and some features. In the next article, we will change a lot of stuff by including more features of Kotlin. Repository https://github.com/AkshayChordiya/timer-kotlin-sample/tree/v0.20 Conclusion In this part we barely scratched Kotlin. I know after reading this article it feels like Kotlin is similar to Java and there is not much, that\u2019s because the Kotlin code is written in Java style to ease the understanding. In the next article we will kotlin-ize the code and implement exciting stuff of Kotlin. Underestimate true power of\u00a0Kotlin We will truly kotlin-ize the code in the next article and see the power of Kotlin in building better apps while having\u00a0fun. ", "author": "Akshay Chordiya", "parent": ""}