{"name": "2124", "title": "\ud83c\udfa9 Automagically Unsubscribe in\u00a0Angular", "sentences": [{"ab6c": "\ud83c\udfa9 Automagically Unsubscribe in\u00a0Angular"}, {"08b5": "As you probably know when you subscribe to an observable or event in JavaScript, you usually need to unsubscribe at a certain point to release memory in the system. Otherwise, you will have a memory leak."}, {"7c94": "A memory leak occurs when a section of memory that is no longer being used is still being occupied needlessly instead of being returned to the\u00a0OS"}, {"89c0": "In Angular components or directives, you will unsubscribe inside the ngOnDestroy lifecycle hook."}, {"1f2a": "For example, if you have a component with three subscriptions:"}, {"bb74": "You need to create the ngOnDestroy method and unsubscribe from each."}, {"f648": "OK, that\u2019s nice, but I want to automate the unsubscribe process. What if we could create a class decorator that will do the work for us? Maybe something like this:"}, {"7b19": "Let\u2019s create a class decorator named AutoUnsubscribe to clean our code."}, {"764d": "In typescript or babel, a class decorator is just a function that takes one parameter, the constructor of the decorated class."}, {"d675": "The class decorator is applied to the constructor of the class and can be used to observe, modify, or replace a class definition."}, {"d902": "\ud83e\udd13 There are three simple steps here:"}, {"c58e": "That\u2019s all, piece of \ud83c\udf70."}, {"b612": "\ud83d\ude01 But\u2026"}, {"f9ad": "But wait a minute, what if for some crazy reason you need to exclude subscriptions? for example you don\u2019t want to unsubscribe from the $two subscription when the component is destroyed."}, {"23eb": "In this case we need to pass an argument to our decorator ( an array of excluded properties ), so we need to use a Decorator Factory:"}, {"e197": "A Decorator Factory is simply a function that returns the expression that will be called by the decorator at\u00a0runtime."}, {"8944": "We are just checking that the property name is not in the blacklist array before invoking the unsubscribe() function."}, {"4ba4": "Now we can use our decorator like this:"}, {"5aca": "\ud83d\ude03 Now we are done!"}, {"375b": "You can find the decorator here. If you have further improvements, please make a pull request."}, {"d43c": "If you want to be more declarative with the takeUntil operator, you can also check my tiny class decorator that will you give you the ability to do this:"}, {"d00c": "Do not be afraid to look at the source code, it\u2019s just a few lines."}, {"ef3d": "If you liked this article, check out my previous one\u200a\u2014\u200aMake your Code Cleaner with Decorators."}, {"6e6e": "Conclusion:"}, {"862a": "You can leverage decorators in your apps and create powerful things with them. Decorators are not only for frameworks or libraries, so be creative and start using them. You can explore the different decorators here."}, {"52ba": "Follow me on Medium or Twitter to read more about Angular, Vue and JS!"}], "child": "2124_1\t2124_2\t2124_3\t2124_4\t2124_5\t2124_6\t2124_7\t2124_8\t2124_9\t2124_10\t2124_112124_1\t2124_2\t2124_3\t2124_4\t2124_5\t2124_6\t2124_7\t2124_8\t2124_9\t2124_10\t2124_11", "timestamp": "Apr 11", "content": "\ud83c\udfa9 Automagically Unsubscribe in\u00a0Angular As you probably know when you subscribe to an observable or event in JavaScript, you usually need to unsubscribe at a certain point to release memory in the system. Otherwise, you will have a memory leak. A memory leak occurs when a section of memory that is no longer being used is still being occupied needlessly instead of being returned to the\u00a0OS In Angular components or directives, you will unsubscribe inside the ngOnDestroy lifecycle hook. For example, if you have a component with three subscriptions: You need to create the ngOnDestroy method and unsubscribe from each. OK, that\u2019s nice, but I want to automate the unsubscribe process. What if we could create a class decorator that will do the work for us? Maybe something like this: Let\u2019s create a class decorator named AutoUnsubscribe to clean our code. In typescript or babel, a class decorator is just a function that takes one parameter, the constructor of the decorated class. The class decorator is applied to the constructor of the class and can be used to observe, modify, or replace a class definition. \ud83e\udd13 There are three simple steps here: That\u2019s all, piece of \ud83c\udf70. \ud83d\ude01 But\u2026 But wait a minute, what if for some crazy reason you need to exclude subscriptions? for example you don\u2019t want to unsubscribe from the $two subscription when the component is destroyed. In this case we need to pass an argument to our decorator ( an array of excluded properties ), so we need to use a Decorator Factory: A Decorator Factory is simply a function that returns the expression that will be called by the decorator at\u00a0runtime. We are just checking that the property name is not in the blacklist array before invoking the unsubscribe() function. Now we can use our decorator like this: \ud83d\ude03 Now we are done! You can find the decorator here. If you have further improvements, please make a pull request. If you want to be more declarative with the takeUntil operator, you can also check my tiny class decorator that will you give you the ability to do this: Do not be afraid to look at the source code, it\u2019s just a few lines. If you liked this article, check out my previous one\u200a\u2014\u200aMake your Code Cleaner with Decorators. Conclusion: You can leverage decorators in your apps and create powerful things with them. Decorators are not only for frameworks or libraries, so be creative and start using them. You can explore the different decorators here. Follow me on Medium or Twitter to read more about Angular, Vue and JS! ", "author": "Netanel Basal", "parent": ""}