{"name": "2133", "title": "Interviewing Android Developers", "sentences": [{"516c": "Interviewing Android Developers"}, {"84de": "A friend of mine recently asked me for some advice about interviewing Android developers. We talked for a while, and I said I\u2019d write some stuff down and send it to him. Over the last few years I\u2019ve interviewed dozens of candidates from around the world, and brought several colleagues in on in the interview process to share the experience with them too. As a byproduct of that, there were emails and wiki pages full of attempts to distil our thoughts into something informative and concise."}, {"ebb8": "By no means am I an expert on the subject, but when I first started, I found immense value in some thoughts a senior colleague shared with me, on what to ask and what to look for. I hope that by writing these words, I can someday provide that value for someone else."}, {"7207": "Interviews are hard, for both sides of the\u00a0table."}, {"d321": "Being an interview candidate is a nerve-wracking situation. It can also be intimidating, and in some rare cases, humiliating. It\u2019s easy to suffer from a bit of white coat syndrome, performing more poorly than you would if you weren\u2019t in an interview. I forgot what Maps were for, once."}, {"3138": "Being the interviewer is also difficult. You have a short amount of time to gain enough information about a human being to make a decision about them that has potentially huge implications to them, to you, and to the company."}, {"414d": "Interviews should be conversations"}, {"2084": "I have a bee in my bonnet about the way some people do interviews."}, {"80be": "I hate the notion that an interview is a unidirectional series of questions that have right and wrong answers. We might as well just hand people a paper questionnaire to fill out. Why bother interviewing them if we\u2019re going to do it like this? It\u2019s unnecessarily adversarial. It shines a searchlight on the candidate, limiting the scope of what can be learned to only those things which fall within the searchlight\u2019s narrow beam. Anything you don\u2019t ask, you don\u2019t hear about. The candidate learns nothing about you or your company, except that you view this as an acceptable way to treat people. Is this what working there will feel like?"}, {"9d7d": "This is an extreme example, obviously\u200a\u2014\u200aI\u2019m sure even the most scripted set of interview questions allows room (admittedly, at the end) for any questions the candidate might have. But still, what\u2019s the point? Surely that\u2019s not what conversations in your team are actually like. If you\u2019re trying to get a feeling for what it would be like to work with this person, shouldn\u2019t the interview try to approximate that situation?"}, {"e8c0": "I like an interview to feel like a real conversation. Sure, one person is trying to convince the other to give them a job, but that doesn\u2019t mean it can\u2019t still be a chat. If you\u2019re interviewing someone, there\u2019s a good chance you\u2019ll be working closely with them if they get the job. That can mean sitting beside them for eight or more hours a day, five days a week, forever. Or maybe you\u2019ll just be dealing with each other\u2019s code all the time. Or anything in between. You should be able to talk to them, freely and comfortably."}, {"24f5": "How to have the conversation"}, {"78c2": "While I like to treat an interview as a conversation, it still needs to have direction. I still have things I want to find out, things I want to talk to them about. I like to break it up into several sections, and I\u2019ll outline that basic structure to the candidate at the start of the interview. These sections are flexible, both in time and specific aspects of the subject matter. Sharing the structure with the candidate helps them feel more comfortable; it gives them an idea of what to expect, and extends a friendly gesture of information-sharing. It\u2019s subtle, but it makes a difference."}, {"4681": "Once we\u2019re ready to go, I use questions to open up discussions, or as follow-up questions to clarify details. Closed questions, with right/wrong answers, are generally less useful."}, {"cab2": "Openers: Android\u00a0basics"}, {"08bf": "I like to start with some questions on Android basics, starting with a particularly easy question. This serves the double purpose of both putting people at their ease by giving them a quick and easy win, and flagging a surprising number of people who clearly don\u2019t know a lot about Android."}, {"b3f9": "If these questions seem vague, they\u2019re supposed to. The Activity lifecycle should be pretty straightforward and self-explanatory, but beyond that all of these questions should be most often answered with either \u201cit depends\u201d or a question from the candidate. This strengthens the conversational nature of the interview, since more communication is required from both sides to move forward. As any capable Android developer will know, there are multiple ways to persist data, to perform long-running operations, and to communicate between Fragments. All of these things\u200a\u2014\u200aeven using Fragments at all\u200a\u2014\u200aare worthy topics of discussion. They can tell you a lot about how someone approaches things and what they\u2019ve done."}, {"d5b0": "Tools and technologies"}, {"a818": "It\u2019s always a good idea to get an idea of what kind of tools and technologies someone uses to do the job. If they\u2019re still using Eclipse, or vim, or anything that\u2019s not Git, I want to know why. For the most part, people answer with Android Studio and Git. That\u2019s great. But it\u2019s still good to find the outliers."}, {"b0aa": "Android development has a huge community of third-party open-source libraries, and a strong affinity for using these libraries to avoid reinventing the wheel. Of course, it\u2019s possible for people to go overboard, solving (perceived) problems in their apps by applying third-party solutions, without fully understanding the problem, or the solution, or both. I find it helpful to ask about solutions candidates have used, focusing on categories rather than specific libraries. Here\u2019s a few:"}, {"ab5e": "Testing"}, {"5fbe": "I consider testing to be its own section in my list of topics to cover. It\u2019s important. In the early days, the state of testing on Android was quite poor, but it\u2019s come along by leaps and bounds over the last couple of years, with JVM JUnit tests, Espresso, and the Android Testing Support Library. Talking about testing naturally involves talking about app architecture\u200a\u2014\u200aan app isn\u2019t testable unless it was written to be testable. So this has some crossover with the dependency injection questions mentioned above, but also has potential to bring in MVP in its various incarnations, MVVM, and any other strategy someone might use to structure their app\u2019s code."}, {"121d": "For a candidate above the level of intern or junior developer, I want to hear that they\u2019ve had some exposure to:"}, {"3d2d": "And I want to hear what their opinions are about all of these things."}, {"cdde": "CV projects and war\u00a0stories"}, {"5763": "When you read over the CV of a candidate, make a note of anything on it that caught your eye. In the interview, ask about each one of those things."}, {"628f": "Writing a CV is a horrible exercise in trying to fit a lot of information into a relatively short document and still having it nicely formatted with plenty of friendly bits of whitespace. You have to prioritise and cut and revise, and sometimes your best or most interesting work only gets a couple of words on the page. It\u2019s important to provide an opportunity for people to talk about these things."}, {"f262": "Some stuff doesn\u2019t get a place on the CV, but can still be very relevant. What was your favourite, or \u201cbest\u201d project that you worked on? Why?"}, {"4d7a": "As well as the good stuff, it\u2019s useful to ask about the bad. I like to ask about the most difficult problem (or project) a candidate has encountered, and what they did to solve it (did they solve it?). How did they approach that difficulty? It doesn\u2019t necessarily have to be technical. It could be something about the team or the customer. Either way, it can tell you a lot about someone\u200a\u2014\u200agood or bad."}, {"3703": "Personal interest in Android/technology"}, {"bba1": "This is the last section in my list. I feel like this can be the most casual, most informal part of the whole conversation. The goal is to get a sense of how much the candidate is really interested in Android, or in technology in general. For some people, it\u2019s just a job, and that\u2019s OK. For others, they go home every night and work on their own side projects or read every tech article they can. It\u2019s good to know these things, to get a better understanding of who you\u2019re talking to."}, {"4f64": "I try to frame a question around the candidate and their experience of (or interest in) some aspect of the wider tech/Android world, preferably something recent. Is that a Moto 360 on your wrist? Were you at Droidcon [location] last week? Did you watch the I/O keynote yesterday? All of these questions serve to open a topic for more conversation. Personally, I want to hear that a candidate had some engagement in something like the I/O keynote\u200a\u2014\u200athey should have at least one opinion about at least one announcement, and something they\u2019re curious to hear more about."}, {"0b0a": "How do you keep up to date with Android news? I always ask this at the end, and I\u2019m not sure if it\u2019s for me or for them. Any particular blogs, websites, podcasts\u200a\u2014\u200aI can barely keep up with all the ones I follow, but I\u2019m always curious to hear what other people are using."}, {"2405": "Closing up"}, {"284d": "It\u2019s important to leave time for candidates to ask any questions they might have. Obviously these don\u2019t have to wait until the end, but it\u2019s good to explicitly prompt them for any questions they didn\u2019t get a chance to ask already. You\u2019re interviewing them, but they\u2019re also learning about you, and your company. Remember, it\u2019s a two-way conversation."}], "child": "2133_1\t2133_2\t2133_3\t2133_4\t2133_5", "timestamp": "Apr 12", "content": "Interviewing Android Developers A friend of mine recently asked me for some advice about interviewing Android developers. We talked for a while, and I said I\u2019d write some stuff down and send it to him. Over the last few years I\u2019ve interviewed dozens of candidates from around the world, and brought several colleagues in on in the interview process to share the experience with them too. As a byproduct of that, there were emails and wiki pages full of attempts to distil our thoughts into something informative and concise. By no means am I an expert on the subject, but when I first started, I found immense value in some thoughts a senior colleague shared with me, on what to ask and what to look for. I hope that by writing these words, I can someday provide that value for someone else. Interviews are hard, for both sides of the\u00a0table. Being an interview candidate is a nerve-wracking situation. It can also be intimidating, and in some rare cases, humiliating. It\u2019s easy to suffer from a bit of white coat syndrome, performing more poorly than you would if you weren\u2019t in an interview. I forgot what Maps were for, once. Being the interviewer is also difficult. You have a short amount of time to gain enough information about a human being to make a decision about them that has potentially huge implications to them, to you, and to the company. Interviews should be conversations I have a bee in my bonnet about the way some people do interviews. I hate the notion that an interview is a unidirectional series of questions that have right and wrong answers. We might as well just hand people a paper questionnaire to fill out. Why bother interviewing them if we\u2019re going to do it like this? It\u2019s unnecessarily adversarial. It shines a searchlight on the candidate, limiting the scope of what can be learned to only those things which fall within the searchlight\u2019s narrow beam. Anything you don\u2019t ask, you don\u2019t hear about. The candidate learns nothing about you or your company, except that you view this as an acceptable way to treat people. Is this what working there will feel like? This is an extreme example, obviously\u200a\u2014\u200aI\u2019m sure even the most scripted set of interview questions allows room (admittedly, at the end) for any questions the candidate might have. But still, what\u2019s the point? Surely that\u2019s not what conversations in your team are actually like. If you\u2019re trying to get a feeling for what it would be like to work with this person, shouldn\u2019t the interview try to approximate that situation? I like an interview to feel like a real conversation. Sure, one person is trying to convince the other to give them a job, but that doesn\u2019t mean it can\u2019t still be a chat. If you\u2019re interviewing someone, there\u2019s a good chance you\u2019ll be working closely with them if they get the job. That can mean sitting beside them for eight or more hours a day, five days a week, forever. Or maybe you\u2019ll just be dealing with each other\u2019s code all the time. Or anything in between. You should be able to talk to them, freely and comfortably. How to have the conversation While I like to treat an interview as a conversation, it still needs to have direction. I still have things I want to find out, things I want to talk to them about. I like to break it up into several sections, and I\u2019ll outline that basic structure to the candidate at the start of the interview. These sections are flexible, both in time and specific aspects of the subject matter. Sharing the structure with the candidate helps them feel more comfortable; it gives them an idea of what to expect, and extends a friendly gesture of information-sharing. It\u2019s subtle, but it makes a difference. Once we\u2019re ready to go, I use questions to open up discussions, or as follow-up questions to clarify details. Closed questions, with right/wrong answers, are generally less useful. Openers: Android\u00a0basics I like to start with some questions on Android basics, starting with a particularly easy question. This serves the double purpose of both putting people at their ease by giving them a quick and easy win, and flagging a surprising number of people who clearly don\u2019t know a lot about Android. If these questions seem vague, they\u2019re supposed to. The Activity lifecycle should be pretty straightforward and self-explanatory, but beyond that all of these questions should be most often answered with either \u201cit depends\u201d or a question from the candidate. This strengthens the conversational nature of the interview, since more communication is required from both sides to move forward. As any capable Android developer will know, there are multiple ways to persist data, to perform long-running operations, and to communicate between Fragments. All of these things\u200a\u2014\u200aeven using Fragments at all\u200a\u2014\u200aare worthy topics of discussion. They can tell you a lot about how someone approaches things and what they\u2019ve done. Tools and technologies It\u2019s always a good idea to get an idea of what kind of tools and technologies someone uses to do the job. If they\u2019re still using Eclipse, or vim, or anything that\u2019s not Git, I want to know why. For the most part, people answer with Android Studio and Git. That\u2019s great. But it\u2019s still good to find the outliers. Android development has a huge community of third-party open-source libraries, and a strong affinity for using these libraries to avoid reinventing the wheel. Of course, it\u2019s possible for people to go overboard, solving (perceived) problems in their apps by applying third-party solutions, without fully understanding the problem, or the solution, or both. I find it helpful to ask about solutions candidates have used, focusing on categories rather than specific libraries. Here\u2019s a few: Testing I consider testing to be its own section in my list of topics to cover. It\u2019s important. In the early days, the state of testing on Android was quite poor, but it\u2019s come along by leaps and bounds over the last couple of years, with JVM JUnit tests, Espresso, and the Android Testing Support Library. Talking about testing naturally involves talking about app architecture\u200a\u2014\u200aan app isn\u2019t testable unless it was written to be testable. So this has some crossover with the dependency injection questions mentioned above, but also has potential to bring in MVP in its various incarnations, MVVM, and any other strategy someone might use to structure their app\u2019s code. For a candidate above the level of intern or junior developer, I want to hear that they\u2019ve had some exposure to: And I want to hear what their opinions are about all of these things. CV projects and war\u00a0stories When you read over the CV of a candidate, make a note of anything on it that caught your eye. In the interview, ask about each one of those things. Writing a CV is a horrible exercise in trying to fit a lot of information into a relatively short document and still having it nicely formatted with plenty of friendly bits of whitespace. You have to prioritise and cut and revise, and sometimes your best or most interesting work only gets a couple of words on the page. It\u2019s important to provide an opportunity for people to talk about these things. Some stuff doesn\u2019t get a place on the CV, but can still be very relevant. What was your favourite, or \u201cbest\u201d project that you worked on? Why? As well as the good stuff, it\u2019s useful to ask about the bad. I like to ask about the most difficult problem (or project) a candidate has encountered, and what they did to solve it (did they solve it?). How did they approach that difficulty? It doesn\u2019t necessarily have to be technical. It could be something about the team or the customer. Either way, it can tell you a lot about someone\u200a\u2014\u200agood or bad. Personal interest in Android/technology This is the last section in my list. I feel like this can be the most casual, most informal part of the whole conversation. The goal is to get a sense of how much the candidate is really interested in Android, or in technology in general. For some people, it\u2019s just a job, and that\u2019s OK. For others, they go home every night and work on their own side projects or read every tech article they can. It\u2019s good to know these things, to get a better understanding of who you\u2019re talking to. I try to frame a question around the candidate and their experience of (or interest in) some aspect of the wider tech/Android world, preferably something recent. Is that a Moto 360 on your wrist? Were you at Droidcon [location] last week? Did you watch the I/O keynote yesterday? All of these questions serve to open a topic for more conversation. Personally, I want to hear that a candidate had some engagement in something like the I/O keynote\u200a\u2014\u200athey should have at least one opinion about at least one announcement, and something they\u2019re curious to hear more about. How do you keep up to date with Android news? I always ask this at the end, and I\u2019m not sure if it\u2019s for me or for them. Any particular blogs, websites, podcasts\u200a\u2014\u200aI can barely keep up with all the ones I follow, but I\u2019m always curious to hear what other people are using. Closing up It\u2019s important to leave time for candidates to ask any questions they might have. Obviously these don\u2019t have to wait until the end, but it\u2019s good to explicitly prompt them for any questions they didn\u2019t get a chance to ask already. You\u2019re interviewing them, but they\u2019re also learning about you, and your company. Remember, it\u2019s a two-way conversation. ", "author": "Brendan Fahy", "parent": ""}