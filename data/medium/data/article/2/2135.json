{"name": "2135", "title": "RTL Support on Android. Here is All You Need\u00a0Know", "sentences": [{"a89f": "RTL Support on Android. Here is All You Need\u00a0Know"}, {"eba7": "There comes a point in an app\u2019s lifecycle when you decide to widen your audience. Although your app works great and you have a huge number of daily downloads, not everyone is happy. Why \ud83e\udd14? No RTL (Right to Left) Layout support."}, {"79e1": "Few languages such as Arabic, Hebrew, or Persian are written from Right to Left. To handle them, Android supports RTL layouts from API 17+ i.e., Android 4.1 (Jelly Bean)."}, {"9b82": "Getting Started"}, {"233f": "Woohoo\u2026 \ud83c\udf89Done!!! Your app now supports RTL. But lets see how it looks. You can check your app in RTL mode by doing one of two things."}, {"176f": "XML Layouts"}, {"55cb": "You\u2019ll need to make the following changes in all your Layouts"}, {"f2b7": "There is a much easier way to do the above changes without going through all the files and then doing it manually. Android Studio can do this for you. Just go to Android Studio > Refactor > Add RTL support where possible\u2026"}, {"d8e1": "I would recommend you checking your app once after applying this change as you might not want all your Layouts/Views to be RTL. If you want to force any layout to LTR then just add android:layoutDirection=\"ltr\" to that view."}, {"f3b7": "Drawables"}, {"f802": "Time to search for all those drawables that you would want to be mirrored for RTL. Since resources can have variants based on device aspects like Orientation, Screen Density, API version, you can also have variants for different Layout Directions i.e., RTL or LTR. All you need to do is add the RTL variants of the drawables that you want to be mirrored."}, {"2e38": "\ud83d\udccc Small Tip\u00a0:"}, {"f369": "If your Toolbar defines back arrow nav icon like this\u00a0app:navigationIcon=\"R.drawable.back_arrow\"then you can replace it with\u00a0app:navigationIcon=\"?attr/homeAsUpIndicator\"This makes sure back button is consistent with Layout Directions. You can change its colour using colorControlNormal value in the theme."}, {"5faa": "And what if you don\u2019t have RTL variant for your drawable? Well there is sort of a temporary workaround that can come in handy. You can just add android:rotationY=\"@integer/locale_mirror_flip\" to the View you want to be mirrored. And define"}, {"5089": "res/values/integers.xml"}, {"1b55": "<integer name=\"locale_mirror_flip\">0</integer>"}, {"76e2": "res/values-ldrtl/integers.xml"}, {"add1": "<integer name=\"locale_mirror_flip\">180</integer>"}, {"c665": "I use this trick to mirror one of the Progress Indicator that doesn\u2019t support RTL."}, {"9d1e": "Animations"}, {"577b": "Animations that use X axis for transitions will not work properly. For example TranslateAnimation\u200a\u2014\u200aYou will need to add a RTL variant for these as well.\u00a0For example: android:fromXDelta=\"-100%p\" will become android:fromXDelta=\"100%p\" in RTL variant of this animation,\u00a0android:pivotX=\"25%\" will become android:pivotX=\"75%\"."}, {"b8d0": "Java Files"}, {"034e": "I would recommend defining all animations, layout, etc as xml resource only. Because RTL support for those programmatically defined layouts and animations is painful. Also, the compilation will take more time if you modify a Java file instead of XML."}, {"a15b": "If you still find these defined in your java files then this is what you\u2019ll need to do"}, {"1c83": "Extras"}, {"4d4f": "If you have completed all of the above then I believe you should have pretty good RTL Support. There are few more things you can look at for your final touch."}, {"104b": "Conclusion"}, {"ffaa": "Support for RTL is not that difficult on Android. I wish I had supported it from day 1 instead of doing it at a later stage in my app. If you found something missing or have suggestions then do comment."}], "child": "2135_1", "timestamp": "Apr 14", "content": "RTL Support on Android. Here is All You Need\u00a0Know There comes a point in an app\u2019s lifecycle when you decide to widen your audience. Although your app works great and you have a huge number of daily downloads, not everyone is happy. Why \ud83e\udd14? No RTL (Right to Left) Layout support. Few languages such as Arabic, Hebrew, or Persian are written from Right to Left. To handle them, Android supports RTL layouts from API 17+ i.e., Android 4.1 (Jelly Bean). Getting Started Woohoo\u2026 \ud83c\udf89Done!!! Your app now supports RTL. But lets see how it looks. You can check your app in RTL mode by doing one of two things. XML Layouts You\u2019ll need to make the following changes in all your Layouts There is a much easier way to do the above changes without going through all the files and then doing it manually. Android Studio can do this for you. Just go to Android Studio > Refactor > Add RTL support where possible\u2026 I would recommend you checking your app once after applying this change as you might not want all your Layouts/Views to be RTL. If you want to force any layout to LTR then just add android:layoutDirection=\"ltr\" to that view. Drawables Time to search for all those drawables that you would want to be mirrored for RTL. Since resources can have variants based on device aspects like Orientation, Screen Density, API version, you can also have variants for different Layout Directions i.e., RTL or LTR. All you need to do is add the RTL variants of the drawables that you want to be mirrored. \ud83d\udccc Small Tip\u00a0: If your Toolbar defines back arrow nav icon like this\u00a0app:navigationIcon=\"R.drawable.back_arrow\"then you can replace it with\u00a0app:navigationIcon=\"?attr/homeAsUpIndicator\"This makes sure back button is consistent with Layout Directions. You can change its colour using colorControlNormal value in the theme. And what if you don\u2019t have RTL variant for your drawable? Well there is sort of a temporary workaround that can come in handy. You can just add android:rotationY=\"@integer/locale_mirror_flip\" to the View you want to be mirrored. And define res/values/integers.xml <integer name=\"locale_mirror_flip\">0</integer> res/values-ldrtl/integers.xml <integer name=\"locale_mirror_flip\">180</integer> I use this trick to mirror one of the Progress Indicator that doesn\u2019t support RTL. Animations Animations that use X axis for transitions will not work properly. For example TranslateAnimation\u200a\u2014\u200aYou will need to add a RTL variant for these as well.\u00a0For example: android:fromXDelta=\"-100%p\" will become android:fromXDelta=\"100%p\" in RTL variant of this animation,\u00a0android:pivotX=\"25%\" will become android:pivotX=\"75%\". Java Files I would recommend defining all animations, layout, etc as xml resource only. Because RTL support for those programmatically defined layouts and animations is painful. Also, the compilation will take more time if you modify a Java file instead of XML. If you still find these defined in your java files then this is what you\u2019ll need to do Extras If you have completed all of the above then I believe you should have pretty good RTL Support. There are few more things you can look at for your final touch. Conclusion Support for RTL is not that difficult on Android. I wish I had supported it from day 1 instead of doing it at a later stage in my app. If you found something missing or have suggestions then do comment. ", "author": "Rishabh Harit", "parent": ""}