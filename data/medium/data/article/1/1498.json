{"parent": "", "timestamp": "Mar 19", "title": "Diving Deeper into Twitter\u2019s Redux Store: Adventures in Minified Vendor Javascript", "sentences": [{"30f7": "Diving Deeper into Twitter\u2019s Redux Store: Adventures in Minified Vendor Javascript"}, {"d234": "Ever since Dan Abramov showed a prototype of Redux at React Europe in 2015, I\u2019ve been fascinated with discussions around how to better manage state in a complex web application. Shameless plug: I even open sourced Redux Bug Reporter, a drop in React component and Redux enhancer that allows for filing bugs with enough serialized state and actions to allow for complete replay of the bug. But while there are plenty of excellent discussions and posts online about Redux best practices, I\u2019ve seen less information from how large companies are actually using Redux at scale."}, {"e7c8": "About a month ago, I came across Ryan Johnson\u2019s excellent post \u201cDissecting Twitter\u2019s Redux Store\u201d. In it, he walked through using the React Developer Tools to output the redux state of the Twitter mobile website, and broke down some of the design decisions evident from the results, mostly notably the normalized data structure."}, {"871b": "When looking at the tweet data, he noted that in the fetchStatus data, each tweet id had a status of \"loaded\". Ryan stated:"}, {"43ab": "I can only guess at what the other statuses are as I was never able to get a breakpoint in that let me see the status in a non-loaded state."}, {"69f0": "This made me think immediately of the excellent Redux DevTools Extension, which allows you to see all redux actions and the related state changes over time. If I could get this extension enabled on the twitter mobile site, I could see all changes to the redux store over time, and how the data responded to each action."}, {"47a7": "The process to use the Redux DevTools Extension on your own code is relatively simple, and documented very well in the project\u2019s docs. The basic pattern is calling out to a global variable when creating a store, like so:"}, {"2360": "const store = createStore(   reducer, /* preloadedState, */   window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()  );"}, {"8864": "If window.__REDUX_DEVTOOLS_EXTENSION__ exists, the store automatically hooks into the extension to provide the debugging capabilities we\u2019d like."}, {"618f": "The mobile twitter website isn\u2019t a project I have the source code to, however. I wondered if it was reasonably possible to attach the extension in production, with twitter\u2019s minified code. It turns out that it\u2019s actually not too difficult \ud83d\ude4c."}, {"e19e": "How to Attach the Redux Devtools Extension to Twitter\u2019s Mobile\u00a0Site"}, {"f340": "export default function createStore(reducer, preloadedState, enhancer) {  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {    enhancer = preloadedState    preloadedState = undefined  }  if (typeof enhancer !== 'undefined') {    if (typeof enhancer !== 'function') {      throw new Error('Expected the enhancer to be a function.')    }    return enhancer(createStore)(reducer, preloadedState)  }"}, {"82b9": "Finding the minified definition for Redux\u2019s createStore function"}, {"b795": "Plugging in the Redux DevTools Extension"}, {"d16e": "What I Found Using Redux\u00a0DevTools"}, {"ce31": "I think it\u2019s beneficial to recreate the above steps to play with the Twitter mobile site yourself, but that\u2019s a lot to ask of someone skimming a Medium post. So, here\u2019s a couple of interesting things I noticed:"}, {"5ae4": "Conclusions"}, {"e95a": "I didn\u2019t find anything mind-blowing in Twitter\u2019s Redux setup, but it can be very informative to see how a complex application handles state in a manageable way. There\u2019s a few things I would like to explicitly call out here:"}, {"6cc7": "If you made it this far, I\u2019d say it\u2019s fair to assume that managing global state in complex apps is something that interests you. I work at Slack (and love it), and have been thinking a lot recently about how to better manage global state while still supporting existing code and allowing for new features to be developed at the same time. If you are also interested in making large structural changes to an application that tons of people use every single day, we\u2019re hiring!"}], "author": "Drew Schuster", "child": "1498_1\t1498_2\t1498_3\t1498_4\t1498_51498_1\t1498_2\t1498_3\t1498_4\t1498_51498_1\t1498_2\t1498_3\t1498_4\t1498_51498_1\t1498_2\t1498_3\t1498_4\t1498_5", "name": "1498", "content": "Diving Deeper into Twitter\u2019s Redux Store: Adventures in Minified Vendor Javascript Ever since Dan Abramov showed a prototype of Redux at React Europe in 2015, I\u2019ve been fascinated with discussions around how to better manage state in a complex web application. Shameless plug: I even open sourced Redux Bug Reporter, a drop in React component and Redux enhancer that allows for filing bugs with enough serialized state and actions to allow for complete replay of the bug. But while there are plenty of excellent discussions and posts online about Redux best practices, I\u2019ve seen less information from how large companies are actually using Redux at scale. About a month ago, I came across Ryan Johnson\u2019s excellent post \u201cDissecting Twitter\u2019s Redux Store\u201d. In it, he walked through using the React Developer Tools to output the redux state of the Twitter mobile website, and broke down some of the design decisions evident from the results, mostly notably the normalized data structure. When looking at the tweet data, he noted that in the fetchStatus data, each tweet id had a status of \"loaded\". Ryan stated: I can only guess at what the other statuses are as I was never able to get a breakpoint in that let me see the status in a non-loaded state. This made me think immediately of the excellent Redux DevTools Extension, which allows you to see all redux actions and the related state changes over time. If I could get this extension enabled on the twitter mobile site, I could see all changes to the redux store over time, and how the data responded to each action. The process to use the Redux DevTools Extension on your own code is relatively simple, and documented very well in the project\u2019s docs. The basic pattern is calling out to a global variable when creating a store, like so: const store = createStore(   reducer, /* preloadedState, */   window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()  ); If window.__REDUX_DEVTOOLS_EXTENSION__ exists, the store automatically hooks into the extension to provide the debugging capabilities we\u2019d like. The mobile twitter website isn\u2019t a project I have the source code to, however. I wondered if it was reasonably possible to attach the extension in production, with twitter\u2019s minified code. It turns out that it\u2019s actually not too difficult \ud83d\ude4c. How to Attach the Redux Devtools Extension to Twitter\u2019s Mobile\u00a0Site export default function createStore(reducer, preloadedState, enhancer) {  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {    enhancer = preloadedState    preloadedState = undefined  }  if (typeof enhancer !== 'undefined') {    if (typeof enhancer !== 'function') {      throw new Error('Expected the enhancer to be a function.')    }    return enhancer(createStore)(reducer, preloadedState)  } Finding the minified definition for Redux\u2019s createStore function Plugging in the Redux DevTools Extension What I Found Using Redux\u00a0DevTools I think it\u2019s beneficial to recreate the above steps to play with the Twitter mobile site yourself, but that\u2019s a lot to ask of someone skimming a Medium post. So, here\u2019s a couple of interesting things I noticed: Conclusions I didn\u2019t find anything mind-blowing in Twitter\u2019s Redux setup, but it can be very informative to see how a complex application handles state in a manageable way. There\u2019s a few things I would like to explicitly call out here: If you made it this far, I\u2019d say it\u2019s fair to assume that managing global state in complex apps is something that interests you. I work at Slack (and love it), and have been thinking a lot recently about how to better manage global state while still supporting existing code and allowing for new features to be developed at the same time. If you are also interested in making large structural changes to an application that tons of people use every single day, we\u2019re hiring! "}