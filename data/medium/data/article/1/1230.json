{"parent": "", "timestamp": "Apr 3", "title": "Some tips for getting started with\u00a0React", "sentences": [{"972b": "Some tips for getting started with\u00a0React"}, {"d4af": "I\u2019ve been developing web applications for many years but until recently was constrained to developing on (and for) a Java stack that had to support old versions of Internet Explorer. This left me mostly casting envious glances at modern web development tools, frameworks and practices\u200a\u2014\u200adreaming of a working life filled with ES6 and flexbox."}, {"88b3": "A few months ago I was finally able to start devoting the majority of my time researching, prototyping and finally developing in a number of different frameworks. I initially spent an equal amount of time looking at Angular, Aurelia, React and Vue\u2026 but eventually settled on React."}, {"0a8e": "This isn\u2019t to say that I think that React is \u201cbetter\u201d just that it was the best fit for my specific requirements."}, {"b0f9": "I\u2019m a great believer in using the right tool for the job, you may have the best hammer in the world\u200a\u2014\u200abut you shouldn\u2019t try to use it to screw something together."}, {"684b": "React is a mature library so many best practices have been established, however I found that I didn\u2019t fall into them immediately and had to learn them the hard way."}, {"b61a": "If you\u2019re a newcomer to React (and bear in mind that I\u2019m no expert) you may find this advice useful\u2026"}, {"5209": "Start with \u201ccreate-react-app\u201d"}, {"2080": "When I started out in the world of Node.js / npm based development I began by building a development environment from scratch."}, {"bd28": "Whilst this was a valuable learning exercise I later found that not only did the \u201ccreate-react-app\u201d project provide a great starting point but the awesome comments throughout the \u201creact-scripts\u201d project (that you can browse in your node_modules folder or gain access to through ejecting) were incredibly informative."}, {"c253": "You might find that you don\u2019t keep using it in the long term, but as a playground for getting up and running with React to learn it I don\u2019t think it can be beaten."}, {"baa7": "Keep reading the Official Documentation"}, {"4b3a": "There are loads of great articles, tutorials and blogs out there but I\u2019ve found myself repeatedly going back to the official docs. I found that a lot of information didn\u2019t sink in on the first read but only became relevant as I got further into development."}, {"00d7": "Like a good album it reveals itself over time and from experience I\u2019ve found that the answers to most of my questions are located there. It is very clear on what you should probably not use to avoid problems in the future."}, {"a814": "Set refs with functions, not\u00a0strings"}, {"de46": "This is an example of information readily available in the docs but I didn\u2019t heed at first. Instead I was merrily setting refs with strings until I tried to import my components into another project. At this point I found that nothing worked and exceptions in my browser console. Fortunately the error messages in React are exceptionally good and lead me straight back to the right page in the documentation that explained and solved the problem."}, {"2abb": "Set state with a function, not an\u00a0object"}, {"abe0": "I\u2019ve seen this recently in blogs and tweets. Although it\u2019s not caused me any problems I\u2019m learning my lesson from the previous example and will update my code now to avoid issues in the future."}, {"0b3f": "Pick the right\u00a0editor"}, {"0c19": "I\u2019d been a Sublime Text user for years and still absolutely love it. Like many people who hadn\u2019t yet appreciated the benefits of JSX, I was appalled at the idea of mixing JavaScript and HTML together and trying to use Sublime Text didn\u2019t help (even after I tried the Babel Sublime package). A colleague showed me a React project in Visual Studio Code and I never looked back. I still use Sublime Text for other JavaScript projects (just as I use Eclipse for Java projects) but Visual Studio works for me\u2026 as I wrote earlier, always pick the right tool for the job."}, {"4e14": "Learn the Life\u00a0Cycle"}, {"afe3": "I\u2019ve found that when creating React components I need to think differently about how to approach problems and that understanding the component life-cycle really helps find the solutions."}, {"e291": "One really valuable tip I\u2019ve found is to make sure that if a component needs to derive state from props then you need to process those props in both the constructor and componentWillReceiveProps (especially when the component is going to be receiving new properties from its ancestors) as this has caught me out on more than one occasion."}, {"d46c": "I would certainly recommend working through problems more than once (and a good set of unit tests can really help here) as switching my way of thinking from an object-oriented approach to a functional composition approach can be quite challenging at first."}, {"573e": "\u269b\ufe0f Summary"}, {"0d86": "Hopefully these tips will be useful to someone out there. I don\u2019t expect them to be revelatory to anyone with a great deal of React experience but it was valuable to me to think about and log what I\u2019ve learned over the past few months."}, {"c673": "If you have any feedback or suggestions for other good practices then please let me know!"}], "author": "Dave Draper", "child": "1230_1\t1230_2\t1230_3\t1230_4", "name": "1230", "content": "Some tips for getting started with\u00a0React I\u2019ve been developing web applications for many years but until recently was constrained to developing on (and for) a Java stack that had to support old versions of Internet Explorer. This left me mostly casting envious glances at modern web development tools, frameworks and practices\u200a\u2014\u200adreaming of a working life filled with ES6 and flexbox. A few months ago I was finally able to start devoting the majority of my time researching, prototyping and finally developing in a number of different frameworks. I initially spent an equal amount of time looking at Angular, Aurelia, React and Vue\u2026 but eventually settled on React. This isn\u2019t to say that I think that React is \u201cbetter\u201d just that it was the best fit for my specific requirements. I\u2019m a great believer in using the right tool for the job, you may have the best hammer in the world\u200a\u2014\u200abut you shouldn\u2019t try to use it to screw something together. React is a mature library so many best practices have been established, however I found that I didn\u2019t fall into them immediately and had to learn them the hard way. If you\u2019re a newcomer to React (and bear in mind that I\u2019m no expert) you may find this advice useful\u2026 Start with \u201ccreate-react-app\u201d When I started out in the world of Node.js / npm based development I began by building a development environment from scratch. Whilst this was a valuable learning exercise I later found that not only did the \u201ccreate-react-app\u201d project provide a great starting point but the awesome comments throughout the \u201creact-scripts\u201d project (that you can browse in your node_modules folder or gain access to through ejecting) were incredibly informative. You might find that you don\u2019t keep using it in the long term, but as a playground for getting up and running with React to learn it I don\u2019t think it can be beaten. Keep reading the Official Documentation There are loads of great articles, tutorials and blogs out there but I\u2019ve found myself repeatedly going back to the official docs. I found that a lot of information didn\u2019t sink in on the first read but only became relevant as I got further into development. Like a good album it reveals itself over time and from experience I\u2019ve found that the answers to most of my questions are located there. It is very clear on what you should probably not use to avoid problems in the future. Set refs with functions, not\u00a0strings This is an example of information readily available in the docs but I didn\u2019t heed at first. Instead I was merrily setting refs with strings until I tried to import my components into another project. At this point I found that nothing worked and exceptions in my browser console. Fortunately the error messages in React are exceptionally good and lead me straight back to the right page in the documentation that explained and solved the problem. Set state with a function, not an\u00a0object I\u2019ve seen this recently in blogs and tweets. Although it\u2019s not caused me any problems I\u2019m learning my lesson from the previous example and will update my code now to avoid issues in the future. Pick the right\u00a0editor I\u2019d been a Sublime Text user for years and still absolutely love it. Like many people who hadn\u2019t yet appreciated the benefits of JSX, I was appalled at the idea of mixing JavaScript and HTML together and trying to use Sublime Text didn\u2019t help (even after I tried the Babel Sublime package). A colleague showed me a React project in Visual Studio Code and I never looked back. I still use Sublime Text for other JavaScript projects (just as I use Eclipse for Java projects) but Visual Studio works for me\u2026 as I wrote earlier, always pick the right tool for the job. Learn the Life\u00a0Cycle I\u2019ve found that when creating React components I need to think differently about how to approach problems and that understanding the component life-cycle really helps find the solutions. One really valuable tip I\u2019ve found is to make sure that if a component needs to derive state from props then you need to process those props in both the constructor and componentWillReceiveProps (especially when the component is going to be receiving new properties from its ancestors) as this has caught me out on more than one occasion. I would certainly recommend working through problems more than once (and a good set of unit tests can really help here) as switching my way of thinking from an object-oriented approach to a functional composition approach can be quite challenging at first. \u269b\ufe0f Summary Hopefully these tips will be useful to someone out there. I don\u2019t expect them to be revelatory to anyone with a great deal of React experience but it was valuable to me to think about and log what I\u2019ve learned over the past few months. If you have any feedback or suggestions for other good practices then please let me know! "}