{"parent": "", "timestamp": "Sep 19, 2016", "title": "You Might Not Need\u00a0Redux", "sentences": [{"9870": "You Might Not Need\u00a0Redux"}, {"7e78": "People often choose Redux before they need it. \u201cWhat if our app doesn\u2019t scale without it?\u201d Later, developers frown at the indirection Redux introduced to their code. \u201cWhy do I have to touch three files to get a simple feature working?\u201d Why indeed!"}, {"2b2c": "People blame Redux, React, functional programming, immutability, and many other things for their woes, and I understand them. It is natural to compare Redux to an approach that doesn\u2019t require \u201cboilerplate\u201d code to update the state, and to conclude that Redux is just complicated. In a way it is, and by design so."}, {"de62": "Redux offers a tradeoff. It asks you to:"}, {"5094": "None of these limitations are required to build an app, with or without React. In fact these are pretty strong constraints, and you should think carefully before adopting them even in parts of your app."}, {"448f": "Do you have good reasons for doing so?"}, {"3650": "These limitations are appealing to me because they help build apps that:"}, {"8d50": "If you\u2019re working on an extensible terminal, a JavaScript debugger, or some kinds of webapps, it might be worth giving it a try, or at least considering some of its ideas (they are not new, by the way!)"}, {"16c1": "However, if you\u2019re just learning React, don\u2019t make Redux your first choice."}, {"641e": "Instead learn to think in React. Come back to Redux if you find a real need for it, or if you want to try something new. But approach it with caution, just like you do with any highly opinionated tool."}, {"c4ed": "If you feel pressured to do things \u201cthe Redux way\u201d, it may be a sign that you or your teammates are taking it too seriously. It\u2019s just one of the tools in your toolbox, an experiment gone wild."}, {"c33c": "Finally, don\u2019t forget that you can apply ideas from Redux without using Redux. For example, consider a React component with local state:"}, {"64b9": "It is perfectly fine as it is. Seriously, it bears repeating."}, {"96ce": "Local state is fine."}, {"307f": "The tradeoff that Redux offers is to add indirection to decouple \u201cwhat happened\u201d from \u201chow things change\u201d."}, {"066f": "Is it always a good thing to do? No. It\u2019s a tradeoff."}, {"53d3": "For example, we can extract a reducer from our component:"}, {"f45c": "DYI Redux"}, {"e8bc": "Notice how we just used Redux without running npm install. Wow!"}, {"653e": "Should you do this to your stateful components? Probably not. That is, not unless you have a plan to benefit from this additional indirection. Having a plan is, in the parlance of our times, the \ud83d\udd11."}, {"4b4c": "Redux library itself is only a set of helpers to \u201cmount\u201d reducers to a single global store object. You can use as little, or as much of Redux, as you like."}, {"658b": "But if you trade something off, make sure you get something in return."}, {"81b1": "\u269b"}], "author": "Dan Abramov", "child": "1501_1\t1501_2\t1501_3\t1501_4\t1501_5\t1501_6\t1501_7\t1501_8\t1501_9\t1501_10\t1501_11\t1501_12\t1501_13\t1501_14\t1501_15\t1501_16\t1501_17\t1501_18\t1501_19\t1501_20\t1501_21\t1501_22\t1501_23\t1501_24\t1501_25", "name": "1501", "content": "You Might Not Need\u00a0Redux People often choose Redux before they need it. \u201cWhat if our app doesn\u2019t scale without it?\u201d Later, developers frown at the indirection Redux introduced to their code. \u201cWhy do I have to touch three files to get a simple feature working?\u201d Why indeed! People blame Redux, React, functional programming, immutability, and many other things for their woes, and I understand them. It is natural to compare Redux to an approach that doesn\u2019t require \u201cboilerplate\u201d code to update the state, and to conclude that Redux is just complicated. In a way it is, and by design so. Redux offers a tradeoff. It asks you to: None of these limitations are required to build an app, with or without React. In fact these are pretty strong constraints, and you should think carefully before adopting them even in parts of your app. Do you have good reasons for doing so? These limitations are appealing to me because they help build apps that: If you\u2019re working on an extensible terminal, a JavaScript debugger, or some kinds of webapps, it might be worth giving it a try, or at least considering some of its ideas (they are not new, by the way!) However, if you\u2019re just learning React, don\u2019t make Redux your first choice. Instead learn to think in React. Come back to Redux if you find a real need for it, or if you want to try something new. But approach it with caution, just like you do with any highly opinionated tool. If you feel pressured to do things \u201cthe Redux way\u201d, it may be a sign that you or your teammates are taking it too seriously. It\u2019s just one of the tools in your toolbox, an experiment gone wild. Finally, don\u2019t forget that you can apply ideas from Redux without using Redux. For example, consider a React component with local state: It is perfectly fine as it is. Seriously, it bears repeating. Local state is fine. The tradeoff that Redux offers is to add indirection to decouple \u201cwhat happened\u201d from \u201chow things change\u201d. Is it always a good thing to do? No. It\u2019s a tradeoff. For example, we can extract a reducer from our component: DYI Redux Notice how we just used Redux without running npm install. Wow! Should you do this to your stateful components? Probably not. That is, not unless you have a plan to benefit from this additional indirection. Having a plan is, in the parlance of our times, the \ud83d\udd11. Redux library itself is only a set of helpers to \u201cmount\u201d reducers to a single global store object. You can use as little, or as much of Redux, as you like. But if you trade something off, make sure you get something in return. \u269b "}