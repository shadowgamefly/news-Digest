{"name": "796", "parent": "", "content": "Please Don\u2019t Ask, \u201cAre the Engineers Working Hard\u00a0Enough?\u201d Image Excuse the rant, but I am tired of getting this question. Every couple of months somebody seems to ask it. It\u2019s always someone outside of the product development team. Usually, it\u2019s somebody from Operations or Marketing (no offense!) who is anxiously awaiting for their pet project to be finished. It plays out like this\u2026 The co-worker walks over to tech side of the office one day at 6pm, sees some empty desks, and then assumes the team is not working hard enough. Okay, I get it. From your perspective, \u201cbutts in seats\u201d has been a good proxy for productivity. Here\u2019s why it doesn\u2019t quite work that way for the technical team. Engineers are not like you. Most engineers and technical team members do not feed off of ad-hoc drive-by conversations, long status meetings, and noisy, buzzing, open office plans. They don\u2019t schedule their days in 30-minute calendar blocks of back-to-back meetings. To them, the normal 9-to-6 office hours seem artificial and arbitrary. In fact, all of the daily office hubbub is generally viewed as an annoyance and something standing in between them and getting their work done. And believe me they care about the work as much, if not more, than anyone else. These days, in case you didn\u2019t know, engineers are in extremely high demand. They could go work anywhere and they are at your company because they believe it\u2019s meaningful and interesting. Context switching is expensive. It\u2019s not like reading a book where you can open up the book to the dog-eared page you were reading yesterday and start reading again lickety-split. In software engineering it takes a while to get back into it. In order to be productive you have to load the whole technical situation into your conscious working mind. What are all the methods, variables, api endpoints, libraries, and how do they all relate to each other? The technical plan, product requirements and overall architecture need to be considered. Your development environments need to be ready to go. I\u2019d say it takes about a half hour of focused time just to get to productivity. If someone interrupts that, there\u2019s a good chance you have start over. Every coder wants to be in the zone. For highly complex tasks or anything that requires complete focus, being in the zone is a great place to be. You become one with the work. You reach a flow state. Everything else fades into the background. You are at your best and your productivity is off the charts. You are getting three days of work done in an afternoon because you are TOTALLY THERE. It\u2019s high quality too. Writers, poets, artists, rock climbers, you know what I mean. Actually, all of you know what I mean. Everyone knows what it\u2019s like to be in the zone. The greater point is that if coders are not there, in the zone, it\u2019s not going to be very productive. Coding is where they create leverage. For this reason, many of the very best engineers I have known like to work late at night or early in the morning at home. There, they are not burdened by meetings, email or incoming Slack messages. They can finally avoid interruptions and find that flow state. External forces can easily block technical work from proceeding. It very common for engineers to be blocked while waiting on a key deliverable from a team member, stakeholder, or a third party in order to proceed. Are final designs ready? Did the business stakeholder make the decision on pricing? Is that SaaS partner delivering on the APIs they promised? Any of these things can stop a project in its tracks. If that happens and your engineer has done everything else they can and nothing is going to change for a while, make them feel empowered to do something else. Go home. Go workout. Go work on your side project (almost every engineer has a side project to keep up with the latest technology). Go play Civilization. Don\u2019t worry because\u2026 \u2026When deadlines, big launches or outages occur your engineers will be there. All. Night. Long. You know how your Product and Engineering teams always advise you to do small incremental launches on a regular, consistent cadence? Sounds okay, right? But you\u2019re thinking nothing beats a big launch with lots of marketing sizzle, press and a party to boot! All that hoopla relies on shipping the code. The intensity will rise as the date approaches. Your engineers will work constantly to get you there. When the big day comes and all the hoopla commences, they\u2019ll be pouring over logs, triaging bugs, and watching VIP accounts. When you are toasting your champagne or being interviewed by Recode keep that in mind. A few tips: Side note: It\u2019s actually really hard to measure an engineer\u2019s output. If you read this far, you probably get it: hours do not equal output. So how do you measure performance? Do you track lines of code? That\u2019s a good recipe for crappy code. Do you count story points? That\u2019s easy to game. This is why good engineering management is a must. It really takes an engineer to be able to properly judge an engineer\u2019s work. If you want to try to assess the situation yourself and you are not an engineering manager try: 1) spending a decent amount of time with the engineer(s) to understand the complexity of the problem, 2) tactfully getting another respected engineer\u2019s assessment of the situation, and 3) asking for more regular check-ins and feedback sessions\u2013come prepared to discuss deeply. Of course all engineers are different and I\u2019m in danger of over generalizing. I\u2019m also quite aware that many non-engineers will read this and say, it\u2019s the same for finance\u2013we get in the zone too! But I have seen these same themes and situations play out at every company particularly with engineers. I lived them myself back when I got to code. Perhaps it\u2019s just my personal experience. Anyway, do me a favor. The next time you are about to ask me if the engineers are working hard enough, first check if I have my headphones on, if I do, please don\u2019t interrupt. Just come back and find me later. Like this? Please click the heart icon, share on social media, and/or follow me here or on twitter @johnv. Thanks to Paul Devine, David Dobbs and Adam Nathan for feedback and input on this! The NewCo Shift Management channel is brought to you by Work Market, the leading labor automation platform. Work Market empowers businesses and skilled professionals to unlock new levels of productivity, engagement and growth across the entire lifecycle of work. Learn more here. ", "title": "Please Don\u2019t Ask, \u201cAre the Engineers Working Hard\u00a0Enough?\u201d", "sentences": [{"8c42": "Please Don\u2019t Ask, \u201cAre the Engineers Working Hard\u00a0Enough?\u201d"}, {"f274": "Image"}, {"530c": "Excuse the rant, but I am tired of getting this question. Every couple of months somebody seems to ask it. It\u2019s always someone outside of the product development team. Usually, it\u2019s somebody from Operations or Marketing (no offense!) who is anxiously awaiting for their pet project to be finished."}, {"adec": "It plays out like this\u2026 The co-worker walks over to tech side of the office one day at 6pm, sees some empty desks, and then assumes the team is not working hard enough. Okay, I get it. From your perspective, \u201cbutts in seats\u201d has been a good proxy for productivity. Here\u2019s why it doesn\u2019t quite work that way for the technical team."}, {"622d": "Engineers are not like you. Most engineers and technical team members do not feed off of ad-hoc drive-by conversations, long status meetings, and noisy, buzzing, open office plans. They don\u2019t schedule their days in 30-minute calendar blocks of back-to-back meetings. To them, the normal 9-to-6 office hours seem artificial and arbitrary. In fact, all of the daily office hubbub is generally viewed as an annoyance and something standing in between them and getting their work done. And believe me they care about the work as much, if not more, than anyone else. These days, in case you didn\u2019t know, engineers are in extremely high demand. They could go work anywhere and they are at your company because they believe it\u2019s meaningful and interesting."}, {"079f": "Context switching is expensive. It\u2019s not like reading a book where you can open up the book to the dog-eared page you were reading yesterday and start reading again lickety-split. In software engineering it takes a while to get back into it. In order to be productive you have to load the whole technical situation into your conscious working mind. What are all the methods, variables, api endpoints, libraries, and how do they all relate to each other? The technical plan, product requirements and overall architecture need to be considered. Your development environments need to be ready to go. I\u2019d say it takes about a half hour of focused time just to get to productivity. If someone interrupts that, there\u2019s a good chance you have start over."}, {"51c3": "Every coder wants to be in the zone. For highly complex tasks or anything that requires complete focus, being in the zone is a great place to be. You become one with the work. You reach a flow state. Everything else fades into the background. You are at your best and your productivity is off the charts. You are getting three days of work done in an afternoon because you are TOTALLY THERE. It\u2019s high quality too. Writers, poets, artists, rock climbers, you know what I mean. Actually, all of you know what I mean. Everyone knows what it\u2019s like to be in the zone. The greater point is that if coders are not there, in the zone, it\u2019s not going to be very productive. Coding is where they create leverage."}, {"920f": "For this reason, many of the very best engineers I have known like to work late at night or early in the morning at home. There, they are not burdened by meetings, email or incoming Slack messages. They can finally avoid interruptions and find that flow state."}, {"0203": "External forces can easily block technical work from proceeding. It very common for engineers to be blocked while waiting on a key deliverable from a team member, stakeholder, or a third party in order to proceed. Are final designs ready? Did the business stakeholder make the decision on pricing? Is that SaaS partner delivering on the APIs they promised? Any of these things can stop a project in its tracks. If that happens and your engineer has done everything else they can and nothing is going to change for a while, make them feel empowered to do something else. Go home. Go workout. Go work on your side project (almost every engineer has a side project to keep up with the latest technology). Go play Civilization. Don\u2019t worry because\u2026"}, {"2d90": "\u2026When deadlines, big launches or outages occur your engineers will be there. All. Night. Long. You know how your Product and Engineering teams always advise you to do small incremental launches on a regular, consistent cadence? Sounds okay, right? But you\u2019re thinking nothing beats a big launch with lots of marketing sizzle, press and a party to boot! All that hoopla relies on shipping the code. The intensity will rise as the date approaches. Your engineers will work constantly to get you there. When the big day comes and all the hoopla commences, they\u2019ll be pouring over logs, triaging bugs, and watching VIP accounts. When you are toasting your champagne or being interviewed by Recode keep that in mind."}, {"5056": "A few tips:"}, {"872b": "Side note: It\u2019s actually really hard to measure an engineer\u2019s output. If you read this far, you probably get it: hours do not equal output. So how do you measure performance? Do you track lines of code? That\u2019s a good recipe for crappy code. Do you count story points? That\u2019s easy to game. This is why good engineering management is a must. It really takes an engineer to be able to properly judge an engineer\u2019s work. If you want to try to assess the situation yourself and you are not an engineering manager try: 1) spending a decent amount of time with the engineer(s) to understand the complexity of the problem, 2) tactfully getting another respected engineer\u2019s assessment of the situation, and 3) asking for more regular check-ins and feedback sessions\u2013come prepared to discuss deeply."}, {"cee0": "Of course all engineers are different and I\u2019m in danger of over generalizing. I\u2019m also quite aware that many non-engineers will read this and say, it\u2019s the same for finance\u2013we get in the zone too! But I have seen these same themes and situations play out at every company particularly with engineers. I lived them myself back when I got to code. Perhaps it\u2019s just my personal experience. Anyway, do me a favor. The next time you are about to ask me if the engineers are working hard enough, first check if I have my headphones on, if I do, please don\u2019t interrupt. Just come back and find me later."}, {"6a39": "Like this? Please click the heart icon, share on social media, and/or follow me here or on twitter @johnv."}, {"6579": "Thanks to Paul Devine, David Dobbs and Adam Nathan for feedback and input on this!"}, {"722e": "The NewCo Shift Management channel is brought to you by Work Market, the leading labor automation platform. Work Market empowers businesses and skilled professionals to unlock new levels of productivity, engagement and growth across the entire lifecycle of work. Learn more here."}], "child": "796_1\t796_2\t796_3\t796_4796_1\t796_2\t796_3\t796_4"}